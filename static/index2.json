[{"date":"0001-01-01","uri":"/troubleshooting/audit/","title":"Site audit","content":"There are several conditions that can produce errors in your published site which are not detected during the build. Run this audit before your final build.\nHUGO_MINIFY_TDEWOLFF_HTML_KEEPCOMMENTS=true HUGO_ENABLEMISSINGTRANSLATIONPLACEHOLDERS=true hugo \u0026\u0026 grep -inorE \"\u003c\\!-- raw HTML omitted --\u003e|ZgotmplZ|\\[i18n\\]|\\(\u003cnil\u003e\\)|(\u0026lt;nil\u0026gt;)|hahahugo\" public/\rTested with GNU Bash 5.1 and GNU grep 3.7.\nExample output Explanation Environment variables HUGO_MINIFY_TDEWOLFF_HTML_KEEPCOMMENTS=true Retain HTML comments even if minification is enabled. This takes precedence over minify.tdewolff.html.keepComments in the site configuration. If you minify without keeping HTML comments when performing this audit, you will not be able to detect when raw HTML has been omitted. HUGO_ENABLEMISSINGTRANSLATIONPLACEHOLDERS=true Show a placeholder instead of the default value or an empty string if a translation is missing. This takes precedence over enableMissingTranslationPlaceholders in the site configuration. Grep options -i, --ignore-case Ignore case distinctions in patterns and input data, so that characters that differ only in case match each other. -n, --line-number Prefix each line of output with the 1-based line number within its input file. -o, --only-matching Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line. -r, --recursive Read all files under each directory, recursively, following symbolic links only if they are on the command line. -E, --extended-regexp Interpret PATTERNS as extended regular expressions. Patterns \u003c!-- raw HTML omitted --\u003e By default, Hugo strips raw HTML from your markdown prior to rendering, and leaves this HTML comment in its place. ZgotmplZ ZgotmplZ is a special value that indicates that unsafe content reached a CSS or URL context at runtime. See details. [i18n] This is the placeholder produced instead of the default value or an empty string if a translation is missing. (\u003cnil\u003e) This string will appear in the rendered HTML when passing a nil value to the printf function. (\u0026lt;nil\u0026gt;) Same as above when the value returned from the printf function has not been passed through safeHTML. HAHAHUGO Under certain conditions a rendered shortcode may include all or a portion of the string H﻿AHAHUGOSHORTCODE in either uppercase or lowercase. This is difficult to detect in all circumstances, but a case-insensitive search of the output for HAHAHUGO is likely to catch the majority of cases without producing false positives. "},{"date":"0001-01-01","uri":"/hugo-modules/configuration/","title":"Configure Hugo modules","content":"Module configuration: top level hugo.\ryaml\r \rtoml\r \rjson\r \rmodule: noProxy: none noVendor: \"\" private: '*.*' proxy: direct replacements: \"\" vendorClosest: false workspace: \"off\" [module] noProxy = 'none' noVendor = '' private = '*.*' proxy = 'direct' replacements = '' vendorClosest = false workspace = 'off' { \"module\": { \"noProxy\": \"none\", \"noVendor\": \"\", \"private\": \"*.*\", \"proxy\": \"direct\", \"replacements\": \"\", \"vendorClosest\": false, \"workspace\": \"off\" } } noProxy Comma separated glob list matching paths that should not use the proxy configured above. noVendor A optional Glob pattern matching module paths to skip when vendoring, e.g. “github.com/**” private Comma separated glob list matching paths that should be treated as private. proxy Defines the proxy server to use to download remote modules. Default is direct, which means “git clone” and similar. vendorClosest When enabled, we will pick the vendored module closest to the module using it. The default behavior is to pick the first. Note that there can still be only one dependency of a given module path, so once it is in use it cannot be redefined. workspace The workspace file to use. This enables Go workspace mode. Note that this can also be set via OS env, e.g. export HUGO_MODULE_WORKSPACE=/my/hugo.work This only works with Go 1.18+. In Hugo v0.109.0 we changed the default to off and we now resolve any relative work file names relative to the working directory. replacements A comma-separated list of mappings from module paths to directories, e.g. github.com/bep/my-theme -\u003e ../..,github.com/bep/shortcodes -\u003e /some/path. This is mostly useful for temporary local development of a module, in which case you might want to save it as an environment variable, e.g: env HUGO_MODULE_REPLACEMENTS=\"github.com/bep/my-theme -\u003e ../..\". Relative paths are relative to themesDir. Absolute paths are allowed. Note that the above terms maps directly to their counterparts in Go Modules. Some of these setting may be natural to set as OS environment variables. To set the proxy server to use, as an example:\nenv HUGO_MODULE_PROXY=https://proxy.example.org hugo Most of the commands for Hugo Modules require a newer version of Go installed (see https://golang.org/dl/) and the relevant VCS client (e.g. Git, see https://git-scm.com/downloads/ ). If you have an “older” site running on Netlify, you may have to set GO_VERSION to 1.12 in your Environment settings.\nFor more information about Go Modules, see:\nhttps://github.com/golang/go/wiki/Modules https://blog.golang.org/using-go-modules Module configuration: hugoVersion If your module requires a particular version of Hugo to work, you can indicate that in the module section and the user will be warned if using a too old/new version.\nhugo.\ryaml\r \rtoml\r \rjson\r \rmodule: hugoVersion: extended: false max: \"\" min: \"\" [module] [module.hugoVersion] extended = false max = '' min = '' { \"module\": { \"hugoVersion\": { \"extended\": false, \"max\": \"\", \"min\": \"\" } } } Any of the above can be omitted.\nmin The minimum Hugo version supported, e.g. 0.55.0 max The maximum Hugo version supported, e.g. 0.55.0 extended Whether the extended version of Hugo is required. Module configuration: imports hugo.\ryaml\r \rtoml\r \rjson\r \rmodule: imports: - disable: false ignoreConfig: false ignoreImports: false path: github.com/gohugoio/hugoTestModules1_linux/modh1_2_1v - path: my-shortcodes [module] [[module.imports]] disable = false ignoreConfig = false ignoreImports = false path = 'github.com/gohugoio/hugoTestModules1_linux/modh1_2_1v' [[module.imports]] path = 'my-shortcodes' { \"module\": { \"imports\": [ { \"disable\": false, \"ignoreConfig\": false, \"ignoreImports\": false, \"path\": \"github.com/gohugoio/hugoTestModules1_linux/modh1_2_1v\" }, { \"path\": \"my-shortcodes\" } ] } } path Can be either a valid Go Module module path, e.g. github.com/gohugoio/myShortcodes, or the directory name for the module as stored in your themes folder. ignoreConfig If enabled, any module configuration file, e.g. hugo.toml, will not be loaded. Note that this will also stop the loading of any transitive module dependencies. ignoreImports If enabled, module imports will not be followed. disable Set to true to disable the module while keeping any version info in the go.* files. noMounts Do not mount any folder in this import. noVendor Never vendor this import (only allowed in main project). Most of the commands for Hugo Modules require a newer version of Go installed (see https://golang.org/dl/) and the relevant VCS client (e.g. Git, see https://git-scm.com/downloads/ ). If you have an “older” site running on Netlify, you may have to set GO_VERSION to 1.12 in your Environment settings.\nFor more information about Go Modules, see:\nhttps://github.com/golang/go/wiki/Modules https://blog.golang.org/using-go-modules Module configuration: mounts When the mounts configuration was introduced in Hugo 0.56.0, we were careful to preserve the existing contentDir, staticDir, and similar configuration to make sure all existing sites just continued to work. But you should not have both: if you add a mounts section you should remove the old contentDir, staticDir, etc. settings.\nWhen you add a mount, the default mount for the concerned target root is ignored: be sure to explicitly add it.\nDefault mounts hugo.\ryaml\r \rtoml\r \rjson\r \rmodule: mounts: - source: content target: content - source: static target: static - source: layouts target: layouts - source: data target: data - source: assets target: assets - source: i18n target: i18n - source: archetypes target: archetypes [module] [[module.mounts]] source = 'content' target = 'content' [[module.mounts]] source = 'static' target = 'static' [[module.mounts]] source = 'layouts' target = 'layouts' [[module.mounts]] source = 'data' target = 'data' [[module.mounts]] source = 'assets' target = 'assets' [[module.mounts]] source = 'i18n' target = 'i18n' [[module.mounts]] source = 'archetypes' target = 'archetypes' { \"module\": { \"mounts\": [ { \"source\": \"content\", \"target\": \"content\" }, { \"source\": \"static\", \"target\": \"static\" }, { \"source\": \"layouts\", \"target\": \"layouts\" }, { \"source\": \"data\", \"target\": \"data\" }, { \"source\": \"assets\", \"target\": \"assets\" }, { \"source\": \"i18n\", \"target\": \"i18n\" }, { \"source\": \"archetypes\", \"target\": \"archetypes\" } ] } } source The source directory of the mount. For the main project, this can be either project-relative or absolute and even a symbolic link. For other modules it must be project-relative. target Where it should be mounted into Hugo’s virtual filesystem. It must start with one of Hugo’s component folders: static, content, layouts, data, assets, i18n, or archetypes. E.g. content/blog. lang The language code, e.g. “en”. Only relevant for content mounts, and static mounts when in multihost mode. includeFiles (string or slice) One or more glob patterns matching files or directories to include. If excludeFiles is not set, the files matching includeFiles will be the files mounted. The glob patterns are matched to the file names starting from the source root, they should have Unix styled slashes even on Windows, / matches the mount root and ** can be used as a super-asterisk to match recursively down all directories, e.g /posts/**.jpg.\nThe search is case-insensitive.\nexcludeFiles (string or slice) One or more glob patterns matching files to exclude. Example hugo.\ryaml\r \rtoml\r \rjson\r \rmodule: mounts: - excludeFiles: docs/* source: content target: content - source: node_modules target: assets - source: assets target: assets [module] [[module.mounts]] excludeFiles = 'docs/*' source = 'content' target = 'content' [[module.mounts]] source = 'node_modules' target = 'assets' [[module.mounts]] source = 'assets' target = 'assets' { \"module\": { \"mounts\": [ { \"excludeFiles\": \"docs/*\", \"source\": \"content\", \"target\": \"content\" }, { \"source\": \"node_modules\", \"target\": \"assets\" }, { \"source\": \"assets\", \"target\": \"assets\" } ] } } "},{"date":"0001-01-01","uri":"/contribute/development/","title":"Development","content":"Introduction You can contribute to the Hugo project by:\nAnswering questions on the forum Improving the documentation Monitoring the issue queue Creating or improving themes Squashing bugs Please submit documentation issues and pull requests to the documentation repository.\nIf you have an idea for an enhancement or new feature, create a new topic on the forum in the “Feature” category. This will help you to:\nDetermine if the capability already exists Measure interest Refine the concept If there is sufficient interest, create a proposal. Do not submit a pull request until the project lead accepts the proposal.\nFor a complete guide to contributing to Hugo, see the Contribution Guide.\nPrerequisites To build the extended edition of Hugo from source you must:\nInstall Git Install Go version 1.20 or later Install a C compiler, either GCC or Clang Update your PATH environment variable as described in the Go documentation See these detailed instructions to install GCC on Windows.\nGitHub workflow This section assumes that you have a working knowledge of Go, Git and GitHub, and are comfortable working on the command line.\nUse this workflow to create and submit pull requests.\nStep 1 Fork the project repository. Step 2 Clone your fork. Step 3 Create a new branch with a descriptive name that includes the corresponding issue number. For a new feature:\ngit checkout -b feat/implement-some-feature-99999 For a bug fix:\ngit checkout -b fix/fix-some-bug-99999 Step 4 Make changes. Step 5 Compile and install: CGO_ENABLED=1 go install -tags extended Step 6 Test your changes: go test ./... Step 7 Commit your changes with a descriptive commit message: Provide a summary on the first line, typically 50 characters or less, followed by a blank line. Optionally, provide a detailed description where each line is 80 characters or less, followed by a blank line. Add one or more “Fixes” or “Closes” keywords, each on its own line, referencing the issues addressed by this change. For example:\ngit commit -m \"tpl/strings: Create wrap function The strings.Wrap function wraps a string into one or more lines, splitting the string after the given number of characters, but not splitting in the middle of a word. Fixes #99998 Closes #99999\" See the commit message guidelines for details.\nStep 8 Push the new branch to your fork of the documentation repository. Step 9 Visit the project repository and create a pull request (PR). Step 10 A project maintainer will review your PR and may request changes. You may delete your branch after the maintainer merges your PR. "},{"date":"0001-01-01","uri":"/tools/editors/","title":"Editor plugins","content":"Visual Studio Code Front Matter Once you go for a static site, you need to think about how you are going to manage your articles. Front matter is a tool that helps you maintain the metadata/front matter of your articles like: creation date, modified date, slug, tile, SEO check, and more. Hugo Helper Hugo Helper is a plugin for Visual Studio Code that has some useful commands for Hugo. The source code can be found here. Hugo Language and Syntax Support Hugo Language and Syntax Support is a Visual Studio Code plugin for Hugo syntax highlighting and snippets. The source code can be found here. Hugo Themer Hugo Themer is an extension to help you while developing themes. It allows you to easily navigate through your theme files. Hugofy Hugofy is a plugin for Visual Studio Code to “make life easier” when developing with Hugo. The source code can be found here. Prettier Plugin for Go Templates Format Hugo templates using this Prettier plugin. See installation instructions. Syntax Highlighting for Hugo Shortcodes This extension adds some syntax highlighting for Shortcodes, making visual identification of individual pieces easier. Emacs emacs-easy-hugo Emacs major mode for managing hugo blogs. Note that Hugo also supports Org-mode. ox-hugo.el Native Org-mode exporter that exports to Blackfriday Markdown with Hugo front-matter. ox-hugo supports two common Org blogging flows — exporting multiple Org subtrees in a single file to multiple Hugo posts, and exporting a single Org file to a single Hugo post. It also leverages the Org tag and property inheritance features. See Why ox-hugo? for more. Sublime Text Hugofy Hugofy is a plugin for Sublime Text 3 to make life easier to use Hugo static site generator. Hugo Snippets Hugo Snippets is a useful plugin for adding automatic snippets to Sublime Text 3. Vim Vim Hugo Helper A small Vim plugin that facilitates authoring pages and blog posts with Hugo. vim-hugo A Vim plugin with syntax highlighting for templates and a few other features. "},{"date":"0001-01-01","uri":"/quick-reference/emojis/","title":"Emojis","content":"Configure Hugo to enable emoji processing in markdown:\nhugo.\ryaml\r \rtoml\r \rjson\r \renableEmoji: true enableEmoji = true { \"enableEmoji\": true } With emoji processing enabled, this markdown:\nHello! :wave: Is rendered to:\nHello! \u0026#x1f44b; And in your browser… Hello! 👋\nTo process an emoji shortcode from within a template, use the emojify function or pass the string through the RenderString method on a Page object:\n{{ \"Hello! :wave:\" | .RenderString }} Introduction This quick reference guide was automatically generated from GitHub Emoji API and Unicode Full Emoji List. Specials thanks to @ikatyang for making this list available to the open-source community.\nGitHub custom emoji are not supported.\nSmileys \u0026 Emotion Face Smiling Face Affection Face Tongue Face Hand Face Neutral Skeptical Face Sleepy Face Unwell Face Hat Face Glasses Face Concerned Face Negative Face Costume Cat Face Monkey Face Heart Emotion Face Smiling ico shortcode ico shortcode top 😀 :grinning: 😃 :smiley: top top 😄 :smile: 😁 :grin: top top 😆 :laughing: :satisfied: 😅 :sweat_smile: top top 🤣 :rofl: 😂 :joy: top top 🙂 :slightly_smiling_face: 🙃 :upside_down_face: top top 😉 :wink: 😊 :blush: top top 😇 :innocent: top Face Affection ico shortcode ico shortcode top 🥰 :smiling_face_with_three_hearts: 😍 :heart_eyes: top top 🤩 :star_struck: 😘 :kissing_heart: top top 😗 :kissing: ☺️ :relaxed: top top 😚 :kissing_closed_eyes: 😙 :kissing_smiling_eyes: top top 🥲 :smiling_face_with_tear: top Face Tongue ico shortcode ico shortcode top 😋 :yum: 😛 :stuck_out_tongue: top top 😜 :stuck_out_tongue_winking_eye: 🤪 :zany_face: top top 😝 :stuck_out_tongue_closed_eyes: 🤑 :money_mouth_face: top Face Hand ico shortcode ico shortcode top 🤗 :hugs: 🤭 :hand_over_mouth: top top 🤫 :shushing_face: 🤔 :thinking: top Face Neutral Skeptical ico shortcode ico shortcode top 🤐 :zipper_mouth_face: 🤨 :raised_eyebrow: top top 😐 :neutral_face: 😑 :expressionless: top top 😶 :no_mouth: 😶‍🌫️ :face_in_clouds: top top 😏 :smirk: 😒 :unamused: top top 🙄 :roll_eyes: 😬 :grimacing: top top 😮‍💨 :face_exhaling: 🤥 :lying_face: top Face Sleepy ico shortcode ico shortcode top 😌 :relieved: 😔 :pensive: top top 😪 :sleepy: 🤤 :drooling_face: top top 😴 :sleeping: top Face Unwell ico shortcode ico shortcode top 😷 :mask: 🤒 :face_with_thermometer: top top 🤕 :face_with_head_bandage: 🤢 :nauseated_face: top top 🤮 :vomiting_face: 🤧 :sneezing_face: top top 🥵 :hot_face: 🥶 :cold_face: top top 🥴 :woozy_face: 😵 :dizzy_face: top top 😵‍💫 :face_with_spiral_eyes: 🤯 :exploding_head: top Face Hat ico shortcode ico shortcode top 🤠 :cowboy_hat_face: 🥳 :partying_face: top top 🥸 :disguised_face: top Face Glasses ico shortcode ico shortcode top 😎 :sunglasses: 🤓 :nerd_face: top top 🧐 :monocle_face: top Face Concerned ico shortcode ico shortcode top 😕 :confused: 😟 :worried: top top 🙁 :slightly_frowning_face: ☹️ :frowning_face: top top 😮 :open_mouth: 😯 :hushed: top top 😲 :astonished: 😳 :flushed: top top 🥺 :pleading_face: 😦 :frowning: top top 😧 :anguished: 😨 :fearful: top top 😰 :cold_sweat: 😥 :disappointed_relieved: top top 😢 :cry: 😭 :sob: top top 😱 :scream: 😖 :confounded: top top 😣 :persevere: 😞 :disappointed: top top 😓 :sweat: 😩 :weary: top top 😫 :tired_face: 🥱 :yawning_face: top Face Negative ico shortcode ico shortcode top 😤 :triumph: 😡 :pout: :rage: top top 😠 :angry: 🤬 :cursing_face: top top 😈 :smiling_imp: 👿 :imp: top top 💀 :skull: ☠️ :skull_and_crossbones: top Face Costume ico shortcode ico shortcode top 💩 :hankey: :poop: :shit: 🤡 :clown_face: top top 👹 :japanese_ogre: 👺 :japanese_goblin: top top 👻 :ghost: 👽 :alien: top top 👾 :space_invader: 🤖 :robot: top Cat Face ico shortcode ico shortcode top 😺 :smiley_cat: 😸 :smile_cat: top top 😹 :joy_cat: 😻 :heart_eyes_cat: top top 😼 :smirk_cat: 😽 :kissing_cat: top top 🙀 :scream_cat: 😿 :crying_cat_face: top top 😾 :pouting_cat: top Monkey Face ico shortcode ico shortcode top 🙈 :see_no_evil: 🙉 :hear_no_evil: top top 🙊 :speak_no_evil: top Heart ico shortcode ico shortcode top 💌 :love_letter: 💘 :cupid: top top 💝 :gift_heart: 💖 :sparkling_heart: top top 💗 :heartpulse: 💓 :heartbeat: top top 💞 :revolving_hearts: 💕 :two_hearts: top top 💟 :heart_decoration: ❣️ :heavy_heart_exclamation: top top 💔 :broken_heart: ❤️‍🔥 :heart_on_fire: top top ❤️‍🩹 :mending_heart: ❤️ :heart: top top 🧡 :orange_heart: 💛 :yellow_heart: top top 💚 :green_heart: 💙 :blue_heart: top top 💜 :purple_heart: 🤎 :brown_heart: top top 🖤 :black_heart: 🤍 :white_heart: top Emotion ico shortcode ico shortcode top 💋 :kiss: 💯 :100: top top 💢 :anger: 💥 :boom: :collision: top top 💫 :dizzy: 💦 :sweat_drops: top top 💨 :dash: 🕳️ :hole: top top 💬 :speech_balloon: 👁️‍🗨️ :eye_speech_bubble: top top 🗨️ :left_speech_bubble: 🗯️ :right_anger_bubble: top top 💭 :thought_balloon: 💤 :zzz: top People \u0026 Body Hand Fingers Open Hand Fingers Partial Hand Single Finger Hand Fingers Closed Hands Hand Prop Body Parts Person Person Gesture Person Role Person Fantasy Person Activity Person Sport Person Resting Family Person Symbol Hand Fingers Open ico shortcode ico shortcode top 👋 :wave: 🤚 :raised_back_of_hand: top top 🖐️ :raised_hand_with_fingers_splayed: ✋ :hand: :raised_hand: top top 🖖 :vulcan_salute: top Hand Fingers Partial ico shortcode ico shortcode top 👌 :ok_hand: 🤌 :pinched_fingers: top top 🤏 :pinching_hand: ✌️ :v: top top 🤞 :crossed_fingers: 🤟 :love_you_gesture: top top 🤘 :metal: 🤙 :call_me_hand: top Hand Single Finger ico shortcode ico shortcode top 👈 :point_left: 👉 :point_right: top top 👆 :point_up_2: 🖕 :fu: :middle_finger: top top 👇 :point_down: ☝️ :point_up: top Hand Fingers Closed ico shortcode ico shortcode top 👍 :+1: :thumbsup: 👎 :-1: :thumbsdown: top top ✊ :fist: :fist_raised: 👊 :facepunch: :fist_oncoming: :punch: top top 🤛 :fist_left: 🤜 :fist_right: top Hands ico shortcode ico shortcode top 👏 :clap: 🙌 :raised_hands: top top 👐 :open_hands: 🤲 :palms_up_together: top top 🤝 :handshake: 🙏 :pray: top Hand Prop ico shortcode ico shortcode top ✍️ :writing_hand: 💅 :nail_care: top top 🤳 :selfie: top Body Parts ico shortcode ico shortcode top 💪 :muscle: 🦾 :mechanical_arm: top top 🦿 :mechanical_leg: 🦵 :leg: top top 🦶 :foot: 👂 :ear: top top 🦻 :ear_with_hearing_aid: 👃 :nose: top top 🧠 :brain: 🫀 :anatomical_heart: top top 🫁 :lungs: 🦷 :tooth: top top 🦴 :bone: 👀 :eyes: top top 👁️ :eye: 👅 :tongue: top top 👄 :lips: top Person ico shortcode ico shortcode top 👶 :baby: 🧒 :child: top top 👦 :boy: 👧 :girl: top top 🧑 :adult: 👱 :blond_haired_person: top top 👨 :man: 🧔 :bearded_person: top top 🧔‍♂️ :man_beard: 🧔‍♀️ :woman_beard: top top 👨‍🦰 :red_haired_man: 👨‍🦱 :curly_haired_man: top top 👨‍🦳 :white_haired_man: 👨‍🦲 :bald_man: top top 👩 :woman: 👩‍🦰 :red_haired_woman: top top 🧑‍🦰 :person_red_hair: 👩‍🦱 :curly_haired_woman: top top 🧑‍🦱 :person_curly_hair: 👩‍🦳 :white_haired_woman: top top 🧑‍🦳 :person_white_hair: 👩‍🦲 :bald_woman: top top 🧑‍🦲 :person_bald: 👱‍♀️ :blond_haired_woman: :blonde_woman: top top 👱‍♂️ :blond_haired_man: 🧓 :older_adult: top top 👴 :older_man: 👵 :older_woman: top Person Gesture ico shortcode ico shortcode top 🙍 :frowning_person: 🙍‍♂️ :frowning_man: top top 🙍‍♀️ :frowning_woman: 🙎 :pouting_face: top top 🙎‍♂️ :pouting_man: 🙎‍♀️ :pouting_woman: top top 🙅 :no_good: 🙅‍♂️ :ng_man: :no_good_man: top top 🙅‍♀️ :ng_woman: :no_good_woman: 🙆 :ok_person: top top 🙆‍♂️ :ok_man: 🙆‍♀️ :ok_woman: top top 💁 :information_desk_person: :tipping_hand_person: 💁‍♂️ :sassy_man: :tipping_hand_man: top top 💁‍♀️ :sassy_woman: :tipping_hand_woman: 🙋 :raising_hand: top top 🙋‍♂️ :raising_hand_man: 🙋‍♀️ :raising_hand_woman: top top 🧏 :deaf_person: 🧏‍♂️ :deaf_man: top top 🧏‍♀️ :deaf_woman: 🙇 :bow: top top 🙇‍♂️ :bowing_man: 🙇‍♀️ :bowing_woman: top top 🤦 :facepalm: 🤦‍♂️ :man_facepalming: top top 🤦‍♀️ :woman_facepalming: 🤷 :shrug: top top 🤷‍♂️ :man_shrugging: 🤷‍♀️ :woman_shrugging: top Person Role ico shortcode ico shortcode top 🧑‍⚕️ :health_worker: 👨‍⚕️ :man_health_worker: top top 👩‍⚕️ :woman_health_worker: 🧑‍🎓 :student: top top 👨‍🎓 :man_student: 👩‍🎓 :woman_student: top top 🧑‍🏫 :teacher: 👨‍🏫 :man_teacher: top top 👩‍🏫 :woman_teacher: 🧑‍⚖️ :judge: top top 👨‍⚖️ :man_judge: 👩‍⚖️ :woman_judge: top top 🧑‍🌾 :farmer: 👨‍🌾 :man_farmer: top top 👩‍🌾 :woman_farmer: 🧑‍🍳 :cook: top top 👨‍🍳 :man_cook: 👩‍🍳 :woman_cook: top top 🧑‍🔧 :mechanic: 👨‍🔧 :man_mechanic: top top 👩‍🔧 :woman_mechanic: 🧑‍🏭 :factory_worker: top top 👨‍🏭 :man_factory_worker: 👩‍🏭 :woman_factory_worker: top top 🧑‍💼 :office_worker: 👨‍💼 :man_office_worker: top top 👩‍💼 :woman_office_worker: 🧑‍🔬 :scientist: top top 👨‍🔬 :man_scientist: 👩‍🔬 :woman_scientist: top top 🧑‍💻 :technologist: 👨‍💻 :man_technologist: top top 👩‍💻 :woman_technologist: 🧑‍🎤 :singer: top top 👨‍🎤 :man_singer: 👩‍🎤 :woman_singer: top top 🧑‍🎨 :artist: 👨‍🎨 :man_artist: top top 👩‍🎨 :woman_artist: 🧑‍✈️ :pilot: top top 👨‍✈️ :man_pilot: 👩‍✈️ :woman_pilot: top top 🧑‍🚀 :astronaut: 👨‍🚀 :man_astronaut: top top 👩‍🚀 :woman_astronaut: 🧑‍🚒 :firefighter: top top 👨‍🚒 :man_firefighter: 👩‍🚒 :woman_firefighter: top top 👮 :cop: :police_officer: 👮‍♂️ :policeman: top top 👮‍♀️ :policewoman: 🕵️ :detective: top top 🕵️‍♂️ :male_detective: 🕵️‍♀️ :female_detective: top top 💂 :guard: 💂‍♂️ :guardsman: top top 💂‍♀️ :guardswoman: 🥷 :ninja: top top 👷 :construction_worker: 👷‍♂️ :construction_worker_man: top top 👷‍♀️ :construction_worker_woman: 🤴 :prince: top top 👸 :princess: 👳 :person_with_turban: top top 👳‍♂️ :man_with_turban: 👳‍♀️ :woman_with_turban: top top 👲 :man_with_gua_pi_mao: 🧕 :woman_with_headscarf: top top 🤵 :person_in_tuxedo: 🤵‍♂️ :man_in_tuxedo: top top 🤵‍♀️ :woman_in_tuxedo: 👰 :person_with_veil: top top 👰‍♂️ :man_with_veil: 👰‍♀️ :bride_with_veil: :woman_with_veil: top top 🤰 :pregnant_woman: 🤱 :breast_feeding: top top 👩‍🍼 :woman_feeding_baby: 👨‍🍼 :man_feeding_baby: top top 🧑‍🍼 :person_feeding_baby: top Person Fantasy ico shortcode ico shortcode top 👼 :angel: 🎅 :santa: top top 🤶 :mrs_claus: 🧑‍🎄 :mx_claus: top top 🦸 :superhero: 🦸‍♂️ :superhero_man: top top 🦸‍♀️ :superhero_woman: 🦹 :supervillain: top top 🦹‍♂️ :supervillain_man: 🦹‍♀️ :supervillain_woman: top top 🧙 :mage: 🧙‍♂️ :mage_man: top top 🧙‍♀️ :mage_woman: 🧚 :fairy: top top 🧚‍♂️ :fairy_man: 🧚‍♀️ :fairy_woman: top top 🧛 :vampire: 🧛‍♂️ :vampire_man: top top 🧛‍♀️ :vampire_woman: 🧜 :merperson: top top 🧜‍♂️ :merman: 🧜‍♀️ :mermaid: top top 🧝 :elf: 🧝‍♂️ :elf_man: top top 🧝‍♀️ :elf_woman: 🧞 :genie: top top 🧞‍♂️ :genie_man: 🧞‍♀️ :genie_woman: top top 🧟 :zombie: 🧟‍♂️ :zombie_man: top top 🧟‍♀️ :zombie_woman: top Person Activity ico shortcode ico shortcode top 💆 :massage: 💆‍♂️ :massage_man: top top 💆‍♀️ :massage_woman: 💇 :haircut: top top 💇‍♂️ :haircut_man: 💇‍♀️ :haircut_woman: top top 🚶 :walking: 🚶‍♂️ :walking_man: top top 🚶‍♀️ :walking_woman: 🧍 :standing_person: top top 🧍‍♂️ :standing_man: 🧍‍♀️ :standing_woman: top top 🧎 :kneeling_person: 🧎‍♂️ :kneeling_man: top top 🧎‍♀️ :kneeling_woman: 🧑‍🦯 :person_with_probing_cane: top top 👨‍🦯 :man_with_probing_cane: 👩‍🦯 :woman_with_probing_cane: top top 🧑‍🦼 :person_in_motorized_wheelchair: 👨‍🦼 :man_in_motorized_wheelchair: top top 👩‍🦼 :woman_in_motorized_wheelchair: 🧑‍🦽 :person_in_manual_wheelchair: top top 👨‍🦽 :man_in_manual_wheelchair: 👩‍🦽 :woman_in_manual_wheelchair: top top 🏃 :runner: :running: 🏃‍♂️ :running_man: top top 🏃‍♀️ :running_woman: 💃 :dancer: :woman_dancing: top top 🕺 :man_dancing: 🕴️ :business_suit_levitating: top top 👯 :dancers: 👯‍♂️ :dancing_men: top top 👯‍♀️ :dancing_women: 🧖 :sauna_person: top top 🧖‍♂️ :sauna_man: 🧖‍♀️ :sauna_woman: top top 🧗 :climbing: 🧗‍♂️ :climbing_man: top top 🧗‍♀️ :climbing_woman: top Person Sport ico shortcode ico shortcode top 🤺 :person_fencing: 🏇 :horse_racing: top top ⛷️ :skier: 🏂 :snowboarder: top top 🏌️ :golfing: 🏌️‍♂️ :golfing_man: top top 🏌️‍♀️ :golfing_woman: 🏄 :surfer: top top 🏄‍♂️ :surfing_man: 🏄‍♀️ :surfing_woman: top top 🚣 :rowboat: 🚣‍♂️ :rowing_man: top top 🚣‍♀️ :rowing_woman: 🏊 :swimmer: top top 🏊‍♂️ :swimming_man: 🏊‍♀️ :swimming_woman: top top ⛹️ :bouncing_ball_person: ⛹️‍♂️ :basketball_man: :bouncing_ball_man: top top ⛹️‍♀️ :basketball_woman: :bouncing_ball_woman: 🏋️ :weight_lifting: top top 🏋️‍♂️ :weight_lifting_man: 🏋️‍♀️ :weight_lifting_woman: top top 🚴 :bicyclist: 🚴‍♂️ :biking_man: top top 🚴‍♀️ :biking_woman: 🚵 :mountain_bicyclist: top top 🚵‍♂️ :mountain_biking_man: 🚵‍♀️ :mountain_biking_woman: top top 🤸 :cartwheeling: 🤸‍♂️ :man_cartwheeling: top top 🤸‍♀️ :woman_cartwheeling: 🤼 :wrestling: top top 🤼‍♂️ :men_wrestling: 🤼‍♀️ :women_wrestling: top top 🤽 :water_polo: 🤽‍♂️ :man_playing_water_polo: top top 🤽‍♀️ :woman_playing_water_polo: 🤾 :handball_person: top top 🤾‍♂️ :man_playing_handball: 🤾‍♀️ :woman_playing_handball: top top 🤹 :juggling_person: 🤹‍♂️ :man_juggling: top top 🤹‍♀️ :woman_juggling: top Person Resting ico shortcode ico shortcode top 🧘 :lotus_position: 🧘‍♂️ :lotus_position_man: top top 🧘‍♀️ :lotus_position_woman: 🛀 :bath: top top 🛌 :sleeping_bed: top Family ico shortcode ico shortcode top 🧑‍🤝‍🧑 :people_holding_hands: 👭 :two_women_holding_hands: top top 👫 :couple: 👬 :two_men_holding_hands: top top 💏 :couplekiss: 👩‍❤️‍💋‍👨 :couplekiss_man_woman: top top 👨‍❤️‍💋‍👨 :couplekiss_man_man: 👩‍❤️‍💋‍👩 :couplekiss_woman_woman: top top 💑 :couple_with_heart: 👩‍❤️‍👨 :couple_with_heart_woman_man: top top 👨‍❤️‍👨 :couple_with_heart_man_man: 👩‍❤️‍👩 :couple_with_heart_woman_woman: top top 👨‍👩‍👦 :family_man_woman_boy: 👨‍👩‍👧 :family_man_woman_girl: top top 👨‍👩‍👧‍👦 :family_man_woman_girl_boy: 👨‍👩‍👦‍👦 :family_man_woman_boy_boy: top top 👨‍👩‍👧‍👧 :family_man_woman_girl_girl: 👨‍👨‍👦 :family_man_man_boy: top top 👨‍👨‍👧 :family_man_man_girl: 👨‍👨‍👧‍👦 :family_man_man_girl_boy: top top 👨‍👨‍👦‍👦 :family_man_man_boy_boy: 👨‍👨‍👧‍👧 :family_man_man_girl_girl: top top 👩‍👩‍👦 :family_woman_woman_boy: 👩‍👩‍👧 :family_woman_woman_girl: top top 👩‍👩‍👧‍👦 :family_woman_woman_girl_boy: 👩‍👩‍👦‍👦 :family_woman_woman_boy_boy: top top 👩‍👩‍👧‍👧 :family_woman_woman_girl_girl: 👨‍👦 :family_man_boy: top top 👨‍👦‍👦 :family_man_boy_boy: 👨‍👧 :family_man_girl: top top 👨‍👧‍👦 :family_man_girl_boy: 👨‍👧‍👧 :family_man_girl_girl: top top 👩‍👦 :family_woman_boy: 👩‍👦‍👦 :family_woman_boy_boy: top top 👩‍👧 :family_woman_girl: 👩‍👧‍👦 :family_woman_girl_boy: top top 👩‍👧‍👧 :family_woman_girl_girl: top Person Symbol ico shortcode ico shortcode top 🗣️ :speaking_head: 👤 :bust_in_silhouette: top top 👥 :busts_in_silhouette: 🫂 :people_hugging: top top 👪 :family: 👣 :footprints: top Animals \u0026 Nature Animal Mammal Animal Bird Animal Amphibian Animal Reptile Animal Marine Animal Bug Plant Flower Plant Other Animal Mammal ico shortcode ico shortcode top 🐵 :monkey_face: 🐒 :monkey: top top 🦍 :gorilla: 🦧 :orangutan: top top 🐶 :dog: 🐕 :dog2: top top 🦮 :guide_dog: 🐕‍🦺 :service_dog: top top 🐩 :poodle: 🐺 :wolf: top top 🦊 :fox_face: 🦝 :raccoon: top top 🐱 :cat: 🐈 :cat2: top top 🐈‍⬛ :black_cat: 🦁 :lion: top top 🐯 :tiger: 🐅 :tiger2: top top 🐆 :leopard: 🐴 :horse: top top 🐎 :racehorse: 🦄 :unicorn: top top 🦓 :zebra: 🦌 :deer: top top 🦬 :bison: 🐮 :cow: top top 🐂 :ox: 🐃 :water_buffalo: top top 🐄 :cow2: 🐷 :pig: top top 🐖 :pig2: 🐗 :boar: top top 🐽 :pig_nose: 🐏 :ram: top top 🐑 :sheep: 🐐 :goat: top top 🐪 :dromedary_camel: 🐫 :camel: top top 🦙 :llama: 🦒 :giraffe: top top 🐘 :elephant: 🦣 :mammoth: top top 🦏 :rhinoceros: 🦛 :hippopotamus: top top 🐭 :mouse: 🐁 :mouse2: top top 🐀 :rat: 🐹 :hamster: top top 🐰 :rabbit: 🐇 :rabbit2: top top 🐿️ :chipmunk: 🦫 :beaver: top top 🦔 :hedgehog: 🦇 :bat: top top 🐻 :bear: 🐻‍❄️ :polar_bear: top top 🐨 :koala: 🐼 :panda_face: top top 🦥 :sloth: 🦦 :otter: top top 🦨 :skunk: 🦘 :kangaroo: top top 🦡 :badger: 🐾 :feet: :paw_prints: top Animal Bird ico shortcode ico shortcode top 🦃 :turkey: 🐔 :chicken: top top 🐓 :rooster: 🐣 :hatching_chick: top top 🐤 :baby_chick: 🐥 :hatched_chick: top top 🐦 :bird: 🐧 :penguin: top top 🕊️ :dove: 🦅 :eagle: top top 🦆 :duck: 🦢 :swan: top top 🦉 :owl: 🦤 :dodo: top top 🪶 :feather: 🦩 :flamingo: top top 🦚 :peacock: 🦜 :parrot: top Animal Amphibian ico shortcode top 🐸 :frog: top Animal Reptile ico shortcode ico shortcode top 🐊 :crocodile: 🐢 :turtle: top top 🦎 :lizard: 🐍 :snake: top top 🐲 :dragon_face: 🐉 :dragon: top top 🦕 :sauropod: 🦖 :t-rex: top Animal Marine ico shortcode ico shortcode top 🐳 :whale: 🐋 :whale2: top top 🐬 :dolphin: :flipper: 🦭 :seal: top top 🐟 :fish: 🐠 :tropical_fish: top top 🐡 :blowfish: 🦈 :shark: top top 🐙 :octopus: 🐚 :shell: top Animal Bug ico shortcode ico shortcode top 🐌 :snail: 🦋 :butterfly: top top 🐛 :bug: 🐜 :ant: top top 🐝 :bee: :honeybee: 🪲 :beetle: top top 🐞 :lady_beetle: 🦗 :cricket: top top 🪳 :cockroach: 🕷️ :spider: top top 🕸️ :spider_web: 🦂 :scorpion: top top 🦟 :mosquito: 🪰 :fly: top top 🪱 :worm: 🦠 :microbe: top Plant Flower ico shortcode ico shortcode top 💐 :bouquet: 🌸 :cherry_blossom: top top 💮 :white_flower: 🏵️ :rosette: top top 🌹 :rose: 🥀 :wilted_flower: top top 🌺 :hibiscus: 🌻 :sunflower: top top 🌼 :blossom: 🌷 :tulip: top Plant Other ico shortcode ico shortcode top 🌱 :seedling: 🪴 :potted_plant: top top 🌲 :evergreen_tree: 🌳 :deciduous_tree: top top 🌴 :palm_tree: 🌵 :cactus: top top 🌾 :ear_of_rice: 🌿 :herb: top top ☘️ :shamrock: 🍀 :four_leaf_clover: top top 🍁 :maple_leaf: 🍂 :fallen_leaf: top top 🍃 :leaves: 🍄 :mushroom: top Food \u0026 Drink Food Fruit Food Vegetable Food Prepared Food Asian Food Marine Food Sweet Drink Dishware Food Fruit ico shortcode ico shortcode top 🍇 :grapes: 🍈 :melon: top top 🍉 :watermelon: 🍊 :mandarin: :orange: :tangerine: top top 🍋 :lemon: 🍌 :banana: top top 🍍 :pineapple: 🥭 :mango: top top 🍎 :apple: 🍏 :green_apple: top top 🍐 :pear: 🍑 :peach: top top 🍒 :cherries: 🍓 :strawberry: top top 🫐 :blueberries: 🥝 :kiwi_fruit: top top 🍅 :tomato: 🫒 :olive: top top 🥥 :coconut: top Food Vegetable ico shortcode ico shortcode top 🥑 :avocado: 🍆 :eggplant: top top 🥔 :potato: 🥕 :carrot: top top 🌽 :corn: 🌶️ :hot_pepper: top top 🫑 :bell_pepper: 🥒 :cucumber: top top 🥬 :leafy_green: 🥦 :broccoli: top top 🧄 :garlic: 🧅 :onion: top top 🥜 :peanuts: 🌰 :chestnut: top Food Prepared ico shortcode ico shortcode top 🍞 :bread: 🥐 :croissant: top top 🥖 :baguette_bread: 🫓 :flatbread: top top 🥨 :pretzel: 🥯 :bagel: top top 🥞 :pancakes: 🧇 :waffle: top top 🧀 :cheese: 🍖 :meat_on_bone: top top 🍗 :poultry_leg: 🥩 :cut_of_meat: top top 🥓 :bacon: 🍔 :hamburger: top top 🍟 :fries: 🍕 :pizza: top top 🌭 :hotdog: 🥪 :sandwich: top top 🌮 :taco: 🌯 :burrito: top top 🫔 :tamale: 🥙 :stuffed_flatbread: top top 🧆 :falafel: 🥚 :egg: top top 🍳 :fried_egg: 🥘 :shallow_pan_of_food: top top 🍲 :stew: 🫕 :fondue: top top 🥣 :bowl_with_spoon: 🥗 :green_salad: top top 🍿 :popcorn: 🧈 :butter: top top 🧂 :salt: 🥫 :canned_food: top Food Asian ico shortcode ico shortcode top 🍱 :bento: 🍘 :rice_cracker: top top 🍙 :rice_ball: 🍚 :rice: top top 🍛 :curry: 🍜 :ramen: top top 🍝 :spaghetti: 🍠 :sweet_potato: top top 🍢 :oden: 🍣 :sushi: top top 🍤 :fried_shrimp: 🍥 :fish_cake: top top 🥮 :moon_cake: 🍡 :dango: top top 🥟 :dumpling: 🥠 :fortune_cookie: top top 🥡 :takeout_box: top Food Marine ico shortcode ico shortcode top 🦀 :crab: 🦞 :lobster: top top 🦐 :shrimp: 🦑 :squid: top top 🦪 :oyster: top Food Sweet ico shortcode ico shortcode top 🍦 :icecream: 🍧 :shaved_ice: top top 🍨 :ice_cream: 🍩 :doughnut: top top 🍪 :cookie: 🎂 :birthday: top top 🍰 :cake: 🧁 :cupcake: top top 🥧 :pie: 🍫 :chocolate_bar: top top 🍬 :candy: 🍭 :lollipop: top top 🍮 :custard: 🍯 :honey_pot: top Drink ico shortcode ico shortcode top 🍼 :baby_bottle: 🥛 :milk_glass: top top ☕ :coffee: 🫖 :teapot: top top 🍵 :tea: 🍶 :sake: top top 🍾 :champagne: 🍷 :wine_glass: top top 🍸 :cocktail: 🍹 :tropical_drink: top top 🍺 :beer: 🍻 :beers: top top 🥂 :clinking_glasses: 🥃 :tumbler_glass: top top 🥤 :cup_with_straw: 🧋 :bubble_tea: top top 🧃 :beverage_box: 🧉 :mate: top top 🧊 :ice_cube: top Dishware ico shortcode ico shortcode top 🥢 :chopsticks: 🍽️ :plate_with_cutlery: top top 🍴 :fork_and_knife: 🥄 :spoon: top top 🔪 :hocho: :knife: 🏺 :amphora: top Travel \u0026 Places Place Map Place Geographic Place Building Place Religious Place Other Transport Ground Transport Water Transport Air Hotel Time Sky \u0026 Weather Place Map ico shortcode ico shortcode top 🌍 :earth_africa: 🌎 :earth_americas: top top 🌏 :earth_asia: 🌐 :globe_with_meridians: top top 🗺️ :world_map: 🗾 :japan: top top 🧭 :compass: top Place Geographic ico shortcode ico shortcode top 🏔️ :mountain_snow: ⛰️ :mountain: top top 🌋 :volcano: 🗻 :mount_fuji: top top 🏕️ :camping: 🏖️ :beach_umbrella: top top 🏜️ :desert: 🏝️ :desert_island: top top 🏞️ :national_park: top Place Building ico shortcode ico shortcode top 🏟️ :stadium: 🏛️ :classical_building: top top 🏗️ :building_construction: 🧱 :bricks: top top 🪨 :rock: 🪵 :wood: top top 🛖 :hut: 🏘️ :houses: top top 🏚️ :derelict_house: 🏠 :house: top top 🏡 :house_with_garden: 🏢 :office: top top 🏣 :post_office: 🏤 :european_post_office: top top 🏥 :hospital: 🏦 :bank: top top 🏨 :hotel: 🏩 :love_hotel: top top 🏪 :convenience_store: 🏫 :school: top top 🏬 :department_store: 🏭 :factory: top top 🏯 :japanese_castle: 🏰 :european_castle: top top 💒 :wedding: 🗼 :tokyo_tower: top top 🗽 :statue_of_liberty: top Place Religious ico shortcode ico shortcode top ⛪ :church: 🕌 :mosque: top top 🛕 :hindu_temple: 🕍 :synagogue: top top ⛩️ :shinto_shrine: 🕋 :kaaba: top Place Other ico shortcode ico shortcode top ⛲ :fountain: ⛺ :tent: top top 🌁 :foggy: 🌃 :night_with_stars: top top 🏙️ :cityscape: 🌄 :sunrise_over_mountains: top top 🌅 :sunrise: 🌆 :city_sunset: top top 🌇 :city_sunrise: 🌉 :bridge_at_night: top top ♨️ :hotsprings: 🎠 :carousel_horse: top top 🎡 :ferris_wheel: 🎢 :roller_coaster: top top 💈 :barber: 🎪 :circus_tent: top Transport Ground ico shortcode ico shortcode top 🚂 :steam_locomotive: 🚃 :railway_car: top top 🚄 :bullettrain_side: 🚅 :bullettrain_front: top top 🚆 :train2: 🚇 :metro: top top 🚈 :light_rail: 🚉 :station: top top 🚊 :tram: 🚝 :monorail: top top 🚞 :mountain_railway: 🚋 :train: top top 🚌 :bus: 🚍 :oncoming_bus: top top 🚎 :trolleybus: 🚐 :minibus: top top 🚑 :ambulance: 🚒 :fire_engine: top top 🚓 :police_car: 🚔 :oncoming_police_car: top top 🚕 :taxi: 🚖 :oncoming_taxi: top top 🚗 :car: :red_car: 🚘 :oncoming_automobile: top top 🚙 :blue_car: 🛻 :pickup_truck: top top 🚚 :truck: 🚛 :articulated_lorry: top top 🚜 :tractor: 🏎️ :racing_car: top top 🏍️ :motorcycle: 🛵 :motor_scooter: top top 🦽 :manual_wheelchair: 🦼 :motorized_wheelchair: top top 🛺 :auto_rickshaw: 🚲 :bike: top top 🛴 :kick_scooter: 🛹 :skateboard: top top 🛼 :roller_skate: 🚏 :busstop: top top 🛣️ :motorway: 🛤️ :railway_track: top top 🛢️ :oil_drum: ⛽ :fuelpump: top top 🚨 :rotating_light: 🚥 :traffic_light: top top 🚦 :vertical_traffic_light: 🛑 :stop_sign: top top 🚧 :construction: top Transport Water ico shortcode ico shortcode top ⚓ :anchor: ⛵ :boat: :sailboat: top top 🛶 :canoe: 🚤 :speedboat: top top 🛳️ :passenger_ship: ⛴️ :ferry: top top 🛥️ :motor_boat: 🚢 :ship: top Transport Air ico shortcode ico shortcode top ✈️ :airplane: 🛩️ :small_airplane: top top 🛫 :flight_departure: 🛬 :flight_arrival: top top 🪂 :parachute: 💺 :seat: top top 🚁 :helicopter: 🚟 :suspension_railway: top top 🚠 :mountain_cableway: 🚡 :aerial_tramway: top top 🛰️ :artificial_satellite: 🚀 :rocket: top top 🛸 :flying_saucer: top Hotel ico shortcode ico shortcode top 🛎️ :bellhop_bell: 🧳 :luggage: top Time ico shortcode ico shortcode top ⌛ :hourglass: ⏳ :hourglass_flowing_sand: top top ⌚ :watch: ⏰ :alarm_clock: top top ⏱️ :stopwatch: ⏲️ :timer_clock: top top 🕰️ :mantelpiece_clock: 🕛 :clock12: top top 🕧 :clock1230: 🕐 :clock1: top top 🕜 :clock130: 🕑 :clock2: top top 🕝 :clock230: 🕒 :clock3: top top 🕞 :clock330: 🕓 :clock4: top top 🕟 :clock430: 🕔 :clock5: top top 🕠 :clock530: 🕕 :clock6: top top 🕡 :clock630: 🕖 :clock7: top top 🕢 :clock730: 🕗 :clock8: top top 🕣 :clock830: 🕘 :clock9: top top 🕤 :clock930: 🕙 :clock10: top top 🕥 :clock1030: 🕚 :clock11: top top 🕦 :clock1130: top Sky \u0026 Weather ico shortcode ico shortcode top 🌑 :new_moon: 🌒 :waxing_crescent_moon: top top 🌓 :first_quarter_moon: 🌔 :moon: :waxing_gibbous_moon: top top 🌕 :full_moon: 🌖 :waning_gibbous_moon: top top 🌗 :last_quarter_moon: 🌘 :waning_crescent_moon: top top 🌙 :crescent_moon: 🌚 :new_moon_with_face: top top 🌛 :first_quarter_moon_with_face: 🌜 :last_quarter_moon_with_face: top top 🌡️ :thermometer: ☀️ :sunny: top top 🌝 :full_moon_with_face: 🌞 :sun_with_face: top top 🪐 :ringed_planet: ⭐ :star: top top 🌟 :star2: 🌠 :stars: top top 🌌 :milky_way: ☁️ :cloud: top top ⛅ :partly_sunny: ⛈️ :cloud_with_lightning_and_rain: top top 🌤️ :sun_behind_small_cloud: 🌥️ :sun_behind_large_cloud: top top 🌦️ :sun_behind_rain_cloud: 🌧️ :cloud_with_rain: top top 🌨️ :cloud_with_snow: 🌩️ :cloud_with_lightning: top top 🌪️ :tornado: 🌫️ :fog: top top 🌬️ :wind_face: 🌀 :cyclone: top top 🌈 :rainbow: 🌂 :closed_umbrella: top top ☂️ :open_umbrella: ☔ :umbrella: top top ⛱️ :parasol_on_ground: ⚡ :zap: top top ❄️ :snowflake: ☃️ :snowman_with_snow: top top ⛄ :snowman: ☄️ :comet: top top 🔥 :fire: 💧 :droplet: top top 🌊 :ocean: top Activities Event Award Medal Sport Game Arts \u0026 Crafts Event ico shortcode ico shortcode top 🎃 :jack_o_lantern: 🎄 :christmas_tree: top top 🎆 :fireworks: 🎇 :sparkler: top top 🧨 :firecracker: ✨ :sparkles: top top 🎈 :balloon: 🎉 :tada: top top 🎊 :confetti_ball: 🎋 :tanabata_tree: top top 🎍 :bamboo: 🎎 :dolls: top top 🎏 :flags: 🎐 :wind_chime: top top 🎑 :rice_scene: 🧧 :red_envelope: top top 🎀 :ribbon: 🎁 :gift: top top 🎗️ :reminder_ribbon: 🎟️ :tickets: top top 🎫 :ticket: top Award Medal ico shortcode ico shortcode top 🎖️ :medal_military: 🏆 :trophy: top top 🏅 :medal_sports: 🥇 :1st_place_medal: top top 🥈 :2nd_place_medal: 🥉 :3rd_place_medal: top Sport ico shortcode ico shortcode top ⚽ :soccer: ⚾ :baseball: top top 🥎 :softball: 🏀 :basketball: top top 🏐 :volleyball: 🏈 :football: top top 🏉 :rugby_football: 🎾 :tennis: top top 🥏 :flying_disc: 🎳 :bowling: top top 🏏 :cricket_game: 🏑 :field_hockey: top top 🏒 :ice_hockey: 🥍 :lacrosse: top top 🏓 :ping_pong: 🏸 :badminton: top top 🥊 :boxing_glove: 🥋 :martial_arts_uniform: top top 🥅 :goal_net: ⛳ :golf: top top ⛸️ :ice_skate: 🎣 :fishing_pole_and_fish: top top 🤿 :diving_mask: 🎽 :running_shirt_with_sash: top top 🎿 :ski: 🛷 :sled: top top 🥌 :curling_stone: top Game ico shortcode ico shortcode top 🎯 :dart: 🪀 :yo_yo: top top 🪁 :kite: 🔫 :gun: top top 🎱 :8ball: 🔮 :crystal_ball: top top 🪄 :magic_wand: 🎮 :video_game: top top 🕹️ :joystick: 🎰 :slot_machine: top top 🎲 :game_die: 🧩 :jigsaw: top top 🧸 :teddy_bear: 🪅 :pinata: top top 🪆 :nesting_dolls: ♠️ :spades: top top ♥️ :hearts: ♦️ :diamonds: top top ♣️ :clubs: ♟️ :chess_pawn: top top 🃏 :black_joker: 🀄 :mahjong: top top 🎴 :flower_playing_cards: top Arts \u0026 Crafts ico shortcode ico shortcode top 🎭 :performing_arts: 🖼️ :framed_picture: top top 🎨 :art: 🧵 :thread: top top 🪡 :sewing_needle: 🧶 :yarn: top top 🪢 :knot: top Objects Clothing Sound Music Musical Instrument Phone Computer Light \u0026 Video Book Paper Money Mail Writing Office Lock Tool Science Medical Household Other Object Clothing ico shortcode ico shortcode top 👓 :eyeglasses: 🕶️ :dark_sunglasses: top top 🥽 :goggles: 🥼 :lab_coat: top top 🦺 :safety_vest: 👔 :necktie: top top 👕 :shirt: :tshirt: 👖 :jeans: top top 🧣 :scarf: 🧤 :gloves: top top 🧥 :coat: 🧦 :socks: top top 👗 :dress: 👘 :kimono: top top 🥻 :sari: 🩱 :one_piece_swimsuit: top top 🩲 :swim_brief: 🩳 :shorts: top top 👙 :bikini: 👚 :womans_clothes: top top 👛 :purse: 👜 :handbag: top top 👝 :pouch: 🛍️ :shopping: top top 🎒 :school_satchel: 🩴 :thong_sandal: top top 👞 :mans_shoe: :shoe: 👟 :athletic_shoe: top top 🥾 :hiking_boot: 🥿 :flat_shoe: top top 👠 :high_heel: 👡 :sandal: top top 🩰 :ballet_shoes: 👢 :boot: top top 👑 :crown: 👒 :womans_hat: top top 🎩 :tophat: 🎓 :mortar_board: top top 🧢 :billed_cap: 🪖 :military_helmet: top top ⛑️ :rescue_worker_helmet: 📿 :prayer_beads: top top 💄 :lipstick: 💍 :ring: top top 💎 :gem: top Sound ico shortcode ico shortcode top 🔇 :mute: 🔈 :speaker: top top 🔉 :sound: 🔊 :loud_sound: top top 📢 :loudspeaker: 📣 :mega: top top 📯 :postal_horn: 🔔 :bell: top top 🔕 :no_bell: top Music ico shortcode ico shortcode top 🎼 :musical_score: 🎵 :musical_note: top top 🎶 :notes: 🎙️ :studio_microphone: top top 🎚️ :level_slider: 🎛️ :control_knobs: top top 🎤 :microphone: 🎧 :headphones: top top 📻 :radio: top Musical Instrument ico shortcode ico shortcode top 🎷 :saxophone: 🪗 :accordion: top top 🎸 :guitar: 🎹 :musical_keyboard: top top 🎺 :trumpet: 🎻 :violin: top top 🪕 :banjo: 🥁 :drum: top top 🪘 :long_drum: top Phone ico shortcode ico shortcode top 📱 :iphone: 📲 :calling: top top ☎️ :phone: :telephone: 📞 :telephone_receiver: top top 📟 :pager: 📠 :fax: top Computer ico shortcode ico shortcode top 🔋 :battery: 🔌 :electric_plug: top top 💻 :computer: 🖥️ :desktop_computer: top top 🖨️ :printer: ⌨️ :keyboard: top top 🖱️ :computer_mouse: 🖲️ :trackball: top top 💽 :minidisc: 💾 :floppy_disk: top top 💿 :cd: 📀 :dvd: top top 🧮 :abacus: top Light \u0026 Video ico shortcode ico shortcode top 🎥 :movie_camera: 🎞️ :film_strip: top top 📽️ :film_projector: 🎬 :clapper: top top 📺 :tv: 📷 :camera: top top 📸 :camera_flash: 📹 :video_camera: top top 📼 :vhs: 🔍 :mag: top top 🔎 :mag_right: 🕯️ :candle: top top 💡 :bulb: 🔦 :flashlight: top top 🏮 :izakaya_lantern: :lantern: 🪔 :diya_lamp: top Book Paper ico shortcode ico shortcode top 📔 :notebook_with_decorative_cover: 📕 :closed_book: top top 📖 :book: :open_book: 📗 :green_book: top top 📘 :blue_book: 📙 :orange_book: top top 📚 :books: 📓 :notebook: top top 📒 :ledger: 📃 :page_with_curl: top top 📜 :scroll: 📄 :page_facing_up: top top 📰 :newspaper: 🗞️ :newspaper_roll: top top 📑 :bookmark_tabs: 🔖 :bookmark: top top 🏷️ :label: top Money ico shortcode ico shortcode top 💰 :moneybag: 🪙 :coin: top top 💴 :yen: 💵 :dollar: top top 💶 :euro: 💷 :pound: top top 💸 :money_with_wings: 💳 :credit_card: top top 🧾 :receipt: 💹 :chart: top Mail ico shortcode ico shortcode top ✉️ :envelope: 📧 :e-mail: :email: top top 📨 :incoming_envelope: 📩 :envelope_with_arrow: top top 📤 :outbox_tray: 📥 :inbox_tray: top top 📦 :package: 📫 :mailbox: top top 📪 :mailbox_closed: 📬 :mailbox_with_mail: top top 📭 :mailbox_with_no_mail: 📮 :postbox: top top 🗳️ :ballot_box: top Writing ico shortcode ico shortcode top ✏️ :pencil2: ✒️ :black_nib: top top 🖋️ :fountain_pen: 🖊️ :pen: top top 🖌️ :paintbrush: 🖍️ :crayon: top top 📝 :memo: :pencil: top Office ico shortcode ico shortcode top 💼 :briefcase: 📁 :file_folder: top top 📂 :open_file_folder: 🗂️ :card_index_dividers: top top 📅 :date: 📆 :calendar: top top 🗒️ :spiral_notepad: 🗓️ :spiral_calendar: top top 📇 :card_index: 📈 :chart_with_upwards_trend: top top 📉 :chart_with_downwards_trend: 📊 :bar_chart: top top 📋 :clipboard: 📌 :pushpin: top top 📍 :round_pushpin: 📎 :paperclip: top top 🖇️ :paperclips: 📏 :straight_ruler: top top 📐 :triangular_ruler: ✂️ :scissors: top top 🗃️ :card_file_box: 🗄️ :file_cabinet: top top 🗑️ :wastebasket: top Lock ico shortcode ico shortcode top 🔒 :lock: 🔓 :unlock: top top 🔏 :lock_with_ink_pen: 🔐 :closed_lock_with_key: top top 🔑 :key: 🗝️ :old_key: top Tool ico shortcode ico shortcode top 🔨 :hammer: 🪓 :axe: top top ⛏️ :pick: ⚒️ :hammer_and_pick: top top 🛠️ :hammer_and_wrench: 🗡️ :dagger: top top ⚔️ :crossed_swords: 💣 :bomb: top top 🪃 :boomerang: 🏹 :bow_and_arrow: top top 🛡️ :shield: 🪚 :carpentry_saw: top top 🔧 :wrench: 🪛 :screwdriver: top top 🔩 :nut_and_bolt: ⚙️ :gear: top top 🗜️ :clamp: ⚖️ :balance_scale: top top 🦯 :probing_cane: 🔗 :link: top top ⛓️ :chains: 🪝 :hook: top top 🧰 :toolbox: 🧲 :magnet: top top 🪜 :ladder: top Science ico shortcode ico shortcode top ⚗️ :alembic: 🧪 :test_tube: top top 🧫 :petri_dish: 🧬 :dna: top top 🔬 :microscope: 🔭 :telescope: top top 📡 :satellite: top Medical ico shortcode ico shortcode top 💉 :syringe: 🩸 :drop_of_blood: top top 💊 :pill: 🩹 :adhesive_bandage: top top 🩺 :stethoscope: top Household ico shortcode ico shortcode top 🚪 :door: 🛗 :elevator: top top 🪞 :mirror: 🪟 :window: top top 🛏️ :bed: 🛋️ :couch_and_lamp: top top 🪑 :chair: 🚽 :toilet: top top 🪠 :plunger: 🚿 :shower: top top 🛁 :bathtub: 🪤 :mouse_trap: top top 🪒 :razor: 🧴 :lotion_bottle: top top 🧷 :safety_pin: 🧹 :broom: top top 🧺 :basket: 🧻 :roll_of_paper: top top 🪣 :bucket: 🧼 :soap: top top 🪥 :toothbrush: 🧽 :sponge: top top 🧯 :fire_extinguisher: 🛒 :shopping_cart: top Other Object ico shortcode ico shortcode top 🚬 :smoking: ⚰️ :coffin: top top 🪦 :headstone: ⚱️ :funeral_urn: top top 🧿 :nazar_amulet: 🗿 :moyai: top top 🪧 :placard: top Symbols Transport Sign Warning Arrow Religion Zodiac Av Symbol Gender Math Punctuation Currency Other Symbol Keycap Alphanum Geometric Transport Sign ico shortcode ico shortcode top 🏧 :atm: 🚮 :put_litter_in_its_place: top top 🚰 :potable_water: ♿ :wheelchair: top top 🚹 :mens: 🚺 :womens: top top 🚻 :restroom: 🚼 :baby_symbol: top top 🚾 :wc: 🛂 :passport_control: top top 🛃 :customs: 🛄 :baggage_claim: top top 🛅 :left_luggage: top Warning ico shortcode ico shortcode top ⚠️ :warning: 🚸 :children_crossing: top top ⛔ :no_entry: 🚫 :no_entry_sign: top top 🚳 :no_bicycles: 🚭 :no_smoking: top top 🚯 :do_not_litter: 🚱 :non-potable_water: top top 🚷 :no_pedestrians: 📵 :no_mobile_phones: top top 🔞 :underage: ☢️ :radioactive: top top ☣️ :biohazard: top Arrow ico shortcode ico shortcode top ⬆️ :arrow_up: ↗️ :arrow_upper_right: top top ➡️ :arrow_right: ↘️ :arrow_lower_right: top top ⬇️ :arrow_down: ↙️ :arrow_lower_left: top top ⬅️ :arrow_left: ↖️ :arrow_upper_left: top top ↕️ :arrow_up_down: ↔️ :left_right_arrow: top top ↩️ :leftwards_arrow_with_hook: ↪️ :arrow_right_hook: top top ⤴️ :arrow_heading_up: ⤵️ :arrow_heading_down: top top 🔃 :arrows_clockwise: 🔄 :arrows_counterclockwise: top top 🔙 :back: 🔚 :end: top top 🔛 :on: 🔜 :soon: top top 🔝 :top: top Religion ico shortcode ico shortcode top 🛐 :place_of_worship: ⚛️ :atom_symbol: top top 🕉️ :om: ✡️ :star_of_david: top top ☸️ :wheel_of_dharma: ☯️ :yin_yang: top top ✝️ :latin_cross: ☦️ :orthodox_cross: top top ☪️ :star_and_crescent: ☮️ :peace_symbol: top top 🕎 :menorah: 🔯 :six_pointed_star: top Zodiac ico shortcode ico shortcode top ♈ :aries: ♉ :taurus: top top ♊ :gemini: ♋ :cancer: top top ♌ :leo: ♍ :virgo: top top ♎ :libra: ♏ :scorpius: top top ♐ :sagittarius: ♑ :capricorn: top top ♒ :aquarius: ♓ :pisces: top top ⛎ :ophiuchus: top Av Symbol ico shortcode ico shortcode top 🔀 :twisted_rightwards_arrows: 🔁 :repeat: top top 🔂 :repeat_one: ▶️ :arrow_forward: top top ⏩ :fast_forward: ⏭️ :next_track_button: top top ⏯️ :play_or_pause_button: ◀️ :arrow_backward: top top ⏪ :rewind: ⏮️ :previous_track_button: top top 🔼 :arrow_up_small: ⏫ :arrow_double_up: top top 🔽 :arrow_down_small: ⏬ :arrow_double_down: top top ⏸️ :pause_button: ⏹️ :stop_button: top top ⏺️ :record_button: ⏏️ :eject_button: top top 🎦 :cinema: 🔅 :low_brightness: top top 🔆 :high_brightness: 📶 :signal_strength: top top 📳 :vibration_mode: 📴 :mobile_phone_off: top Gender ico shortcode ico shortcode top ♀️ :female_sign: ♂️ :male_sign: top top ⚧️ :transgender_symbol: top Math ico shortcode ico shortcode top ✖️ :heavy_multiplication_x: ➕ :heavy_plus_sign: top top ➖ :heavy_minus_sign: ➗ :heavy_division_sign: top top ♾️ :infinity: top Punctuation ico shortcode ico shortcode top ‼️ :bangbang: ⁉️ :interrobang: top top ❓ :question: ❔ :grey_question: top top ❕ :grey_exclamation: ❗ :exclamation: :heavy_exclamation_mark: top top 〰️ :wavy_dash: top Currency ico shortcode ico shortcode top 💱 :currency_exchange: 💲 :heavy_dollar_sign: top Other Symbol ico shortcode ico shortcode top ⚕️ :medical_symbol: ♻️ :recycle: top top ⚜️ :fleur_de_lis: 🔱 :trident: top top 📛 :name_badge: 🔰 :beginner: top top ⭕ :o: ✅ :white_check_mark: top top ☑️ :ballot_box_with_check: ✔️ :heavy_check_mark: top top ❌ :x: ❎ :negative_squared_cross_mark: top top ➰ :curly_loop: ➿ :loop: top top 〽️ :part_alternation_mark: ✳️ :eight_spoked_asterisk: top top ✴️ :eight_pointed_black_star: ❇️ :sparkle: top top ©️ :copyright: ®️ :registered: top top ™️ :tm: top Keycap ico shortcode ico shortcode top #️⃣ :hash: *️⃣ :asterisk: top top 0️⃣ :zero: 1️⃣ :one: top top 2️⃣ :two: 3️⃣ :three: top top 4️⃣ :four: 5️⃣ :five: top top 6️⃣ :six: 7️⃣ :seven: top top 8️⃣ :eight: 9️⃣ :nine: top top 🔟 :keycap_ten: top Alphanum ico shortcode ico shortcode top 🔠 :capital_abcd: 🔡 :abcd: top top 🔢 :1234: 🔣 :symbols: top top 🔤 :abc: 🅰️ :a: top top 🆎 :ab: 🅱️ :b: top top 🆑 :cl: 🆒 :cool: top top 🆓 :free: ℹ️ :information_source: top top 🆔 :id: Ⓜ️ :m: top top 🆕 :new: 🆖 :ng: top top 🅾️ :o2: 🆗 :ok: top top 🅿️ :parking: 🆘 :sos: top top 🆙 :up: 🆚 :vs: top top 🈁 :koko: 🈂️ :sa: top top 🈷️ :u6708: 🈶 :u6709: top top 🈯 :u6307: 🉐 :ideograph_advantage: top top 🈹 :u5272: 🈚 :u7121: top top 🈲 :u7981: 🉑 :accept: top top 🈸 :u7533: 🈴 :u5408: top top 🈳 :u7a7a: ㊗️ :congratulations: top top ㊙️ :secret: 🈺 :u55b6: top top 🈵 :u6e80: top Geometric ico shortcode ico shortcode top 🔴 :red_circle: 🟠 :orange_circle: top top 🟡 :yellow_circle: 🟢 :green_circle: top top 🔵 :large_blue_circle: 🟣 :purple_circle: top top 🟤 :brown_circle: ⚫ :black_circle: top top ⚪ :white_circle: 🟥 :red_square: top top 🟧 :orange_square: 🟨 :yellow_square: top top 🟩 :green_square: 🟦 :blue_square: top top 🟪 :purple_square: 🟫 :brown_square: top top ⬛ :black_large_square: ⬜ :white_large_square: top top ◼️ :black_medium_square: ◻️ :white_medium_square: top top ◾ :black_medium_small_square: ◽ :white_medium_small_square: top top ▪️ :black_small_square: ▫️ :white_small_square: top top 🔶 :large_orange_diamond: 🔷 :large_blue_diamond: top top 🔸 :small_orange_diamond: 🔹 :small_blue_diamond: top top 🔺 :small_red_triangle: 🔻 :small_red_triangle_down: top top 💠 :diamond_shape_with_a_dot_inside: 🔘 :radio_button: top top 🔳 :white_square_button: 🔲 :black_square_button: top Flags Flag Country Flag Subdivision Flag Flag ico shortcode ico shortcode top 🏁 :checkered_flag: 🚩 :triangular_flag_on_post: top top 🎌 :crossed_flags: 🏴 :black_flag: top top 🏳️ :white_flag: 🏳️‍🌈 :rainbow_flag: top top 🏳️‍⚧️ :transgender_flag: 🏴‍☠️ :pirate_flag: top Country Flag ico shortcode ico shortcode top 🇦🇨 :ascension_island: 🇦🇩 :andorra: top top 🇦🇪 :united_arab_emirates: 🇦🇫 :afghanistan: top top 🇦🇬 :antigua_barbuda: 🇦🇮 :anguilla: top top 🇦🇱 :albania: 🇦🇲 :armenia: top top 🇦🇴 :angola: 🇦🇶 :antarctica: top top 🇦🇷 :argentina: 🇦🇸 :american_samoa: top top 🇦🇹 :austria: 🇦🇺 :australia: top top 🇦🇼 :aruba: 🇦🇽 :aland_islands: top top 🇦🇿 :azerbaijan: 🇧🇦 :bosnia_herzegovina: top top 🇧🇧 :barbados: 🇧🇩 :bangladesh: top top 🇧🇪 :belgium: 🇧🇫 :burkina_faso: top top 🇧🇬 :bulgaria: 🇧🇭 :bahrain: top top 🇧🇮 :burundi: 🇧🇯 :benin: top top 🇧🇱 :st_barthelemy: 🇧🇲 :bermuda: top top 🇧🇳 :brunei: 🇧🇴 :bolivia: top top 🇧🇶 :caribbean_netherlands: 🇧🇷 :brazil: top top 🇧🇸 :bahamas: 🇧🇹 :bhutan: top top 🇧🇻 :bouvet_island: 🇧🇼 :botswana: top top 🇧🇾 :belarus: 🇧🇿 :belize: top top 🇨🇦 :canada: 🇨🇨 :cocos_islands: top top 🇨🇩 :congo_kinshasa: 🇨🇫 :central_african_republic: top top 🇨🇬 :congo_brazzaville: 🇨🇭 :switzerland: top top 🇨🇮 :cote_divoire: 🇨🇰 :cook_islands: top top 🇨🇱 :chile: 🇨🇲 :cameroon: top top 🇨🇳 :cn: 🇨🇴 :colombia: top top 🇨🇵 :clipperton_island: 🇨🇷 :costa_rica: top top 🇨🇺 :cuba: 🇨🇻 :cape_verde: top top 🇨🇼 :curacao: 🇨🇽 :christmas_island: top top 🇨🇾 :cyprus: 🇨🇿 :czech_republic: top top 🇩🇪 :de: 🇩🇬 :diego_garcia: top top 🇩🇯 :djibouti: 🇩🇰 :denmark: top top 🇩🇲 :dominica: 🇩🇴 :dominican_republic: top top 🇩🇿 :algeria: 🇪🇦 :ceuta_melilla: top top 🇪🇨 :ecuador: 🇪🇪 :estonia: top top 🇪🇬 :egypt: 🇪🇭 :western_sahara: top top 🇪🇷 :eritrea: 🇪🇸 :es: top top 🇪🇹 :ethiopia: 🇪🇺 :eu: :european_union: top top 🇫🇮 :finland: 🇫🇯 :fiji: top top 🇫🇰 :falkland_islands: 🇫🇲 :micronesia: top top 🇫🇴 :faroe_islands: 🇫🇷 :fr: top top 🇬🇦 :gabon: 🇬🇧 :gb: :uk: top top 🇬🇩 :grenada: 🇬🇪 :georgia: top top 🇬🇫 :french_guiana: 🇬🇬 :guernsey: top top 🇬🇭 :ghana: 🇬🇮 :gibraltar: top top 🇬🇱 :greenland: 🇬🇲 :gambia: top top 🇬🇳 :guinea: 🇬🇵 :guadeloupe: top top 🇬🇶 :equatorial_guinea: 🇬🇷 :greece: top top 🇬🇸 :south_georgia_south_sandwich_islands: 🇬🇹 :guatemala: top top 🇬🇺 :guam: 🇬🇼 :guinea_bissau: top top 🇬🇾 :guyana: 🇭🇰 :hong_kong: top top 🇭🇲 :heard_mcdonald_islands: 🇭🇳 :honduras: top top 🇭🇷 :croatia: 🇭🇹 :haiti: top top 🇭🇺 :hungary: 🇮🇨 :canary_islands: top top 🇮🇩 :indonesia: 🇮🇪 :ireland: top top 🇮🇱 :israel: 🇮🇲 :isle_of_man: top top 🇮🇳 :india: 🇮🇴 :british_indian_ocean_territory: top top 🇮🇶 :iraq: 🇮🇷 :iran: top top 🇮🇸 :iceland: 🇮🇹 :it: top top 🇯🇪 :jersey: 🇯🇲 :jamaica: top top 🇯🇴 :jordan: 🇯🇵 :jp: top top 🇰🇪 :kenya: 🇰🇬 :kyrgyzstan: top top 🇰🇭 :cambodia: 🇰🇮 :kiribati: top top 🇰🇲 :comoros: 🇰🇳 :st_kitts_nevis: top top 🇰🇵 :north_korea: 🇰🇷 :kr: top top 🇰🇼 :kuwait: 🇰🇾 :cayman_islands: top top 🇰🇿 :kazakhstan: 🇱🇦 :laos: top top 🇱🇧 :lebanon: 🇱🇨 :st_lucia: top top 🇱🇮 :liechtenstein: 🇱🇰 :sri_lanka: top top 🇱🇷 :liberia: 🇱🇸 :lesotho: top top 🇱🇹 :lithuania: 🇱🇺 :luxembourg: top top 🇱🇻 :latvia: 🇱🇾 :libya: top top 🇲🇦 :morocco: 🇲🇨 :monaco: top top 🇲🇩 :moldova: 🇲🇪 :montenegro: top top 🇲🇫 :st_martin: 🇲🇬 :madagascar: top top 🇲🇭 :marshall_islands: 🇲🇰 :macedonia: top top 🇲🇱 :mali: 🇲🇲 :myanmar: top top 🇲🇳 :mongolia: 🇲🇴 :macau: top top 🇲🇵 :northern_mariana_islands: 🇲🇶 :martinique: top top 🇲🇷 :mauritania: 🇲🇸 :montserrat: top top 🇲🇹 :malta: 🇲🇺 :mauritius: top top 🇲🇻 :maldives: 🇲🇼 :malawi: top top 🇲🇽 :mexico: 🇲🇾 :malaysia: top top 🇲🇿 :mozambique: 🇳🇦 :namibia: top top 🇳🇨 :new_caledonia: 🇳🇪 :niger: top top 🇳🇫 :norfolk_island: 🇳🇬 :nigeria: top top 🇳🇮 :nicaragua: 🇳🇱 :netherlands: top top 🇳🇴 :norway: 🇳🇵 :nepal: top top 🇳🇷 :nauru: 🇳🇺 :niue: top top 🇳🇿 :new_zealand: 🇴🇲 :oman: top top 🇵🇦 :panama: 🇵🇪 :peru: top top 🇵🇫 :french_polynesia: 🇵🇬 :papua_new_guinea: top top 🇵🇭 :philippines: 🇵🇰 :pakistan: top top 🇵🇱 :poland: 🇵🇲 :st_pierre_miquelon: top top 🇵🇳 :pitcairn_islands: 🇵🇷 :puerto_rico: top top 🇵🇸 :palestinian_territories: 🇵🇹 :portugal: top top 🇵🇼 :palau: 🇵🇾 :paraguay: top top 🇶🇦 :qatar: 🇷🇪 :reunion: top top 🇷🇴 :romania: 🇷🇸 :serbia: top top 🇷🇺 :ru: 🇷🇼 :rwanda: top top 🇸🇦 :saudi_arabia: 🇸🇧 :solomon_islands: top top 🇸🇨 :seychelles: 🇸🇩 :sudan: top top 🇸🇪 :sweden: 🇸🇬 :singapore: top top 🇸🇭 :st_helena: 🇸🇮 :slovenia: top top 🇸🇯 :svalbard_jan_mayen: 🇸🇰 :slovakia: top top 🇸🇱 :sierra_leone: 🇸🇲 :san_marino: top top 🇸🇳 :senegal: 🇸🇴 :somalia: top top 🇸🇷 :suriname: 🇸🇸 :south_sudan: top top 🇸🇹 :sao_tome_principe: 🇸🇻 :el_salvador: top top 🇸🇽 :sint_maarten: 🇸🇾 :syria: top top 🇸🇿 :swaziland: 🇹🇦 :tristan_da_cunha: top top 🇹🇨 :turks_caicos_islands: 🇹🇩 :chad: top top 🇹🇫 :french_southern_territories: 🇹🇬 :togo: top top 🇹🇭 :thailand: 🇹🇯 :tajikistan: top top 🇹🇰 :tokelau: 🇹🇱 :timor_leste: top top 🇹🇲 :turkmenistan: 🇹🇳 :tunisia: top top 🇹🇴 :tonga: 🇹🇷 :tr: top top 🇹🇹 :trinidad_tobago: 🇹🇻 :tuvalu: top top 🇹🇼 :taiwan: 🇹🇿 :tanzania: top top 🇺🇦 :ukraine: 🇺🇬 :uganda: top top 🇺🇲 :us_outlying_islands: 🇺🇳 :united_nations: top top 🇺🇸 :us: 🇺🇾 :uruguay: top top 🇺🇿 :uzbekistan: 🇻🇦 :vatican_city: top top 🇻🇨 :st_vincent_grenadines: 🇻🇪 :venezuela: top top 🇻🇬 :british_virgin_islands: 🇻🇮 :us_virgin_islands: top top 🇻🇳 :vietnam: 🇻🇺 :vanuatu: top top 🇼🇫 :wallis_futuna: 🇼🇸 :samoa: top top 🇽🇰 :kosovo: 🇾🇪 :yemen: top top 🇾🇹 :mayotte: 🇿🇦 :south_africa: top top 🇿🇲 :zambia: 🇿🇼 :zimbabwe: top Subdivision Flag ico shortcode ico shortcode top 🏴󠁧󠁢󠁥󠁮󠁧󠁿 :england: 🏴󠁧󠁢󠁳󠁣󠁴󠁿 :scotland: top top 🏴󠁧󠁢󠁷󠁬󠁳󠁿 :wales: top GitHub Custom Emoji ico shortcode ico shortcode top :accessibility: :accessibility: :atom: :atom: top top :basecamp: :basecamp: :basecampy: :basecampy: top top :bowtie: :bowtie: :dependabot: :dependabot: top top :electron: :electron: :feelsgood: :feelsgood: top top :finnadie: :finnadie: :fishsticks: :fishsticks: top top :goberserk: :goberserk: :godmode: :godmode: top top :hurtrealbad: :hurtrealbad: :neckbeard: :neckbeard: top top :octocat: :octocat: :rage1: :rage1: top top :rage2: :rage2: :rage3: :rage3: top top :rage4: :rage4: :shipit: :shipit: top top :suspect: :suspect: :trollface: :trollface: top "},{"date":"0001-01-01","uri":"/variables/file/","title":"File variables","content":"\rWe are making an effort to unify our terminology, and to use these terms consistently throughout the documentation.\nHistorically, we have inconsistently referred to the items on this page as functions, parameters, variables, or methods. They are not functions, parameters, or variables; they are methods.\nThis page will remain in place as readers become familiar with the unified terminology. See the methods section for a list of methods by object, or the methods quick reference guide.\nTo retrieve file information about any page that is backed by a file, see the documentation for the File method on a Page object.\n"},{"date":"0001-01-01","uri":"/hosting-and-deployment/hugo-deploy/","title":"Hugo Deploy","content":"You can use the “hugo deploy” command to upload your site directly to a Google Cloud Storage (GCS) bucket, an AWS S3 bucket, and/or an Azure Storage container.\nAssumptions You have completed the Quick Start or have a Hugo website you are ready to deploy and share with the world. You have an account with the service provider (Google Cloud, AWS, or Azure) that you want to deploy to. You have authenticated. Google Cloud: Install the CLI and run gcloud auth login. AWS: Install the CLI and run aws configure. Azure: Install the CLI and run az login. NOTE: Each service supports alternatives for authentication, including using environment variables. See here for more details. You have created a bucket to deploy to. If you want your site to be public, be sure to configure the bucket to be publicly readable as a static website. Google Cloud: create a bucket and host a static website Amazon S3: create a bucket and host a static website Microsoft Azure: create a storage container and host a static website Configuring your first deployment In the configuration file for your site, add a [deployment] section and a [[deployment.targets]] subsection. The only required parameters are the name and URL:\n[deployment] [[deployment.targets]] # An arbitrary name for this target. name = \"production\" # URL specifies the Go Cloud Development Kit URL to deploy to. Examples: URL = \"\u003cFILL ME IN\u003e\" # Google Cloud Storage -- see https://gocloud.dev/howto/blob/#gcs #URL = \"gs://\u003cBucket Name\u003e\" # Amazon Web Services S3; see https://gocloud.dev/howto/blob/#s3 # For S3-compatible endpoints, see https://gocloud.dev/howto/blob/#s3-compatible #URL = \"s3://\u003cBucket Name\u003e?region=\u003cAWS region\u003e\" # Microsoft Azure Blob Storage; see https://gocloud.dev/howto/blob/#azure #URL = \"azblob://$web\" Deploy To deploy to a target:\nhugo deploy [--target=\u003ctarget name\u003e] The deploy process recursively walks through your local publish directory (public by default) and syncs it to the destination bucket, to ensure that the local and remote contents match.\nIf you don’t specify a target, Hugo will deploy to the first target in your configuration.\nSee hugo help deploy or the deploy command-line documentation for more command-line options.\nHow the file list works The first thing hugo deploy does is create file lists for local and remote by traversing the local publish directory and remote bucket.\nFor both local and remote, the file list includes and excludes files according to the deployment target’s configuration –\nIf the configuration specifies an include pattern, all files are skipped by default except those matching the pattern. If the configuration specifies an exclude pattern, files matching the pattern are skipped. When creating the local file list, a few additional skips apply: first, Hugo always skips files named .DS_Store.\nSecond, Hugo always skips local hidden directories (directories with names starting with a period, e.g. .git) and does not traverse into them, except for the special hidden directory named .well-known, which is traversed if it exists.\nHow the local and remote file lists are compared In the second step, Hugo compares the two file lists to figure out what changes actually need to be made on the remote. File names are compared first; if the local and remote files both exist then the sizes and md5sums are compared. Any difference means that the file will be (re-)uploaded.\nSpecifying the --force flag will ensure all files are re-uploaded even if Hugo cannot detect any differences between local and remote.\nFiles are deleted from the remote bucket if they are not present in the local file list.\nIf a remote file is excluded from the file list generation using the exclude/include configs, then the comparison step will not know to delete the file – so it will remain on the remote even if it isn’t present locally.\nIf the --confirm or --dryRun flags are given, Hugo displays what differences it has found and either pauses or stops here.\nHow synchronization works Hugo applies the list of changes to the remote storage bucket. Missing and/or changed files are uploaded, and files missing locally but present remotely are deleted. As files are uploaded, their headers are also configured on the remote according to the matchers configuration.\nAs a safety measure to help prevent accidents, if there are more than 256 files to delete, Hugo won’t delete any files from the remote. Use the --maxDeletes command line flag to override this.\nAdvanced configuration Here’s a full example deployment configuration:\n[deployment] # By default, files are uploaded in an arbitrary order. # If you specify an `order` list, files that match regular expressions # in this list will be uploaded first, in the specified order. order = [\".jpg$\", \".gif$\"] [[deployment.targets]] # Define one or more targets, e.g., staging and production. # Each target gets its own [[deployment.targets]] section. # An arbitrary name for this target. name = \"mydeployment\" # The Go Cloud Development Kit URL to deploy to. Examples: URL = \"\u003cFILL ME IN\u003e\" # GCS; see https://gocloud.dev/howto/blob/#gcs #URL = \"gs://\u003cBucket Name\u003e\" # S3; see https://gocloud.dev/howto/blob/#s3 # For S3-compatible endpoints, see https://gocloud.dev/howto/blob/#s3-compatible #URL = \"s3://\u003cBucket Name\u003e?region=\u003cAWS region\u003e\" # Azure Blob Storage; see https://gocloud.dev/howto/blob/#azure #URL = \"azblob://$web\" # You can use a \"prefix=\" query parameter to target a subfolder of the bucket: #URL = \"gs://\u003cBucket Name\u003e?prefix=a/subfolder/\" # If you are using a CloudFront CDN, deploy will invalidate the cache as needed. #cloudFrontDistributionID = \"\u003cFILL ME IN\u003e\" # Include or exclude specific files when deploying to this target: # If exclude is non-empty, and a local or remote file's path matches it, that file is not synced. # If include is non-empty, and a local or remote file's path does not match it, that file is not synced. # Note: local files that don't pass the include/exclude filters are not uploaded to remote, # and remote files that don't pass the include/exclude filters are not deleted. # # The pattern syntax is documented here: https://godoc.org/github.com/gobwas/glob#Glob # Patterns should be written with forward slashes as separator. # #include = \"**.html\" # would only include files with \".html\" suffix #exclude = \"**.{jpg, png}\" # would exclude files with \".jpg\" or \".png\" suffix ####################### [[deployment.matchers]] # Matchers enable special caching, content type and compression behavior for # specified file types. You can include any number of matcher blocks; the first one # matching a given file pattern will be used. # See https://golang.org/pkg/regexp/syntax/ for pattern syntax. # Pattern searching is stopped on first match. pattern = \"\u003cFILL ME IN\u003e\" # If true, Hugo will gzip the file before uploading it to the bucket. # With many storage services, this will save on storage and bandwidth costs # for uncompressed file types. #gzip = false # If true, Hugo always re-uploads this file even if size and md5 match. # This is useful if Hugo isn't reliably able to determine whether to re-upload # the file on its own. #force = false # Content-type header to configure for this file when served. # By default this can be determined from the file extension. #contentType = \"\" # Cache-control header to configure for this file when served. # The default is the empty string. #cacheControl = \"\" # Content-encoding header to configure for this file when served. # By default, if gzip is True, this will be filled with \"gzip\". #contentEncoding = \"\" # Samples: [[deployment.matchers]] # Cache static assets for 1 year. pattern = \"^.+\\\\.(js|css|svg|ttf)$\" cacheControl = \"max-age=31536000, no-transform, public\" gzip = true [[deployment.matchers]] pattern = \"^.+\\\\.(png|jpg)$\" cacheControl = \"max-age=31536000, no-transform, public\" gzip = false [[deployment.matchers]] # Set custom content type for /sitemap.xml pattern = \"^sitemap\\\\.xml$\" contentType = \"application/xml\" gzip = true [[deployment.matchers]] pattern = \"^.+\\\\.(html|xml|json)$\" gzip = true "},{"date":"0001-01-01","uri":"/hugo-pipes/introduction/","title":"Hugo Pipes","content":"Find resources in assets This is about global and remote resources.\nglobal resource A file within the assets directory, or within any directory mounted to the assets directory. remote resource A file on a remote server, accessible via HTTP or HTTPS. For .Page scoped resources, see the page resources section.\nGet a resource In order to process an asset with Hugo Pipes, it must be retrieved as a resource.\nFor global resources, use:\nresources.ByType resources.Get resources.GetMatch resources.Match For remote resources, use:\nresources.GetRemote See the GoDoc Page for the resources package for an up to date overview of all template functions in this namespace.\nCopy a resource See the resources.Copy function.\nAsset directory Asset files must be stored in the asset directory. This is /assets by default, but can be configured via the configuration file’s assetDir key.\nAsset publishing Hugo publishes assets to the publishDir (typically public) when you invoke .Permalink, .RelPermalink, or .Publish. You can use .Content to inline the asset.\nGo Pipes For improved readability, the Hugo Pipes examples of this documentation will be written using Go Pipes:\n{{ $style := resources.Get \"sass/main.scss\" | resources.ToCSS | resources.Minify | resources.Fingerprint }} \u003clink rel=\"stylesheet\" href=\"{{ $style.Permalink }}\"\u003e Caching Hugo Pipes invocations are cached based on the entire pipe chain.\nAn example of a pipe chain is:\n{{ $mainJs := resources.Get \"js/main.js\" | js.Build \"main.js\" | minify | fingerprint }} The pipe chain is only invoked the first time it is encountered in a site build, and results are otherwise loaded from cache. As such, Hugo Pipes can be used in templates which are executed thousands or millions of times without negatively impacting the build performance.\n"},{"date":"0001-01-01","uri":"/installation/macos/","title":"macOS","content":"Editions Hugo is available in two editions: standard and extended. With the extended edition you can:\nEncode to the WebP format when processing images. You can decode WebP images with either edition. Transpile Sass to CSS using the embedded LibSass transpiler. The extended edition is not required to use the Dart Sass transpiler. We recommend that you install the extended edition.\nPrerequisites Although not required in all cases, Git, Go, and Dart Sass are commonly used when working with Hugo.\nGit is required to:\nBuild Hugo from source Use the Hugo Modules feature Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as CloudCannon, Cloudflare Pages, GitHub Pages, GitLab Pages, and Netlify Go is required to:\nBuild Hugo from source Use the Hugo Modules feature Dart Sass is required to transpile Sass to CSS when using the latest features of the Sass language.\nPlease refer to the relevant documentation for installation instructions:\nGit Go Dart Sass Prebuilt binaries Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section.\nDownload the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable.\nIf you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below.\nPackage managers Homebrew Homebrew is a free and open-source package manager for macOS and Linux. To install the extended edition of Hugo:\nbrew install hugo MacPorts MacPorts is a free and open-source package manager for macOS. To install the extended edition of Hugo:\nsudo port install hugo Build from source To build the extended edition of Hugo from source you must:\nInstall Git Install Go version 1.20 or later Install a C compiler, either GCC or Clang Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ($HOME/go or %USERPROFILE%\\go).\nThen build and test:\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest hugo version Comparison Prebuilt binaries Package managers Build from source Easy to install? ✔️ ✔️ ✔️ Easy to upgrade? ✔️ ✔️ ✔️ Easy to downgrade? ✔️ ✔️ 1 ✔️ Automatic updates? ❌ ❌ 2 ❌ Latest version available? ✔️ ✔️ ✔️ Easy if a previous version is still installed. ↩︎\nPossible but requires advanced configuration. ↩︎\n"},{"date":"0001-01-01","uri":"/content-management/organization/","title":"Content organization","content":"Page bundles Hugo 0.32 announced page-relative images and other resources packaged into Page Bundles.\nThese terms are connected, and you also need to read about Page Resources and Image Processing to get the full picture.\nThe illustration shows three bundles. Note that the home page bundle cannot contain other content pages, although other files (images etc.) are allowed.\rThe bundle documentation is a work in progress. We will publish more comprehensive docs about this soon.\nOrganization of content source In Hugo, your content should be organized in a manner that reflects the rendered website.\nWhile Hugo supports content nested at any level, the top levels (i.e. content/\u003cDIRECTORIES\u003e) are special in Hugo and are considered the content type used to determine layouts etc. To read more about sections, including how to nest them, see sections.\nWithout any additional configuration, the following will automatically work:\n. └── content └── about | └── index.md // \u003c- https://example.org/about/ ├── posts | ├── firstpost.md // \u003c- https://example.org/posts/firstpost/ | ├── happy | | └── ness.md // \u003c- https://example.org/posts/happy/ness/ | └── secondpost.md // \u003c- https://example.org/posts/secondpost/ └── quote ├── first.md // \u003c- https://example.org/quote/first/ └── second.md // \u003c- https://example.org/quote/second/ Path breakdown in Hugo The following demonstrates the relationships between your content organization and the output URL structure for your Hugo website when it renders. These examples assume you are using pretty URLs, which is the default behavior for Hugo. The examples also assume a key-value of baseURL = \"https://example.org\" in your site’s configuration file.\nIndex pages: _index.md _index.md has a special role in Hugo. It allows you to add front matter and content to your list templates. These templates include those for section templates, taxonomy templates, taxonomy terms templates, and your homepage template.\nTip: You can get a reference to the content and metadata in _index.md using the .Site.GetPage function.\nYou can create one _index.md for your homepage and one in each of your content sections, taxonomies, and taxonomy terms. The following shows typical placement of an _index.md that would contain content and front matter for a posts section list page on a Hugo website:\n. url . ⊢--^-⊣ . path slug . ⊢--^-⊣⊢---^---⊣ . filepath . ⊢------^------⊣ content/posts/_index.md At build, this will output to the following destination with the associated values:\nurl (\"/posts/\") ⊢-^-⊣ baseurl section (\"posts\") ⊢--------^---------⊣⊢-^-⊣ permalink ⊢----------^-------------⊣ https://example.org/posts/index.html The sections can be nested as deeply as you want. The important thing to understand is that to make the section tree fully navigational, at least the lower-most section must include a content file. (i.e. _index.md).\nSingle pages in sections Single content files in each of your sections will be rendered as single page templates. Here is an example of a single post within posts:\npath (\"posts/my-first-hugo-post.md\") . ⊢-----------^------------⊣ . section slug . ⊢-^-⊣⊢--------^----------⊣ content/posts/my-first-hugo-post.md When Hugo builds your site, the content will be output to the following destination:\nurl (\"/posts/my-first-hugo-post/\") ⊢------------^----------⊣ baseurl section slug ⊢--------^--------⊣⊢-^--⊣⊢-------^---------⊣ permalink ⊢--------------------^---------------------⊣ https://example.org/posts/my-first-hugo-post/index.html Paths explained The following concepts provide more insight into the relationship between your project’s organization and the default Hugo behavior when building output for the website.\nsection A default content type is determined by the section in which a content item is stored. section is determined by the location within the project’s content directory. section cannot be specified or overridden in front matter.\nslug The slug is the last segment of the URL path, defined by the file name and optionally overridden by a slug value in front matter. See URL Management for details.\npath A content’s path is determined by the section’s path to the file. The file path\nis based on the path to the content’s location AND does not include the slug url The url is the entire URL path, defined by the file path and optionally overridden by a url value in front matter. See URL Management for details.\n"},{"date":"0001-01-01","uri":"/getting-started/quick-start/","title":"Quick start","content":"In this tutorial you will:\nCreate a site Add content Configure the site Publish the site Prerequisites Before you begin this tutorial you must:\nInstall Hugo (extended edition, v0.112.0 or later) Install Git You must also be comfortable working from the command line.\nCreate a site Commands If you are a Windows user:\nDo not use the Command Prompt Do not use Windows PowerShell Run these commands from PowerShell or a Linux terminal such as WSL or Git Bash PowerShell and Windows PowerShell are different applications.\nVerify that you have installed Hugo v0.112.0 or later.\nhugo version Run these commands to create a Hugo site with the Ananke theme. The next section provides an explanation of each command.\nhugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \"theme = 'ananke'\" \u003e\u003e hugo.toml hugo server View your site at the URL displayed in your terminal. Press Ctrl + C to stop Hugo’s development server.\nExplanation of commands Create the directory structure for your project in the quickstart directory.\nhugo new site quickstart Change the current directory to the root of your project.\ncd quickstart Initialize an empty Git repository in the current directory.\ngit init Clone the Ananke theme into the themes directory, adding it to your project as a Git submodule.\ngit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke Append a line to the site configuration file, indicating the current theme.\necho \"theme = 'ananke'\" \u003e\u003e hugo.toml Start Hugo’s development server to view the site.\nhugo server Press Ctrl + C to stop Hugo’s development server.\nAdd content Add a new page to your site.\nhugo new content posts/my-first-post.md Hugo created the file in the content/posts directory. Open the file with your editor.\n+++ title = 'My First Post' date = 2024-01-14T07:07:07+01:00 draft = true +++ Notice the draft value in the front matter is true. By default, Hugo does not publish draft content when you build the site. Learn more about draft, future, and expired content.\nAdd some markdown to the body of the post, but do not change the draft value.\n+++ title = 'My First Post' date = 2024-01-14T07:07:07+01:00 draft = true +++ ## Introduction This is **bold** text, and this is *emphasized* text. Visit the [Hugo](https://gohugo.io) website! Save the file, then start Hugo’s development server to view the site. You can run either of the following commands to include draft content.\nhugo server --buildDrafts hugo server -D View your site at the URL displayed in your terminal. Keep the development server running as you continue to add and change content.\nHugo’s rendering engine conforms to the CommonMark specification for markdown. The CommonMark organization provides a useful live testing tool powered by the reference implementation.\nConfigure the site With your editor, open the site configuration file (hugo.toml) in the root of your project.\nbaseURL = 'https://example.org/' languageCode = 'en-us' title = 'My New Hugo Site' theme = 'ananke' Make the following changes:\nSet the baseURL for your production site. This value must begin with the protocol and end with a slash, as shown above.\nSet the languageCode to your language and region.\nSet the title for your production site.\nStart Hugo’s development server to see your changes, remembering to include draft content.\nhugo server -D Most theme authors provide configuration guidelines and options. Make sure to visit your theme’s repository or documentation site for details.\nThe New Dynamic, authors of the Ananke theme, provide documentation for configuration and usage. They also provide a demonstration site.\nPublish the site In this step you will publish your site, but you will not deploy it.\nWhen you publish your site, Hugo creates the entire static site in the public directory in the root of your project. This includes the HTML files, and assets such as images, CSS files, and JavaScript files.\nWhen you publish your site, you typically do not want to include draft, future, or expired content. The command is simple.\nhugo To learn how to deploy your site, see the hosting and deployment section.\nAsk for help Hugo’s forum is an active community of users and developers who answer questions, share knowledge, and provide examples. A quick search of over 20,000 topics will often answer your question. Please be sure to read about requesting help before asking your first question.\nOther resources For other resources to help you learn Hugo, including books and video tutorials, see the external learning resources page.\n"},{"date":"0001-01-01","uri":"/templates/introduction/","title":"Templating","content":"\rThe following is only a primer on Go Templates. For an in-depth look into Go Templates, check the official Go docs.\nGo Templates provide an extremely simple template language that adheres to the belief that only the most basic of logic belongs in the template or view layer.\nBasic syntax Go Templates are HTML files with the addition of variables and functions. Go Template variables and functions are accessible within {{ }}.\nAccess a predefined variable A predefined variable could be a variable already existing in the current scope (like the .Title example in the Variables section below) or a custom variable (like the $address example in that same section).\n{{ .Title }} {{ $address }} Parameters for functions are separated using spaces. The general syntax is:\n{{ FUNCTION ARG1 ARG2 .. }} The following example calls the add function with inputs of 1 and 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation Accessing the Page Parameter bar defined in a piece of content’s front matter.\n{{ .Params.bar }} Parentheses can be used to group items together {{ if or (isset .Params \"alt\") (isset .Params \"caption\") }} Caption {{ end }} A single statement can be split over multiple lines {{ if or (isset .Params \"alt\") (isset .Params \"caption\") }} Raw string literals can include newlines {{ $msg := `Line one. Line two.` }} Variables Each Go Template gets a data object. In Hugo, each template is passed a Page. In the below example, .Title is one of the elements accessible in that Page variable.\nWith the Page being the default scope of a template, the Title element in current scope (. – “the dot”) is accessible simply by the dot-prefix (.Title):\n\u003ctitle\u003e{{ .Title }}\u003c/title\u003e Values can also be stored in custom variables and referenced later:\nThe custom variables need to be prefixed with $.\n{{ $address := \"123 Main St.\" }} {{ $address }} Variables can be re-defined using the = operator. The example below prints “Var is Hugo Home” on the home page, and “Var is Hugo Page” on all other pages:\n{{ $var := \"Hugo Page\" }} {{ if .IsHome }} {{ $var = \"Hugo Home\" }} {{ end }} Var is {{ $var }} Variable names must conform to Go’s naming rules for identifiers.\nFunctions Go Templates only ship with a few basic functions but also provide a mechanism for applications to extend the original set.\nHugo template functions provide additional functionality specific to building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling Hugo.\nExample 1: adding numbers {{ add 1 2 }} \u003c!-- prints 3 --\u003e Example 2: comparing numbers {{ lt 1 2 }} \u003c!-- prints true (i.e., since 1 is less than 2) --\u003e Note that both examples make use of Go Template’s math functions.\nThere are more boolean operators than those listed in the Hugo docs in the Go Template documentation.\nIncludes When including another template, you will need to pass it the data that it would need to access.\nTo pass along the current context, please remember to include a trailing dot.\nThe templates location will always be starting at the layouts/ directory within Hugo.\nPartial The partial function is used to include partial templates using the syntax {{ partial \"\u003cPATH\u003e/\u003cPARTIAL\u003e.\u003cEXTENSION\u003e\" . }}.\nExample of including a layouts/partials/header.html partial:\n{{ partial \"header.html\" . }} Template The template function was used to include partial templates in much older Hugo versions. Now it’s useful only for calling internal templates. The syntax is {{ template\r\"_internal/\u003cTEMPLATE\u003e.\u003cEXTENSION\u003e\" . }}.\nThe available internal templates can be found here.\nExample of including the internal opengraph.html template:\n{{ template \"_internal/opengraph.html\" . }} Logic Go Templates provide the most basic iteration and conditional logic.\nIteration The Go Templates make heavy use of range to iterate over a map, array, or slice. The following are different examples of how to use range.\nExample 1: using context (.) {{ range $array }} {{ . }} \u003c!-- The . represents an element in $array --\u003e {{ end }} Example 2: declaring a variable name for an array element’s value {{ range $elem_val := $array }} {{ $elem_val }} {{ end }} Example 3: declaring variable names for an array element’s index and value For an array or slice, the first declared variable will map to each element’s index.\n{{ range $elem_index, $elem_val := $array }} {{ $elem_index }} -- {{ $elem_val }} {{ end }} Example 4: declaring variable names for a map element’s key and value For a map, the first declared variable will map to each map element’s key.\n{{ range $elem_key, $elem_val := $map }} {{ $elem_key }} -- {{ $elem_val }} {{ end }} Example 5: conditional on empty map, array, or slice If the map, array, or slice passed into the range is zero-length then the else statement is evaluated.\n{{ range $array }} {{ . }} {{ else }} \u003c!-- This is only evaluated if $array is empty --\u003e {{ end }} Conditionals if, else, with, or, and and not provide the framework for handling conditional logic in Go Templates. Like range, if and with statements are closed with an {{ end }}.\nGo Templates treat the following values as false:\nfalse (boolean) 0 (integer) any zero-length array, slice, map, or string Example 1: with It is common to write “if something exists, do this” kind of statements using with.\nwith rebinds the context . within its scope (just like in range).\nIt skips the block if the variable is absent, or if it evaluates to “false” as explained above.\n{{ with .Params.title }} \u003ch4\u003e{{ . }}\u003c/h4\u003e {{ end }} Example 2: with .. else Below snippet uses the “description” front-matter parameter’s value if set, else uses the default .Summary Page variable:\n{{ with .Param \"description\" }} {{ . }} {{ else }} {{ .Summary }} {{ end }} See the .Param function.\nExample 3: if An alternative (and a more verbose) way of writing with is using if. Here, the . does not get rebound.\nBelow example is “Example 1” rewritten using if:\n{{ if isset .Params \"title\" }} \u003ch4\u003e{{ index .Params \"title\" }}\u003c/h4\u003e {{ end }} Example 4: if .. else Below example is “Example 2” rewritten using if .. else, and using isset + .Params variable (different from the .Param function) instead:\n{{ if (isset .Params \"description\") }} {{ index .Params \"description\" }} {{ else }} {{ .Summary }} {{ end }} Example 5: if .. else if .. else Unlike with, if can contain else if clauses too.\n{{ if (isset .Params \"description\") }} {{ index .Params \"description\" }} {{ else if (isset .Params \"summary\") }} {{ index .Params \"summary\" }} {{ else }} {{ .Summary }} {{ end }} Example 6: and \u0026 or {{ if (and (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\")) }} Pipes One of the most powerful components of Go Templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from Unix pipes, the concept is simple: each pipeline’s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go Templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they can only work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1: shuffle The following two examples are functionally the same:\n{{ shuffle (seq 1 5) }} {{ (seq 1 5) | shuffle }} Example 2: index The following accesses the page parameter called “disqus_url” and escapes the HTML. This example also uses the index function, which is built into Go Templates:\n{{ index .Params \"disqus_url\" | html }} Example 3: or with isset {{ if or (or (isset .Params \"title\") (isset .Params \"caption\")) (isset .Params \"attr\") }} Stuff Here {{ end }} Could be rewritten as\n{{ if isset .Params \"caption\" | or isset .Params \"title\" | or isset .Params \"attr\" }} Stuff Here {{ end }} Context (aka “the dot”) The most easily overlooked concept to understand about Go Templates is that {{ . }} always refers to the current context.\nIn the top level of your template, this will be the data set made available to it. Inside an iteration, however, it will have the value of the current item in the loop; i.e., {{ . }} will no longer refer to the data available to the entire page. If you need to access page-level data (e.g., page parameters set in front matter) from within the loop, you will likely want to do one of the following:\n1. Define a variable independent of context The following shows how to define a variable independent of the context.\ntags-range-with-page-variable.html\r{{ $title := .Site.Title }} \u003cul\u003e {{ range .Params.tags }} \u003cli\u003e \u003ca href=\"/tags/{{ . | urlize }}\"\u003e{{ . }}\u003c/a\u003e - {{ $title }} \u003c/li\u003e {{ end }} \u003c/ul\u003e\rNotice how once we have entered the loop (i.e. range), the value of {{ . }} has changed. We have defined a variable outside the loop ({{ $title }}) that we’ve assigned a value so that we have access to the value from within the loop as well.\n2. Use $. to access the global context $ has special significance in your templates. $ is set to the starting value of . (“the dot”) by default. This is a documented feature of Go text/template. This means you have access to the global context from anywhere. Here is an equivalent example of the preceding code block but now using $ to grab .Site.Title from the global context:\nrange-through-tags-w-global.html\r\u003cul\u003e {{ range .Params.tags }} \u003cli\u003e \u003ca href=\"/tags/{{ . | urlize }}\"\u003e{{ . }}\u003c/a\u003e - {{ $.Site.Title }} \u003c/li\u003e {{ end }} \u003c/ul\u003e\rThe built-in magic of $ would cease to work if someone were to mischievously redefine the special character; e.g. {{ $ := .Site }}. Don’t do it. You may, of course, recover from this mischief by using {{ $ := . }} in a global context to reset $ to its default value.\nWhitespace Go 1.6 includes the ability to trim the whitespace from either side of a Go tag by including a hyphen (-) and space immediately beside the corresponding {{ or }} delimiter.\nFor instance, the following Go Template will include the newlines and horizontal tab in its HTML output:\n\u003cdiv\u003e {{ .Title }} \u003c/div\u003e Which will output:\n\u003cdiv\u003e Hello, World! \u003c/div\u003e Leveraging the - in the following example will remove the extra white space surrounding the .Title variable and remove the newline:\n\u003cdiv\u003e {{- .Title -}} \u003c/div\u003e Which then outputs:\n\u003cdiv\u003eHello, World!\u003c/div\u003e Go considers the following characters whitespace:\nspace horizontal tab carriage return newline Comments In order to keep your templates organized and share information throughout your team, you may want to add comments to your templates. There are two ways to do that with Hugo.\nGo templates comments Go Templates support {{/* and */}} to open and close a comment block. Nothing within that block will be rendered.\nFor example:\nBonsoir, {{/* {{ add 0 + 2 }} */}}Eliott. Will render Bonsoir, Eliott., and not care about the syntax error (add 0 + 2) in the comment block.\nHTML comments You can add html comments by piping a string HTML code comment to safeHTML.\nFor example:\n{{ \"\u003c!-- This is an HTML comment --\u003e\" | safeHTML }} If you need variables to construct such HTML comments, just pipe printf to safeHTML.\nFor example:\n{{ printf \"\u003c!-- Our website is named: %s --\u003e\" .Site.Title | safeHTML }} HTML comments containing Go templates HTML comments are by default stripped, but their content is still evaluated. That means that although the HTML comment will never render any content to the final HTML pages, code contained within the comment may fail the build process.\nDo not try to comment out Go Template code using HTML comments.\n\u003c!-- {{ $author := \"Emma Goldman\" }} was a great woman. --\u003e {{ $author }} The templating engine will strip the content within the HTML comment, but will first evaluate any Go Template code if present within. So the above example will render Emma Goldman, as the $author variable got evaluated in the HTML comment. But the build would have failed if that code in the HTML comment had an error.\nHugo parameters Hugo provides the option of passing values to your template layer through your site configuration (i.e. for site-wide values) or through the metadata of each specific piece of content (i.e. the front matter). You can define any values of any type and use them however you want in your templates, as long as the values are supported by the front matter format.\nUse content (Page) parameters You can provide variables to be used by templates in individual content’s front matter.\nAn example of this is used in the Hugo docs. Most of the pages benefit from having the table of contents provided, but sometimes the table of contents doesn’t make a lot of sense. We’ve defined a notoc variable in our front matter that will prevent a table of contents from rendering when specifically set to true.\nHere is the example front matter:\ncontent/example.md\ryaml\r \rtoml\r \rjson\r \r--- notoc: true title: Example ---\r+++ notoc = true title = 'Example' +++\r{ \"notoc\": true, \"title\": \"Example\" } Here is an example of corresponding code that could be used inside a toc.html partial template:\nlayouts/partials/toc.html\r{{ if not .Params.notoc }} \u003caside\u003e \u003cheader\u003e \u003ca href=\"#{{ .Title | urlize }}\"\u003e \u003ch3\u003e{{ .Title }}\u003c/h3\u003e \u003c/a\u003e \u003c/header\u003e {{ .TableOfContents }} \u003c/aside\u003e \u003ca href=\"#\" id=\"toc-toggle\"\u003e\u003c/a\u003e {{ end }}\rWe want the default behavior to be for pages to include a TOC unless otherwise specified. This template checks to make sure that the notoc: field in this page’s front matter is not true.\nUse site configuration parameters You can arbitrarily define as many site-level parameters as you want in your site’s configuration file. These parameters are globally available in your templates.\nFor instance, you might declare the following:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: copyrighthtml: Copyright \u0026#xA9; 2017 John Doe. All Rights Reserved. sidebarrecentlimit: 5 twitteruser: spf13 [params] copyrighthtml = 'Copyright \u0026#xA9; 2017 John Doe. All Rights Reserved.' sidebarrecentlimit = 5 twitteruser = 'spf13' { \"params\": { \"copyrighthtml\": \"Copyright \\u0026#xA9; 2017 John Doe. All Rights Reserved.\", \"sidebarrecentlimit\": 5, \"twitteruser\": \"spf13\" } } Within a footer layout, you might then declare a \u003cfooter\u003e that is only rendered if the copyrighthtml parameter is provided. If it is provided, you will then need to declare the string is safe to use via the safeHTML function so that the HTML entity is not escaped again. This would let you easily update just your top-level configuration file each January 1st, instead of hunting through your templates.\n{{ if .Site.Params.copyrighthtml }} \u003cfooter\u003e \u003cdiv class=\"text-center\"\u003e{{ .Site.Params.CopyrightHTML | safeHTML }}\u003c/div\u003e \u003c/footer\u003e {{ end }} An alternative way of writing the “if” and then referencing the same value is to use with instead. with rebinds the context (.) within its scope and skips the block if the variable is absent:\nlayouts/partials/twitter.html\r{{ with .Site.Params.twitteruser }} \u003cdiv\u003e \u003ca href=\"https://twitter.com/{{ . }}\" rel=\"author\"\u003e \u003cimg src=\"/images/twitter.png\" width=\"48\" height=\"48\" title=\"Twitter: {{ . }}\" alt=\"Twitter\"\u003e\u003c/a\u003e \u003c/div\u003e {{ end }}\rFinally, you can pull “magic constants” out of your layouts as well. The following uses the first function, as well as the .RelPermalink page variable and the .Site.Pages site variable.\n\u003cnav\u003e \u003ch1\u003eRecent Posts\u003c/h1\u003e \u003cul\u003e {{- range first .Site.Params.SidebarRecentLimit .Site.Pages -}} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{- end -}} \u003c/ul\u003e \u003c/nav\u003e Example: show future events Given the following content structure and front matter:\ncontent/ └── events/ ├── event-1.md ├── event-2.md └── event-3.md content/events/event-1.md.\ryaml\r \rtoml\r \rjson\r \rdate: 2021-12-06T10:37:16-08:00 draft: false end_date: 2021-12-05T11:00:00-08:00 start_date: 2021-12-05T09:00:00-08:00 title: Event 1 date = 2021-12-06T10:37:16-08:00 draft = false end_date = 2021-12-05T11:00:00-08:00 start_date = 2021-12-05T09:00:00-08:00 title = 'Event 1' { \"date\": \"2021-12-06T10:37:16-08:00\", \"draft\": false, \"end_date\": \"2021-12-05T11:00:00-08:00\", \"start_date\": \"2021-12-05T09:00:00-08:00\", \"title\": \"Event 1\" } This partial template renders future events:\nlayouts/partials/future-events.html\r\u003ch2\u003eFuture Events\u003c/h2\u003e \u003cul\u003e {{ range where site.RegularPages \"Type\" \"events\" }} {{ if gt (.Params.start_date | time.AsTime) now }} {{ $startDate := .Params.start_date | time.Format \":date_medium\" }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e - {{ $startDate }} \u003c/li\u003e {{ end }} {{ end }} \u003c/ul\u003e\rIf you restrict front matter to the TOML format, and omit quotation marks surrounding date fields, you can perform date comparisons without casting.\nlayouts/partials/future-events.html\r\u003ch2\u003eFuture Events\u003c/h2\u003e \u003cul\u003e {{ range where (where site.RegularPages \"Type\" \"events\") \"Params.start_date\" \"gt\" now }} {{ $startDate := .Params.start_date | time.Format \":date_medium\" }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e - {{ $startDate }} \u003c/li\u003e {{ end }} \u003c/ul\u003e\r"},{"date":"0001-01-01","uri":"/about/what-is-hugo/","title":"What is Hugo","content":"Hugo is a general-purpose website framework. Technically speaking, Hugo is a static site generator. Unlike systems that dynamically build a page with each visitor request, Hugo builds pages when you create or update your content. Since websites are viewed far more often than they are edited, Hugo is designed to provide an optimal viewing experience for your website’s end users and an ideal writing experience for website authors.\nWebsites built with Hugo are extremely fast and secure. Hugo sites can be hosted anywhere, including Netlify, Heroku, GoDaddy, DreamHost, GitHub Pages, GitLab Pages, Surge, Firebase, Google Cloud Storage, Amazon S3, Rackspace, Azure, and CloudFront and work well with CDNs. Hugo sites run without the need for a database or dependencies on expensive runtimes like Ruby, Python, or PHP.\nWe think of Hugo as the ideal website creation tool with nearly instant build times, able to rebuild whenever a change is made.\nHow fast is Hugo? What does Hugo do? In technical terms, Hugo takes a source directory of files and templates and uses these as input to create a complete website.\nWho should use Hugo? Hugo is for people that prefer writing in a text editor over a browser.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nHugo is for people building a blog, a company site, a portfolio site, documentation, a single landing page, or a website with thousands of pages.\n"},{"date":"0001-01-01","uri":"/getting-started/usage/","title":"Basic usage","content":"Test your installation After installing Hugo, test your installation by running:\nhugo version You should see something like:\nhugo v0.122.0-b9a03bd59d5f71a529acb3e33f995e0ef332b3aa+extended linux/amd64 BuildDate=2024-01-26T15:54:24Z VendorInfo=gohugoio Display available commands To see a list of the available commands and flags:\nhugo help To get help with a subcommand, use the --help flag. For example:\nhugo server --help Build your site To build your site, cd into your project directory and run:\nhugo The hugo command builds your site, publishing the files to the public directory. To publish your site to a different directory, use the --destination flag or set publishDir in your site configuration.\nHugo does not clear the public directory before building your site. Existing files are overwritten, but not deleted. This behavior is intentional to prevent the inadvertent removal of files that you may have added to the public directory after the build.\nDepending on your needs, you may wish to manually clear the contents of the public directory before every build.\nDraft, future, and expired content Hugo allows you to set draft, date, publishDate, and expiryDate in the front matter of your content. By default, Hugo will not publish content when:\nThe draft value is true The date is in the future The publishDate is in the future The expiryDate is in the past You can override the default behavior when running hugo or hugo server with command line flags:\nhugo --buildDrafts # or -D hugo --buildExpired # or -E hugo --buildFuture # or -F Although you can also set these values in your site configuration, it can lead to unwanted results unless all content authors are aware of, and understand, the settings.\nAs noted above, Hugo does not clear the public directory before building your site. Depending on the current evaluation of the four conditions above, after the build your public directory may contain extraneous files from a previous build.\nA common practice is to manually clear the contents of the public directory before each build to remove draft, expired, and future content.\nDevelop and test your site To view your site while developing layouts or creating content, cd into your project directory and run:\nhugo server The hugo server command builds your site into memory, and serves your pages using a minimal HTTP server. When you run hugo server it will display the URL of your local site:\nWeb Server is available at http://localhost:1313/ While the server is running, it watches your project directory for changes to assets, configuration, content, data, layouts, translations, and static files. When it detects a change, the server rebuilds your site and refreshes your browser using LiveReload.\nMost Hugo builds are so fast that you may not notice the change unless you are looking directly at your browser.\nLiveReload While the server is running, Hugo injects JavaScript into the generated HTML pages. The LiveReload script creates a connection from the browser to the server via web sockets. You do not need to install any software or browser plugins, nor is any configuration required.\nAutomatic redirection When editing content, if you want your browser to automatically redirect to the page you last modified, run:\nhugo server --navigateToChanged Deploy your site As noted above, Hugo does not clear the public directory before building your site. Manually clear the contents of the public directory before each build to remove draft, expired, and future content.\nWhen you are ready to deploy your site, run:\nhugo This builds your site, publishing the files to the public directory. The directory structure will look something like this:\npublic/ ├── categories/ │ ├── index.html │ └── index.xml \u003c-- RSS feed for this section ├── post/ │ ├── my-first-post/ │ │ └── index.html │ ├── index.html │ └── index.xml \u003c-- RSS feed for this section ├── tags/ │ ├── index.html │ └── index.xml \u003c-- RSS feed for this section ├── index.html ├── index.xml \u003c-- RSS feed for the site └── sitemap.xml In a simple hosting environment, where you typically ftp, rsync, or scp your files to the root of a virtual host, the contents of the public directory are all that you need.\nMost of our users deploy their sites using a CI/CD workflow, where a push1 to their GitHub or GitLab repository triggers a build and deployment. Popular providers include AWS Amplify, CloudCannon, Cloudflare Pages, GitHub Pages, GitLab Pages, and Netlify.\nLearn more in the hosting and deployment section.\nThe Git repository contains the entire project directory, typically excluding the public directory because the site is built after the push. ↩︎\n"},{"date":"0001-01-01","uri":"/getting-started/directory-structure/","title":"Directory structure","content":"Site skeleton Hugo generates a project skeleton when you create a new site. For example, this command:\nhugo new site my-site Creates this directory structure:\nmy-site/ ├── archetypes/ │ └── default.md ├── assets/ ├── content/ ├── data/ ├── i18n/ ├── layouts/ ├── static/ ├── themes/ └── hugo.toml \u003c-- site configuration Depending on requirements, you may wish to organize your site configuration into subdirectories:\nmy-site/ ├── archetypes/ │ └── default.md ├── assets/ ├── config/ \u003c-- site configuration │ └── _default/ │ └── hugo.toml ├── content/ ├── data/ ├── i18n/ ├── layouts/ ├── static/ └── themes/ When you build your site, Hugo creates a public directory, and typically a resources directory as well:\nmy-site/ ├── archetypes/ │ └── default.md ├── assets/ ├── config/ │ └── _default/ │ └── hugo.toml ├── content/ ├── data/ ├── i18n/ ├── layouts/ ├── public/ \u003c-- created when you build your site ├── resources/ \u003c-- created when you build your site ├── static/ └── themes/ Directories Each of the subdirectories contributes to the content, structure, behavior, or presentation of your site.\narchetypes The archetypes directory contains templates for new content. See details. assets The assets directory contains global resources typically passed through an asset pipeline. This includes resources such as images, CSS, Sass, JavaScript, and TypeScript. See details. config The config directory contains your site configuration, possibly split into multiple subdirectories and files. For projects with minimal configuration or projects that do not need to behave differently in different environments, a single configuration file named hugo.toml in the root of the project is sufficient. See details. content The content directory contains the markup files (typically markdown) and page resources that comprise the content of your site. See details. data The data directory contains data files (JSON, TOML, YAML, or XML) that augment content, configuration, localization, and navigation. See details. i18n The i18n directory contains translation tables for multilingual sites. See details. layouts The layouts directory contains templates to transform content, data, and resources into a complete website. See details. public The public directory contains the published website, generated when you run the hugo command. Hugo recreates this directory and its content as needed. See details. resources The resources directory contains cached output from Hugo’s asset pipelines, generated when you run the hugo or hugo server commands. By default this cache directory includes CSS and images. Hugo recreates this directory and its content as needed. static The static directory contains files that will be copied to the public directory when you build your site. For example: favicon.ico, robots.txt, and files that verify site ownership. Before the introduction of page bundles and asset pipelines, the static directory was also used for images, CSS, and JavaScript. See details. themes The themes directory contains one or more themes, each in its own subdirectory. Union file system Hugo creates a union file system, allowing you to mount two or more directories to the same location. For example, let’s say your home directory contains a Hugo project in one directory, and shared content in another:\nhome/ └── user/ ├── my-site/ │ ├── content/ │ │ ├── books/ │ │ │ ├── _index.md │ │ │ ├── book-1.md │ │ │ └── book-2.md │ │ └── _index.md │ ├── themes/ │ │ └── my-theme/ │ └── hugo.toml └── shared-content/ └── films/ ├── _index.md ├── film-1.md └── film-2.md You can include the shared content when you build your site using mounts. In your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmodule: mounts: - source: content target: content - source: /home/user/shared-content target: content [module] [[module.mounts]] source = 'content' target = 'content' [[module.mounts]] source = '/home/user/shared-content' target = 'content' { \"module\": { \"mounts\": [ { \"source\": \"content\", \"target\": \"content\" }, { \"source\": \"/home/user/shared-content\", \"target\": \"content\" } ] } } When you overlay one directory on top of another, you must mount both directories.\nIf you think you need a symbolic link in your project directory, use Hugo’s union file system instead.\nAfter mounting, the union file system has this structure:\nhome/ └── user/ └── my-site/ ├── content/ │ ├── books/ │ │ ├── _index.md │ │ ├── book-1.md │ │ └── book-2.md │ ├── films/ │ │ ├── _index.md │ │ ├── film-1.md │ │ └── film-2.md │ └── _index.md ├── themes/ │ └── my-theme/ └── hugo.toml When two or more files have the same path, the order of precedence follows the order of the mounts. For example, if the shared content directory contains books/book-1.md, it will be ignored because the project’s content directory was mounted first.\nYou can mount directories to archetypes, assets, content, data, i18n, layouts, and static. See details.\nYou can also mount directories from Git repositories using Hugo Modules. See details.\nTheme skeleton Hugo generates a functional theme skeleton when you create a new theme. For example, this command:\nhugo new theme my-theme Creates this directory structure (subdirectories not shown):\nmy-theme/ ├── archetypes/ ├── assets/ ├── content/ ├── data/ ├── i18n/ ├── layouts/ ├── static/ ├── LICENSE ├── README.md ├── hugo.toml └── theme.toml Using the union file system described above, Hugo mounts each of these directories to the corresponding location in the project. When two files have the same path, the file in the project directory takes precedence. This allows you, for example, to override a theme’s template by placing a copy in the same location within the project directory.\nIf you are simultaneously using components from two or more themes or modules, and there’s a path collision, the first mount takes precedence.\n"},{"date":"0001-01-01","uri":"/contribute/documentation/","title":"Documentation","content":"Introduction We welcome corrections and improvements to the documentation. Please note that the documentation resides in its own repository, separate from the project repository.\nFor corrections and improvements to the current documentation, please submit issues and pull requests to the documentation repository.\nFor documentation related to a new feature, please include the documentation changes when you submit a pull request to the project repository.\nGuidelines Markdown Please follow these markdown guidelines:\nUse ATX headings, not setext headings, levels 2 through 4 Use fenced code blocks, not indented code blocks Use hyphens, not asterisks, with unordered list items Use the note shortcode instead of blockquotes Do not mix raw HTML within markdown Do not use bold text instead of a heading or description term (dt) Remove consecutive blank lines (maximum of two) Remove trailing spaces Style Although we do not strictly adhere to the Microsoft Writing Style Guide, it is an excellent resource for questions related to style, grammar, and voice.\nTerminology Please link to the glossary of terms when necessary, and use the terms consistently throughout the documentation. Of special note:\nThe term “front matter” is two words unless you are referring to the configuration key Use the word “map” instead of “dictionary” Use the word “flag” instead of “option” when referring to a command line flag Page titles and headings Please follow these guidelines for page titles and headings:\nUse sentence-style capitalization Avoid markdown in headings and page titles Shorter is better Use active voice with present tense In software documentation, passive voice is unavoidable in some cases. Please use active voice when possible.\nNo → With Hugo you can build a static site.\nYes → Build a static site with Hugo.\nNo → This will cause Hugo to generate HTML files in the public directory.\nYes → Hugo generates HTML files in the public directory.\nUse second person instead of third person No → Users should exercise caution when deleting files.\nBetter → You must be cautious when deleting files.\nBest → Be cautious when deleting files.\nAvoid adverbs when possible No → Hugo is extremely fast.\nYes → Hugo is fast.\n“It’s an adverb, Sam. It’s a lazy tool of a weak mind.” (Outbreak, 1995).\nMiscellaneous Other guidelines to consider:\nDo not place list items directly under a heading; include an introductory sentence or phrase before the list. Avoid use of bold text. Use the note shortcode to draw attention to important content. Do not place description terms (dt) within backticks unless required for syntactic clarity. Do not use Hugo’s ref or relref shortcodes. We use a link render hook to resolve and validate link destinations, including fragments. Shorter is better. If there is more than one way to do something, describe the current best practice. For example, avoid phrases such as “you can also do…” and “in older versions you had to…” When including code samples, use short snippets that demonstrate the concept. The Hugo user community is global; use basic english when possible. Level 6 markdown headings Level 6 markdown headings are styled as dt elements. This was implemented to support a glossary with linkable terms.\nCode examples Indent code by two spaces. With examples of template code, include a space after opening action delimiters, and include a space before closing action delimiters.\nFenced code blocks Always include the language code when using a fenced code block:\n```go-html-template {{ if eq $foo \"bar\" }} {{ print \"foo is bar\" }} {{ end }} ``` Rendered:\n{{ if eq $foo \"bar\" }} {{ print \"foo is bar\" }} {{ end }} Shortcode calls Use this syntax to include shortcodes calls within your code examples:\n{{\u003c/* foo */\u003e}} {{%/* foo */%}} Rendered:\n{{\u003c foo \u003e}} {{% foo %}} Site configuration Use the code-toggle shortcode to include site configuration examples:\n{{\u003c code-toggle file=hugo \u003e}} baseURL = 'https://example.org/' languageCode = 'en-US' title = 'My Site' {{\u003c /code-toggle \u003e}} Rendered:\nhugo.\ryaml\r \rtoml\r \rjson\r \rbaseURL: https://example.org/ languageCode: en-US title: My Site baseURL = 'https://example.org/' languageCode = 'en-US' title = 'My Site' { \"baseURL\": \"https://example.org/\", \"languageCode\": \"en-US\", \"title\": \"My Site\" } Front matter Use the code-toggle shortcode to include front matter examples:\n{{\u003c code-toggle file=content/posts/my-first-post.md fm=true \u003e}} title = 'My first post' date = 2023-11-09T12:56:07-08:00 draft = false {{\u003c /code-toggle \u003e}} Rendered:\ncontent/posts/my-first-post.md\ryaml\r \rtoml\r \rjson\r \r--- date: 2023-11-09T12:56:07-08:00 draft: false title: My first post ---\r+++ date = 2023-11-09T12:56:07-08:00 draft = false title = 'My first post' +++\r{ \"date\": \"2023-11-09T12:56:07-08:00\", \"draft\": false, \"title\": \"My first post\" } Other code examples Use the code shortcode for other code examples that require a file name:\n{{\u003c code file=layouts/_default/single.html \u003e}} {{ range .Site.RegularPages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{\u003c /code \u003e}} Rendered:\nlayouts/_default/single.html\r{{ range .Site.RegularPages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }}\rShortcodes These shortcodes are commonly used throughout the documentation. Other shortcodes are available for specialized use.\ndeprecated-in Use the “deprecated-in” shortcode to indicate that a feature is deprecated:\n{{% deprecated-in 0.120.0 %}} Use [`hugo.IsServer`] instead. [`hugo.IsServer`]: /functions/hugo/isserver {{% /deprecated-in %}} Rendered:\nDeprecated in v0.120.0.\nUse hugo.IsServer instead.\ncode Use the “code” shortcode for other code examples that require a file name. See the code examples above. This shortcode takes these arguments:\ncopy (bool) Whether to display a copy-to-clipboard button. Default is false. file (string) The file name to display. lang (string) The code language. If you do not provide a lang argument, the code language is determined by the file extension. If the file extension is “html”, sets the code language to go-html-template. Default is text. code-toggle Use the “code-toggle” shortcode to display examples of site configuration, front matter, or data files. See the code examples above. This shortcode takes these arguments:\ncopy (bool) Whether to display a copy-to-clipboard button. Default is false. file (string) The file name to display. Omit the file extension for site configuration examples. fm (bool) Whether the example is front matter. Default is false. new-in Use the “new-in” shortcode to indicate a new feature:\n{{\u003c new-in 0.120.0 \u003e}} Rendered:\nNew in v0.120.0\rnote Use the “note” shortcode with {{% %}} delimiters to call attention to important content:\n{{% note %}} Use the [`math.Mod`] function to control... [`math.Mod`]: /functions/math/mod/ {{% /note %}} Rendered:\nUse the math.Mod function to control…\nNew features Use the “new-in” shortcode to indicate a new feature:\ncontent/something/foo.md\r{{\u003c new-in 0.120.0 \u003e}}\rThe “new in” label will be hidden if the specified version is older than a predefined threshold, based on differences in major and minor versions. See details.\nDeprecated features Use the “deprecated-in” shortcode to indicate that a feature is deprecated:\ncontent/something/foo.md\r{{% deprecated-in 0.120.0 %}} Use [`hugo.IsServer`] instead. [`hugo.IsServer`]: /functions/hugo/isserver {{% /deprecated-in %}}\rWhen deprecating a function or method, add this to front matter:\ncontent/something/foo.md\ryaml\r \rtoml\r \rjson\r \r--- expiryDate: \"2024-10-30\" ---\r+++ expiryDate = '2024-10-30' +++\r{ \"expiryDate\": \"2024-10-30\" } Set the expiryDate to one year from the date of deprecation, and add a brief front matter comment to explain the setting.\nGitHub workflow This section assumes that you have a working knowledge of Git and GitHub, and are comfortable working on the command line.\nUse this workflow to create and submit pull requests.\nStep 1 Fork the documentation repository. Step 2 Clone your fork. Step 3 Create a new branch with a descriptive name that includes the corresponding issue number, if any: git checkout -b restructure-foo-page-99999 Step 4 Make changes. Step 5 Build the site locally to preview your changes. Step 6 Commit your changes with a descriptive commit message: Provide a summary on the first line, typically 50 characters or less, followed by a blank line. Optionally, provide a detailed description where each line is 80 characters or less, followed by a blank line. Optionally, add one or more “Fixes” or “Closes” keywords, each on its own line, referencing the issues addressed by this change. For example:\ngit commit -m \"Restructure the taxonomy page This restructures the taxonomy page by splitting topics into logical sections, each with one or more examples. Fixes #9999 Closes #9998\" Step 7 Push the new branch to your fork of the documentation repository. Step 8 Visit the documentation repository and create a pull request (PR). Step 9 A project maintainer will review your PR and may request changes. You may delete your branch after the maintainer merges your PR. "},{"date":"0001-01-01","uri":"/tools/front-ends/","title":"Front-end interfaces","content":"Commercial CloudCannon The intuitive Git-based CMS for your Hugo website. CloudCannon syncs changes from your Git repository and pushes content changes back, so your development and content teams are always in sync. Edit all of your content on the page with visual editing, build entire pages with reusable custom components and then publish confidently. DatoCMS DatoCMS is a fully customizable administrative area for your static websites. Use your favorite website generator, let your clients publish new content independently, and the host the site anywhere you like. Open source Decap CMS Decap CMS is an open-source, serverless solution for managing Git based content in static sites, and it works on any platform that can host static sites. A Hugo/Decap CMS starter is available to get new projects running quickly. Sveltia CMS Sveltia CMS is a drop-in replacement for Decap CMS which is built from the ground up with powerful and performant modern UI library Svelte. Sveltia CMS incorporates i18n into every corner of the product, while striving to radically improve UX, performance and productivity. "},{"date":"0001-01-01","uri":"/quick-reference/functions/","title":"Functions","content":"cast Use these functions to cast a value from one data type to another.\ncast.ToFloat (float) Converts a value to a decimal floating-point number (base 10). cast.ToInt (int) Converts a value to a decimal integer (base 10). cast.ToString (string) Converts a value to a string. collections Use these functions to work with arrays, slices, maps, and page collections.\ncollections.After (after) Slices an array to the items after the Nth item. collections.Append (append) Appends one or more elements to a slice and returns the resulting slice. collections.Apply (apply) Returns a new collection with each element transformed by the given function. collections.Complement (complement) Returns the elements of the last collection that are not in any of the others. collections.Delimit (delimit) Loops through any array, slice, or map and returns a string of all the values separated by a delimiter. collections.Dictionary (dict) Creates a map from a list of key and value pairs. collections.First (first) Returns the given collection, limited to the first N elements. collections.Group (group) Groups the given page collection by the given key. collections.In (in) Reports whether the given value is a member of the given set. collections.Index (index) Looks up the index(es) or key(s) of the data structure passed into it. collections.Intersect (intersect) Returns the common elements of two arrays or slices, in the same order as the first array. collections.IsSet (isset) Reports whether the key exists within the collection. collections.KeyVals (keyVals) Returns a KeyVals struct. collections.Last (last) Returns the given collection, limited to the last N elements. collections.Merge (merge) Returns the result of merging two or more maps. collections.NewScratch (newScratch) Returns a locally scoped \"scratch pad\" to store and manipulate data. collections.Querify (querify) Takes a set or slice of key-value pairs and returns a query string to be appended to URLs. collections.Reverse Reverses the order of a collection. collections.Seq (seq) Returns a slice of integers. collections.Shuffle (shuffle) Returns a random permutation of a given array or slice. collections.Slice (slice) Creates a slice of all passed arguments. collections.Sort (sort) Sorts slices, maps, and page collections. collections.SymDiff (symdiff) Returns the symmetric difference of two collections. collections.Union (union) Given two arrays or slices, returns a new array that contains the elements that belong to either or both arrays/slices. collections.Uniq (uniq) Returns the given collection, removing duplicate elements. collections.Where (where) Returns the given collection, removing elements that do not satisfy the comparison condition. compare Use these functions to compare two or more values.\ncompare.Conditional (cond) Returns one of two arguments depending on the value of the control argument. compare.Default (default) Returns the second argument if set, else the first argument. compare.Eq (eq) Returns the boolean truth of arg1 == arg2 || arg1 == arg3. compare.Ge (ge) Returns the boolean truth of arg1 \u003e= arg2 \u0026\u0026 arg1 \u003e= arg3. compare.Gt (gt) Returns the boolean truth of arg1 \u003e arg2 \u0026\u0026 arg1 \u003e arg3. compare.Le (le) Returns the boolean truth of arg1 \u003c= arg2 \u0026\u0026 arg1 \u003c= arg3. compare.Lt (lt) Returns the boolean truth of arg1 \u003c arg2 \u0026\u0026 arg1 \u003c arg3. compare.Ne (ne) Returns the boolean truth of arg1 != arg2 \u0026\u0026 arg1 != arg3. crypto Use these functions to create cryptographic hashes.\ncrypto.FNV32a Returns the FNV (Fowler–Noll–Vo) 32-bit hash of a given string. crypto.HMAC (hmac) Returns a cryptographic hash that uses a key to sign a message. crypto.MD5 (md5) Hashes the given input and returns its MD5 checksum encoded to a hexadecimal string. crypto.SHA1 (sha1) Hashes the given input and returns its SHA1 checksum encoded to a hexadecimal string. crypto.SHA256 (sha256) Hashes the given input and returns its SHA256 checksum encoded to a hexadecimal string. data Use these functions to read local or remote data files.\ndata.GetCSV (getCSV) Returns an array of arrays from a local or remote CSV file, or an error if the file does not exist. data.GetJSON (getJSON) Returns a JSON object from a local or remote JSON file, or an error if the file does not exist. debug Use these functions to debug your templates.\ndebug.Dump Returns an object dump as a string. debug.Timer Creates a named timer that reports elapsed time to the console. diagrams Use these functions to render diagrams.\ndiagrams.Goat Converts ASCII art to an SVG diagram, returning a GoAT diagram object. encoding Use these functions to encode and decode data.\nencoding.Base64Decode (base64Decode) Returns the base64 decoding of the given content. encoding.Base64Encode (base64Encode) Returns the base64 decoding of the given content. encoding.Jsonify (jsonify) Encodes the given object to JSON. fmt Use these functions to print strings within a template or to print messages to the terminal.\nfmt.Errorf (errorf) Log an ERROR from a template. fmt.Erroridf (erroridf) Log a suppressable ERROR from a template. fmt.Print (print) Prints the default representation of the given arguments using the standard fmt.Print function. fmt.Printf (printf) Formats a string using the standard fmt.Sprintf function. fmt.Println (println) Prints the default representation of the given argument using the standard fmt.Print function and enforces a line break. fmt.Warnf (warnf) Log a WARNING from a template. global Use these global functions to access page and site data.\npage Provides global access to a Page object. site Provides global access to the current Site object. go template These are the functions, operators, and statements provided by Go's text/template package.\nand Returns the first falsy argument. If all arguments are truthy, returns the last argument. block Defines a template and executes it in place. break Used with the range statement, stops the innermost iteration and bypasses all remaining iterations. continue Used with the range statement, stops the innermost iteration and continues to the next iteration. define Defines a template. else Begins an alternate block for if, with, and range statements. end Terminates if, with, range, block, and define statements. if Executes the block if the expression is truthy. len Returns the length of a string, slice, map, or collection. not Returns the boolean negation of its single argument. or Returns the first truthy argument. If all arguments are falsy, returns the last argument. range Iterates over a non-empty collection, binds context (the dot) to successive elements, and executes the block. return Used within partial templates, terminates template execution and returns the given value, if any. template Executes the given template, optionally passing context. urlquery Returns the escaped value of the textual representation of its arguments in a form suitable for embedding in a URL query. with Binds context (the dot) to the expression and executes the block if expression is truthy. hugo Use these functions to access information about the Hugo application and the current environment.\nhugo.BuildDate Returns the compile date of the Hugo binary. hugo.CommitHash Returns the Git commit hash of the Hugo binary. hugo.Deps Returns a slice of project dependencies, either Hugo Modules or local theme components. hugo.Environment Returns the current running environment. hugo.Generator Renders an HTML meta element identifying the software that generated the site. hugo.GoVersion Returns the Go version used to compile the Hugo binary hugo.IsDevelopment Reports whether the current running environment is \"development\". hugo.IsExtended Reports whether the Hugo binary is the extended version. hugo.IsProduction Reports whether the current running environment is \"production\". hugo.IsServer Reports whether the built-in development server is running. hugo.Version Returns the current version of the Hugo binary. hugo.WorkingDir Returns the project working directory. images Use these functions to create an image filter, apply an image filter to an image, and to retrieve image information.\nimages.AutoOrient Returns an image filter that rotates and flips an image as needed per its EXIF orientation tag. images.Brightness Returns an image filter that changes the brightness of an image. images.ColorBalance Returns an image filter that changes the color balance of an image. images.Colorize Returns an image filter that produces a colorized version of an image. images.Config Returns an image.Config structure from the image at the specified path, relative to the working directory. images.Contrast Returns an image filter that changes the contrast of an image. images.Filter Applies one or more image filters to the given image resource. images.Gamma Returns an image filter that performs gamma correction on an image. images.GaussianBlur Returns an image filter that applies a gaussian blur to an image. images.Grayscale Returns an image filter that produces a grayscale version of an image. images.Hue Returns an image filter that rotates the hue of an image. images.Invert Returns an image filter that negates the colors of an image. images.Opacity Returns an image filter that changes the opacity of an image. images.Overlay Returns an image filter that overlays the source image at the given coordinates, relative to the upper left corner. images.Padding Returns an image filter that resizes the image canvas without resizing the image. images.Pixelate Returns an image filter that applies a pixelation effect to an image. images.Process Returns an image filter that processes the given image using the given specification. images.Saturation Returns an image filter that changes the saturation of an image. images.Sepia Returns an image filter that produces a sepia-toned version of an image. images.Sigmoid Returns an image filter that changes the contrast of an image using a sigmoidal function. images.Text Returns an image filter that adds text to an image. images.UnsharpMask Returns an image filter that sharpens an image. inflect These functions provide word inflection features such as singularization and pluralization of English nouns.\ninflect.Humanize (humanize) Returns the humanized version of the input with the first letter capitalized. inflect.Pluralize (pluralize) Pluralizes the given word according to a set of common English pluralization rules. inflect.Singularize (singularize) Singularizes the given word according to a set of common English singularization rules. js Use these functions to work with JavaScript and TypeScript files.\njs.Build Bundles, transpiles, tree shakes, and minifies JavaScript resources. lang Use these functions to adapt your site to meet language and regional requirements.\nlang.FormatAccounting Returns a currency representation of a number for the given currency and precision for the current language and region in accounting notation. lang.FormatCurrency Returns a currency representation of a number for the given currency and precision for the current language and region. lang.FormatNumber Returns a numeric representation of a number with the given precision for the current language and region. lang.FormatNumberCustom Returns a numeric representation of a number with the given precision using negative, decimal, and grouping options. lang.FormatPercent Returns a percentage representation of a number with the given precision for the current language and region. lang.Merge Merge missing translations from other languages. lang.Translate (T or i18n) Translates a string using the translation tables in the i18n directory. math Use these functions to perform mathematical operations.\nmath.Abs Returns the absolute value of the given number. math.Add (add) Adds two or more numbers. math.Ceil Returns the least integer value greater than or equal to the given number. math.Counter Increments and returns a global counter. math.Div (div) Divides the first number by one or more numbers. math.Floor Returns the greatest integer value less than or equal to the given number. math.Log Returns the natural logarithm of the given number. math.Max Returns the greater of all numbers. Accepts scalars, slices, or both. math.Min Returns the smaller of all numbers. Accepts scalars, slices, or both. math.Mod (mod) Returns the modulus of two integers. math.ModBool (modBool) Reports whether the modulus of two integers equals 0. math.Mul (mul) Multiplies two or more numbers. math.Pow (pow) Returns the first number raised to the power of the second number. math.Product Returns the product of all numbers. Accepts scalars, slices, or both. math.Rand Returns a pseudo-random number in the half-open interval [0.0, 1.0). math.Round Returns the nearest integer, rounding half away from zero. math.Sqrt Returns the square root of the given number. math.Sub (sub) Subtracts one or more numbers from the first number. math.Sum Returns the sum of all numbers. Accepts scalars, slices, or both. openapi3 Use these functions to work with OpenAPI 3 definitions.\nopenapi3.Unmarshal Unmarshals the given resource into an OpenAPI 3 document. os Use these functions to interact with the operating system.\nos.FileExists (fileExists) Reports whether the file or directory exists. os.Getenv (getenv) Returns the value of an environment variable, or an empty string if the environment variable is not set. os.ReadDir (readDir) Returns an array of FileInfo structures sorted by file name, one element for each directory entry. os.ReadFile (readFile) Returns the contents of a file. os.Stat Returns a FileInfo structure describing a file or directory. partials Use these functions to call partial templates.\npartials.Include (partial) Executes the given partial template, optionally passing context. If the partial template contains a return statement, returns the given value, else returns the rendered output. partials.IncludeCached (partialCached) Executes the given template and caches the result, optionally passing context. If the partial template contains a return statement, returns the given value, else returns the rendered output. path Use these functions to work with file paths.\npath.Base Replaces path separators with slashes (/) and returns the last element of the given path. path.BaseName Replaces path separators with slashes (/) and returns the last element of the given path, removing the extension if present. path.Clean Replaces path separators with slashes (/) and returns the shortest path name equivalent to the given path. path.Dir Replaces path separators with slashes (/) and returns all but the last element of the given path. path.Ext Replaces path separators with slashes (/) and returns the file name extension of the given path. path.Join Replaces path separators with slashes (/), joins the given path elements into a single path, and returns the shortest path name equivalent to the result. path.Split Replaces path separators with slashes (/) and splits the resulting path immediately following the final slash, separating it into a directory and file name component. reflect Use these functions to determine a value's data type.\nreflect.IsMap Reports whether the given value is a map. reflect.IsSlice Reports whether the given value is a slice. resources Use these functions to work with resources.\nresources.Babel (babel) Compiles the given JavaScript resource with Babel. resources.ByType Returns a collection of global resources of the given media type, or nil if none found. resources.Concat Returns a concatenated slice of resources. resources.Copy Copies the given resource to the target path. resources.ExecuteAsTemplate Returns a resource created from a Go template, parsed and executed with the given context. resources.Fingerprint (fingerprint) Cryptographically hashes the content of the given resource. resources.FromString Returns a resource created from a string. resources.Get Returns a global resource from the given path, or nil if none found. resources.GetMatch Returns the first global resource from paths matching the given glob pattern, or nil if none found. resources.GetRemote Returns a remote resource from the given URL, or nil if none found. resources.Match Returns a collection of global resources from paths matching the given glob pattern, or nil if none found. resources.Minify (minify) Minifies the given resource. resources.PostCSS (postCSS) Processes the given resource with PostCSS using any PostCSS plugin. resources.PostProcess Processes the given resource after the build. resources.ToCSS (toCSS) Transpiles Sass to CSS. safe Use these functions to declare a value as safe in the context of Go's html/template package.\nsafe.CSS (safeCSS) Declares the given string as safe CSS string. safe.HTML (safeHTML) Declares the given string as a safeHTML string. safe.HTMLAttr (safeHTMLAttr) Declares the given key/value pair as a safe HTML attribute. safe.JS (safeJS) Declares the given string as a safe JavaScript expression. safe.JSStr (safeJSStr) Declares the given string as a safe JavaScript string. safe.URL (safeURL) Declares the given string as a safe URL or URL substring. strings Use these functions to work with strings.\nstrings.Chomp (chomp) Returns the given string, removing all trailing newline characters and carriage returns. strings.Contains Reports whether the given string contains the given substring. strings.ContainsAny Reports whether the given string contains any character within the given set. strings.ContainsNonSpace Reports whether the given string contains any non-space characters as defined by Unicode’s White Space property. strings.Count Returns the number of non-overlapping instances of the given substring within the given string. strings.CountRunes (countrunes) Returns the number of runes in the given string excluding whitespace. strings.CountWords (countwords) Returns the number of words in the given string. strings.FindRE (findRE) Returns a slice of strings that match the regular expression. strings.FindRESubmatch (findRESubmatch) Returns a slice of all successive matches of the regular expression. Each element is a slice of strings holding the text of the leftmost match of the regular expression and the matches, if any, of its subexpressions. strings.FirstUpper Returns the given string, capitalizing the first character. strings.HasPrefix (hasPrefix) Reports whether the given string begins with the given prefix. strings.HasSuffix (hasSuffix) Reports whether the given string ends with the given suffix. strings.Repeat Returns a new string consisting of zero or more copies of another string. strings.Replace (replace) Returns a copy of INPUT, replacing all occurrences of OLD with NEW. strings.ReplaceRE (replaceRE) Returns a copy of INPUT, replacing all occurrences of a regular expression with a replacement pattern. strings.RuneCount Returns the number of runes in the given string. strings.SliceString (slicestr) Creates a slice of a half-open range, including start and end indices. strings.Split (split) Returns a slice of strings by splitting the given string by a delimiter. strings.Substr (substr) Extracts parts of a string from a specified character's position and returns the specified number of characters. strings.Title (title) Returns the given string, converting it to title case. strings.ToLower (lower) Returns the given string, converting all characters to lowercase. strings.ToUpper (upper) Returns the given string, converting all characters to uppercase. strings.Trim (trim) Returns the given string, removing leading and trailing characters specified in the cutset. strings.TrimLeft Returns the given string, removing leading characters specified in the cutset. strings.TrimPrefix Returns the given string, removing the prefix from the beginning of the string. strings.TrimRight Returns the given string, removing trailing characters specified in the cutset. strings.TrimSuffix Returns the given string, removing the suffix from the end of the string. strings.Truncate (truncate) Returns the given string, truncating it to a maximum length without cutting words or leaving unclosed HTML tags. templates Use these functions to query the template system.\ntemplates.Exists Reports whether a template file exists under the given path relative to the layouts directory. time Use these functions to work with time values.\ntime.AsTime (time) Returns the given string representation of a date/time value as a time.Time value. time.Duration (duration) Returns a time.Duration value using the given time unit and number. time.Format (dateFormat) Returns the given date/time as a formatted and localized string. time.Now (now) Returns the current local time. time.ParseDuration Returns a time.Duration value by parsing the given duration string. transform Use these functions to transform values from one format to another.\ntransform.CanHighlight Reports whether the given code language is supported by the Chroma highlighter. transform.Emojify (emojify) Runs a string through the Emoji emoticons processor. transform.Highlight (highlight) Renders code with a syntax highlighter. transform.HighlightCodeBlock Highlights code received in context within a code block render hook. transform.HTMLEscape (htmlEscape) Returns the given string, escaping special characters by replacing them with HTML entities. transform.HTMLUnescape (htmlUnescape) Returns the given string, replacing each HTML entity with its corresponding character. transform.Markdownify (markdownify) Renders markdown to HTML. transform.Plainify (plainify) Returns a string with all HTML tags removed. transform.Remarshal Marshals a string of serialized data, or a map, into a string of serialized data in the specified format. transform.Unmarshal (unmarshal) Parses serialized data and returns a map or an array. Supports CSV, JSON, TOML, YAML, and XML. transform.XMLEscape Returns the given string, removing disallowed characters then escaping the result to its XML equivalent. urls Use these functions to work with URLs.\nurls.AbsLangURL (absLangURL) Returns an absolute URL with a language prefix, if any. urls.AbsURL (absURL) Returns an absolute URL. urls.Anchorize (anchorize) Returns the given string, sanitized for usage in an HTML id attribute. urls.JoinPath Joins the provided elements into a URL string and cleans the result of any ./ or ../ elements. If the argument list is empty, JoinPath returns an empty string. urls.Parse Parses a URL into a URL structure. urls.Ref (ref) Returns the absolute permalink to a page at the given path. urls.RelLangURL (relLangURL) Returns a relative URL with a language prefix, if any. urls.RelRef (relref) Returns the relative permalink to a page at the given path. urls.RelURL (relURL) Returns a relative URL. urls.URLize (urlize) Returns the given string, sanitized for usage in a URL. "},{"date":"0001-01-01","uri":"/variables/git/","title":"Git variables","content":"\rWe are making an effort to unify our terminology, and to use these terms consistently throughout the documentation.\nHistorically, we have inconsistently referred to the items on this page as functions, parameters, variables, or methods. They are not functions, parameters, or variables; they are methods.\nThis page will remain in place as readers become familiar with the unified terminology. See the methods section for a list of methods by object, or the methods quick reference guide.\nTo retrieve Git information related to the last commit of any page, see the documentation for the GitInfo method on a Page object.\n"},{"date":"0001-01-01","uri":"/about/features/","title":"Hugo features","content":"General Extremely fast build times (\u003c 1 ms per page) Completely cross platform, with easy installation on macOS, Linux, Windows, and more Renders changes on the fly with LiveReload as you develop Powerful theming Host your site anywhere Organization Straightforward organization for your projects, including website sections Customizable URLs Support for configurable taxonomies, including categories and tags Sort content as you desire through powerful template functions Automatic table of contents generation Dynamic menu creation Pretty URLs support Permalink pattern support Redirects via aliases Content Native Markdown and Emacs Org-Mode support, as well as other languages via external helpers (see supported formats) TOML, YAML, and JSON metadata support in front matter Customizable homepage Multiple content types Automatic and user defined content summaries Shortcodes to enable rich content inside of Markdown “Minutes to Read” functionality “WordCount” functionality Additional features Integrated Disqus comment support Integrated Google Analytics support Automatic RSS creation Support for Go HTML templates Syntax highlighting powered by Chroma "},{"date":"0001-01-01","uri":"/installation/linux/","title":"Linux","content":"Editions Hugo is available in two editions: standard and extended. With the extended edition you can:\nEncode to the WebP format when processing images. You can decode WebP images with either edition. Transpile Sass to CSS using the embedded LibSass transpiler. The extended edition is not required to use the Dart Sass transpiler. We recommend that you install the extended edition.\nPrerequisites Although not required in all cases, Git, Go, and Dart Sass are commonly used when working with Hugo.\nGit is required to:\nBuild Hugo from source Use the Hugo Modules feature Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as CloudCannon, Cloudflare Pages, GitHub Pages, GitLab Pages, and Netlify Go is required to:\nBuild Hugo from source Use the Hugo Modules feature Dart Sass is required to transpile Sass to CSS when using the latest features of the Sass language.\nPlease refer to the relevant documentation for installation instructions:\nGit Go Dart Sass Prebuilt binaries Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section.\nDownload the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable.\nIf you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below.\nPackage managers Snap Snap is a free and open-source package manager for Linux. Available for most distributions, snap packages are simple to install and are automatically updated.\nThe Hugo snap package is strictly confined. Strictly confined snaps run in complete isolation, up to a minimal access level that’s deemed always safe. The sites you create and build must be located within your home directory, or on removable media.\nTo install the extended edition of Hugo:\nsudo snap install hugo To enable or revoke access to removable media:\nsudo snap connect hugo:removable-media sudo snap disconnect hugo:removable-media To enable or revoke access to SSH keys:\nsudo snap connect hugo:ssh-keys sudo snap disconnect hugo:ssh-keys Homebrew Homebrew is a free and open-source package manager for macOS and Linux. To install the extended edition of Hugo:\nbrew install hugo Repository packages Most Linux distributions maintain a repository for commonly installed applications.\nThe Hugo version available in package repositories varies based on Linux distribution and release, and in some cases will not be the latest version.\nUse one of the other installation methods if your package repository does not provide the desired version.\nAlpine Linux To install the extended edition of Hugo on Alpine Linux:\ndoas apk add --no-cache --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community hugo Arch Linux Derivatives of the Arch Linux distribution of Linux include EndeavourOS, Garuda Linux, Manjaro, and others. To install the extended edition of Hugo:\nsudo pacman -S hugo Debian Derivatives of the Debian distribution of Linux include elementary OS, KDE neon, Linux Lite, Linux Mint, MX Linux, Pop!_OS, Ubuntu, Zorin OS, and others. To install the extended edition of Hugo:\nsudo apt install hugo You can also download Debian packages from the latest release page.\nFedora Derivatives of the Fedora distribution of Linux include CentOS, Red Hat Enterprise Linux, and others. To install the extended edition of Hugo:\nsudo dnf install hugo Gentoo Derivatives of the Gentoo distribution of Linux include Calculate Linux, Funtoo, and others. Follow the instructions below to install the extended edition of Hugo:\nSpecify the extended USE flag in /etc/portage/package.use/hugo:\nwww-apps/hugo extended Build using the Portage package manager:\nsudo emerge www-apps/hugo openSUSE Derivatives of the openSUSE distribution of Linux include GeckoLinux, Linux Karmada, and others. To install the extended edition of Hugo:\nsudo zypper install hugo Solus The Solus distribution of Linux includes Hugo in its package repository. To install the extended edition of Hugo:\nsudo eopkg install hugo Build from source To build the extended edition of Hugo from source you must:\nInstall Git Install Go version 1.20 or later Install a C compiler, either GCC or Clang Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ($HOME/go or %USERPROFILE%\\go).\nThen build and test:\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest hugo version Comparison Prebuilt binaries Package managers Repository packages Build from source Easy to install? ✔️ ✔️ ✔️ ✔️ Easy to upgrade? ✔️ ✔️ varies ✔️ Easy to downgrade? ✔️ ✔️ 1 varies ✔️ Automatic updates? ❌ varies 2 ❌ ❌ Latest version available? ✔️ ✔️ varies ✔️ Easy if a previous version is still installed. ↩︎\nSnap packages are automatically updated. Homebrew requires advanced configuration. ↩︎\n"},{"date":"0001-01-01","uri":"/troubleshooting/logging/","title":"Logging","content":"Command line Enable console logging with the --logLevel command line flag.\nHugo has four logging levels:\nerror Display error messages only. hugo --logLevel error warn Display warning and error messages. hugo --logLevel warn info Display information, warning, and error messages. hugo --logLevel info debug Display debug, information, warning, and error messages. hugo --logLevel debug If you do not specify a logging level with the --logLevel flag, warnings and errors are always displayed.\nTemplate functions You can also use template functions to print warnings or errors to the console. These functions are typically used to report data validation errors, missing files, etc.\nfmt.Errorf\rLog an ERROR from a template.\rfmt.Erroridf\rLog a suppressable ERROR from a template.\rfmt.Warnf\rLog a WARNING from a template.\r"},{"date":"0001-01-01","uri":"/content-management/page-bundles/","title":"Page bundles","content":"Page Bundles are a way to group Page Resources.\nA Page Bundle can be one of:\nLeaf Bundle (leaf means it has no children) Branch Bundle (home page, section, taxonomy terms, taxonomy list) Leaf Bundle Branch Bundle Usage Collection of content and attachments for single pages Collection of attachments for section pages (home page, section, taxonomy terms, taxonomy list) Index file name index.md 1 _index.md 1 Allowed Resources Page and non-page (like images, PDF, etc.) types Only non-page (like images, PDF, etc.) types Where can the Resources live? At any directory level within the leaf bundle directory. Only in the directory level of the branch bundle directory i.e. the directory containing the _index.md (ref). Layout type single list Nesting Does not allow nesting of more bundles under it Allows nesting of leaf or branch bundles under it Example content/posts/my-post/index.md content/posts/_index.md Content from non-index page files… Accessed only as page resources Accessed only as regular pages Leaf bundles A Leaf Bundle is a directory at any hierarchy within the content/ directory, that contains an index.md file.\nExamples of leaf bundle organization content/ ├── about │ ├── index.md ├── posts │ ├── my-post │ │ ├── content1.md │ │ ├── content2.md │ │ ├── image1.jpg │ │ ├── image2.png │ │ └── index.md │ └── my-other-post │ └── index.md │ └── another-section ├── .. └── not-a-leaf-bundle ├── .. └── another-leaf-bundle └── index.md In the above example content/ directory, there are four leaf bundles:\nabout This leaf bundle is at the root level (directly under content directory) and has only the index.md. my-post This leaf bundle has the index.md, two other content Markdown files and two image files. image1, image2: These images are page resources of my-post and only available in my-post/index.md resources.\ncontent1, content2: These content files are page resources of my-post and only available in my-post/index.md resources. They will not be rendered as individual pages.\nmy-other-post This leaf bundle has only the index.md. another-leaf-bundle This leaf bundle is nested under couple of directories. This bundle also has only the index.md. The hierarchy depth at which a leaf bundle is created does not matter, as long as it is not inside another leaf bundle.\nHeadless bundle A headless bundle is a bundle that is configured to not get published anywhere:\nIt will have no Permalink and no rendered HTML in public/. It will not be part of .Site.RegularPages, etc. But you can get it by .Site.GetPage. Here is an example:\n{{ $headless := .Site.GetPage \"/some-headless-bundle\" }} {{ $reusablePages := $headless.Resources.Match \"author*\" }} \u003ch2\u003eAuthors\u003c/h2\u003e {{ range $reusablePages }} \u003ch3\u003e{{ .Title }}\u003c/h3\u003e {{ .Content }} {{ end }} In this example, we are assuming the some-headless-bundle to be a headless bundle containing one or more page resources whose .Name matches \"author*\".\nExplanation of the above example:\nGet the some-headless-bundle Page “object”. Collect a slice of resources in this Page Bundle that matches \"author*\" using .Resources.Match. Loop through that slice of nested pages, and output their .Title and .Content. A leaf bundle can be made headless by adding below in the front matter (in the index.md):\ncontent/headless/index.md\ryaml\r \rtoml\r \rjson\r \r--- headless: true ---\r+++ headless = true +++\r{ \"headless\": true } There are many use cases of such headless page bundles:\nShared media galleries Reusable page content “snippets” Branch bundles A Branch Bundle is any directory at any hierarchy within the content/ directory, that contains at least an _index.md file.\nThis _index.md can also be directly under the content/ directory.\nHere md (markdown) is used just as an example. You can use any file type as a content resource as long as it is a content type recognized by Hugo.\nExamples of branch bundle organization content/ ├── branch-bundle-1 │ ├── branch-content1.md │ ├── branch-content2.md │ ├── image1.jpg │ ├── image2.png │ └── _index.md └── branch-bundle-2 ├── _index.md └── a-leaf-bundle └── index.md In the above example content/ directory, there are two branch bundles (and a leaf bundle):\nbranch-bundle-1 This branch bundle has the _index.md, two other content Markdown files and two image files. branch-bundle-2 This branch bundle has the _index.md and a nested leaf bundle. The hierarchy depth at which a branch bundle is created does not matter.\nThe .md extension is just an example. The extension can be .html, .json or any valid MIME type. ↩︎ ↩︎\n"},{"date":"0001-01-01","uri":"/templates/lookup-order/","title":"Template lookup order","content":"Lookup rules Hugo takes the parameters listed below into consideration when choosing a template for a given page. The templates are ordered by specificity. This should feel natural, but look at the table below for concrete examples of the different parameter variations.\nKind The page Kind (the home page is one). See the example tables below per kind. This also determines if it is a single page (i.e. a regular content page. We then look for a template in _default/single.html for HTML) or a list page (section listings, home page, taxonomy lists, taxonomy terms. We then look for a template in _default/list.html for HTML). Layout Can be set in front matter. Output Format See Custom Output Formats. An output format has both a name (e.g. rss, amp, html) and a suffix (e.g. xml, html). We prefer matches with both (e.g. index.amp.html), but look for less specific templates. Note that if the output format’s Media Type has more than one suffix defined, only the first is considered.\nLanguage We will consider a language tag in the template name. If the site language is fr, index.fr.amp.html will win over index.amp.html, but index.amp.html will be chosen before index.fr.html. Type Is value of type if set in front matter, else it is the name of the root section (e.g. “blog”). It will always have a value, so if not set, the value is “page”. Section Is relevant for section, taxonomy and term types. Templates can live in either the project’s or the themes’ layout folders, and the most specific templates will be chosen. Hugo will interleave the lookups listed below, finding the most specific one either in the project or themes.\nTarget a template You cannot change the lookup order to target a content page, but you can change a content page to target a template. Specify type, layout, or both in front matter.\nConsider this content structure:\ncontent/ ├── about.md └── contact.md Files in the root of the content directory have a content type of page. To render these pages with a unique template, create a matching subdirectory:\nlayouts/ └── page/ └── single.html But the contact page probably has a form and requires a different template. In the front matter specify layout:\ncontent/contact.md.\ryaml\r \rtoml\r \rjson\r \rlayout: contact title: Contact layout = 'contact' title = 'Contact' { \"layout\": \"contact\", \"title\": \"Contact\" } Then create the template for the contact page:\nlayouts/ └── page/ └── contact.html \u003c-- renders contact.md └── single.html \u003c-- renders about.md As a content type, the word page is vague. Perhaps miscellaneous would be better. Add type to the front matter of each page:\ncontent/about.md.\ryaml\r \rtoml\r \rjson\r \rtitle: About type: miscellaneous title = 'About' type = 'miscellaneous' { \"title\": \"About\", \"type\": \"miscellaneous\" } content/contact.md.\ryaml\r \rtoml\r \rjson\r \rlayout: contact title: Contact type: miscellaneous layout = 'contact' title = 'Contact' type = 'miscellaneous' { \"layout\": \"contact\", \"title\": \"Contact\", \"type\": \"miscellaneous\" } Now place the layouts in the corresponding directory:\nlayouts/ └── miscellaneous/ └── contact.html \u003c-- renders contact.md └── single.html \u003c-- renders about.md Home page Example\rOutputFormat\rSuffix\rTemplate Lookup Order\rHome page\rhtml\rhtml\rlayouts/index.html.htmllayouts/home.html.htmllayouts/list.html.htmllayouts/index.htmllayouts/home.htmllayouts/list.htmllayouts/_default/index.html.htmllayouts/_default/home.html.htmllayouts/_default/list.html.htmllayouts/_default/index.htmllayouts/_default/home.htmllayouts/_default/list.html\rBase template for home page\rhtml\rhtml\rlayouts/index-baseof.html.htmllayouts/home-baseof.html.htmllayouts/list-baseof.html.htmllayouts/baseof.html.htmllayouts/index-baseof.htmllayouts/home-baseof.htmllayouts/list-baseof.htmllayouts/baseof.htmllayouts/_default/index-baseof.html.htmllayouts/_default/home-baseof.html.htmllayouts/_default/list-baseof.html.htmllayouts/_default/baseof.html.htmllayouts/_default/index-baseof.htmllayouts/_default/home-baseof.htmllayouts/_default/list-baseof.htmllayouts/_default/baseof.html\rHome page with type set to \"demotype\"\rhtml\rhtml\rlayouts/demotype/index.html.htmllayouts/demotype/home.html.htmllayouts/demotype/list.html.htmllayouts/demotype/index.htmllayouts/demotype/home.htmllayouts/demotype/list.htmllayouts/index.html.htmllayouts/home.html.htmllayouts/list.html.htmllayouts/index.htmllayouts/home.htmllayouts/list.htmllayouts/_default/index.html.htmllayouts/_default/home.html.htmllayouts/_default/list.html.htmllayouts/_default/index.htmllayouts/_default/home.htmllayouts/_default/list.html\rBase template for home page with type set to \"demotype\"\rhtml\rhtml\rlayouts/demotype/index-baseof.html.htmllayouts/demotype/home-baseof.html.htmllayouts/demotype/list-baseof.html.htmllayouts/demotype/baseof.html.htmllayouts/demotype/index-baseof.htmllayouts/demotype/home-baseof.htmllayouts/demotype/list-baseof.htmllayouts/demotype/baseof.htmllayouts/index-baseof.html.htmllayouts/home-baseof.html.htmllayouts/list-baseof.html.htmllayouts/baseof.html.htmllayouts/index-baseof.htmllayouts/home-baseof.htmllayouts/list-baseof.htmllayouts/baseof.htmllayouts/_default/index-baseof.html.htmllayouts/_default/home-baseof.html.htmllayouts/_default/list-baseof.html.htmllayouts/_default/baseof.html.htmllayouts/_default/index-baseof.htmllayouts/_default/home-baseof.htmllayouts/_default/list-baseof.htmllayouts/_default/baseof.html\rHome page with layout set to \"demolayout\"\rhtml\rhtml\rlayouts/demolayout.html.htmllayouts/index.html.htmllayouts/home.html.htmllayouts/list.html.htmllayouts/demolayout.htmllayouts/index.htmllayouts/home.htmllayouts/list.htmllayouts/_default/demolayout.html.htmllayouts/_default/index.html.htmllayouts/_default/home.html.htmllayouts/_default/list.html.htmllayouts/_default/demolayout.htmllayouts/_default/index.htmllayouts/_default/home.htmllayouts/_default/list.html\rAMP home, French language\ramp\rhtml\rlayouts/index.fr.amp.htmllayouts/home.fr.amp.htmllayouts/list.fr.amp.htmllayouts/index.amp.htmllayouts/home.amp.htmllayouts/list.amp.htmllayouts/index.fr.htmllayouts/home.fr.htmllayouts/list.fr.htmllayouts/index.htmllayouts/home.htmllayouts/list.htmllayouts/_default/index.fr.amp.htmllayouts/_default/home.fr.amp.htmllayouts/_default/list.fr.amp.htmllayouts/_default/index.amp.htmllayouts/_default/home.amp.htmllayouts/_default/list.amp.htmllayouts/_default/index.fr.htmllayouts/_default/home.fr.htmllayouts/_default/list.fr.htmllayouts/_default/index.htmllayouts/_default/home.htmllayouts/_default/list.html\rJSON home\rjson\rjson\rlayouts/index.json.jsonlayouts/home.json.jsonlayouts/list.json.jsonlayouts/index.jsonlayouts/home.jsonlayouts/list.jsonlayouts/_default/index.json.jsonlayouts/_default/home.json.jsonlayouts/_default/list.json.jsonlayouts/_default/index.jsonlayouts/_default/home.jsonlayouts/_default/list.json\rRSS home\rrss\rxml\rlayouts/index.rss.xmllayouts/home.rss.xmllayouts/rss.xmllayouts/list.rss.xmllayouts/index.xmllayouts/home.xmllayouts/list.xmllayouts/_default/index.rss.xmllayouts/_default/home.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/index.xmllayouts/_default/home.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml\rSingle pages Example\rOutputFormat\rSuffix\rTemplate Lookup Order\rSingle page in \"posts\" section\rhtml\rhtml\rlayouts/posts/single.html.htmllayouts/posts/single.htmllayouts/_default/single.html.htmllayouts/_default/single.html\rBase template for single page in \"posts\" section\rhtml\rhtml\rlayouts/posts/single-baseof.html.htmllayouts/posts/baseof.html.htmllayouts/posts/single-baseof.htmllayouts/posts/baseof.htmllayouts/_default/single-baseof.html.htmllayouts/_default/baseof.html.htmllayouts/_default/single-baseof.htmllayouts/_default/baseof.html\rSingle page in \"posts\" section with layout set to \"demolayout\"\rhtml\rhtml\rlayouts/posts/demolayout.html.htmllayouts/posts/single.html.htmllayouts/posts/demolayout.htmllayouts/posts/single.htmllayouts/_default/demolayout.html.htmllayouts/_default/single.html.htmllayouts/_default/demolayout.htmllayouts/_default/single.html\rBase template for single page in \"posts\" section with layout set to \"demolayout\"\rhtml\rhtml\rlayouts/posts/demolayout-baseof.html.htmllayouts/posts/single-baseof.html.htmllayouts/posts/baseof.html.htmllayouts/posts/demolayout-baseof.htmllayouts/posts/single-baseof.htmllayouts/posts/baseof.htmllayouts/_default/demolayout-baseof.html.htmllayouts/_default/single-baseof.html.htmllayouts/_default/baseof.html.htmllayouts/_default/demolayout-baseof.htmllayouts/_default/single-baseof.htmllayouts/_default/baseof.html\rAMP single page\ramp\rhtml\rlayouts/posts/single.amp.htmllayouts/posts/single.htmllayouts/_default/single.amp.htmllayouts/_default/single.html\rAMP single page, French language\rhtml\rhtml\rlayouts/posts/single.fr.html.htmllayouts/posts/single.html.htmllayouts/posts/single.fr.htmllayouts/posts/single.htmllayouts/_default/single.fr.html.htmllayouts/_default/single.html.htmllayouts/_default/single.fr.htmllayouts/_default/single.html\rSection pages A section page is a list of pages within a given section.\nExample\rOutputFormat\rSuffix\rTemplate Lookup Order\rSection list for \"posts\"\rhtml\rhtml\rlayouts/posts/posts.html.htmllayouts/posts/section.html.htmllayouts/posts/list.html.htmllayouts/posts/posts.htmllayouts/posts/section.htmllayouts/posts/list.htmllayouts/section/posts.html.htmllayouts/section/section.html.htmllayouts/section/list.html.htmllayouts/section/posts.htmllayouts/section/section.htmllayouts/section/list.htmllayouts/_default/posts.html.htmllayouts/_default/section.html.htmllayouts/_default/list.html.htmllayouts/_default/posts.htmllayouts/_default/section.htmllayouts/_default/list.html\rSection list for \"posts\" with type set to \"blog\"\rhtml\rhtml\rlayouts/blog/posts.html.htmllayouts/blog/section.html.htmllayouts/blog/list.html.htmllayouts/blog/posts.htmllayouts/blog/section.htmllayouts/blog/list.htmllayouts/posts/posts.html.htmllayouts/posts/section.html.htmllayouts/posts/list.html.htmllayouts/posts/posts.htmllayouts/posts/section.htmllayouts/posts/list.htmllayouts/section/posts.html.htmllayouts/section/section.html.htmllayouts/section/list.html.htmllayouts/section/posts.htmllayouts/section/section.htmllayouts/section/list.htmllayouts/_default/posts.html.htmllayouts/_default/section.html.htmllayouts/_default/list.html.htmllayouts/_default/posts.htmllayouts/_default/section.htmllayouts/_default/list.html\rSection list for \"posts\" with layout set to \"demolayout\"\rhtml\rhtml\rlayouts/posts/demolayout.html.htmllayouts/posts/posts.html.htmllayouts/posts/section.html.htmllayouts/posts/list.html.htmllayouts/posts/demolayout.htmllayouts/posts/posts.htmllayouts/posts/section.htmllayouts/posts/list.htmllayouts/section/demolayout.html.htmllayouts/section/posts.html.htmllayouts/section/section.html.htmllayouts/section/list.html.htmllayouts/section/demolayout.htmllayouts/section/posts.htmllayouts/section/section.htmllayouts/section/list.htmllayouts/_default/demolayout.html.htmllayouts/_default/posts.html.htmllayouts/_default/section.html.htmllayouts/_default/list.html.htmllayouts/_default/demolayout.htmllayouts/_default/posts.htmllayouts/_default/section.htmllayouts/_default/list.html\rSection list for \"posts\"\rrss\rxml\rlayouts/posts/section.rss.xmllayouts/posts/rss.xmllayouts/posts/list.rss.xmllayouts/posts/section.xmllayouts/posts/list.xmllayouts/section/section.rss.xmllayouts/section/rss.xmllayouts/section/list.rss.xmllayouts/section/section.xmllayouts/section/list.xmllayouts/_default/section.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/section.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml\rTaxonomy pages A taxonomy page is a list of terms within a given taxonomy. The examples below assume the following site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: category: categories [taxonomies] category = 'categories' { \"taxonomies\": { \"category\": \"categories\" } } Example\rOutputFormat\rSuffix\rTemplate Lookup Order\rTaxonomy list for \"categories\"\rhtml\rhtml\rlayouts/categories/category.terms.html.htmllayouts/categories/terms.html.htmllayouts/categories/taxonomy.html.htmllayouts/categories/list.html.htmllayouts/categories/category.terms.htmllayouts/categories/terms.htmllayouts/categories/taxonomy.htmllayouts/categories/list.htmllayouts/category/category.terms.html.htmllayouts/category/terms.html.htmllayouts/category/taxonomy.html.htmllayouts/category/list.html.htmllayouts/category/category.terms.htmllayouts/category/terms.htmllayouts/category/taxonomy.htmllayouts/category/list.htmllayouts/taxonomy/category.terms.html.htmllayouts/taxonomy/terms.html.htmllayouts/taxonomy/taxonomy.html.htmllayouts/taxonomy/list.html.htmllayouts/taxonomy/category.terms.htmllayouts/taxonomy/terms.htmllayouts/taxonomy/taxonomy.htmllayouts/taxonomy/list.htmllayouts/_default/category.terms.html.htmllayouts/_default/terms.html.htmllayouts/_default/taxonomy.html.htmllayouts/_default/list.html.htmllayouts/_default/category.terms.htmllayouts/_default/terms.htmllayouts/_default/taxonomy.htmllayouts/_default/list.html\rTaxonomy list for \"categories\"\rrss\rxml\rlayouts/categories/category.terms.rss.xmllayouts/categories/terms.rss.xmllayouts/categories/taxonomy.rss.xmllayouts/categories/rss.xmllayouts/categories/list.rss.xmllayouts/categories/category.terms.xmllayouts/categories/terms.xmllayouts/categories/taxonomy.xmllayouts/categories/list.xmllayouts/category/category.terms.rss.xmllayouts/category/terms.rss.xmllayouts/category/taxonomy.rss.xmllayouts/category/rss.xmllayouts/category/list.rss.xmllayouts/category/category.terms.xmllayouts/category/terms.xmllayouts/category/taxonomy.xmllayouts/category/list.xmllayouts/taxonomy/category.terms.rss.xmllayouts/taxonomy/terms.rss.xmllayouts/taxonomy/taxonomy.rss.xmllayouts/taxonomy/rss.xmllayouts/taxonomy/list.rss.xmllayouts/taxonomy/category.terms.xmllayouts/taxonomy/terms.xmllayouts/taxonomy/taxonomy.xmllayouts/taxonomy/list.xmllayouts/_default/category.terms.rss.xmllayouts/_default/terms.rss.xmllayouts/_default/taxonomy.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/category.terms.xmllayouts/_default/terms.xmllayouts/_default/taxonomy.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml\rTerm pages A term page is a list of pages associated with a given term. The examples below assume the following site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: category: categories [taxonomies] category = 'categories' { \"taxonomies\": { \"category\": \"categories\" } } Example\rOutputFormat\rSuffix\rTemplate Lookup Order\rTerm list for \"categories\"\rhtml\rhtml\rlayouts/categories/term.html.htmllayouts/categories/category.html.htmllayouts/categories/taxonomy.html.htmllayouts/categories/list.html.htmllayouts/categories/term.htmllayouts/categories/category.htmllayouts/categories/taxonomy.htmllayouts/categories/list.htmllayouts/term/term.html.htmllayouts/term/category.html.htmllayouts/term/taxonomy.html.htmllayouts/term/list.html.htmllayouts/term/term.htmllayouts/term/category.htmllayouts/term/taxonomy.htmllayouts/term/list.htmllayouts/taxonomy/term.html.htmllayouts/taxonomy/category.html.htmllayouts/taxonomy/taxonomy.html.htmllayouts/taxonomy/list.html.htmllayouts/taxonomy/term.htmllayouts/taxonomy/category.htmllayouts/taxonomy/taxonomy.htmllayouts/taxonomy/list.htmllayouts/category/term.html.htmllayouts/category/category.html.htmllayouts/category/taxonomy.html.htmllayouts/category/list.html.htmllayouts/category/term.htmllayouts/category/category.htmllayouts/category/taxonomy.htmllayouts/category/list.htmllayouts/_default/term.html.htmllayouts/_default/category.html.htmllayouts/_default/taxonomy.html.htmllayouts/_default/list.html.htmllayouts/_default/term.htmllayouts/_default/category.htmllayouts/_default/taxonomy.htmllayouts/_default/list.html\rTerm list for \"categories\"\rrss\rxml\rlayouts/categories/term.rss.xmllayouts/categories/category.rss.xmllayouts/categories/taxonomy.rss.xmllayouts/categories/rss.xmllayouts/categories/list.rss.xmllayouts/categories/term.xmllayouts/categories/category.xmllayouts/categories/taxonomy.xmllayouts/categories/list.xmllayouts/term/term.rss.xmllayouts/term/category.rss.xmllayouts/term/taxonomy.rss.xmllayouts/term/rss.xmllayouts/term/list.rss.xmllayouts/term/term.xmllayouts/term/category.xmllayouts/term/taxonomy.xmllayouts/term/list.xmllayouts/taxonomy/term.rss.xmllayouts/taxonomy/category.rss.xmllayouts/taxonomy/taxonomy.rss.xmllayouts/taxonomy/rss.xmllayouts/taxonomy/list.rss.xmllayouts/taxonomy/term.xmllayouts/taxonomy/category.xmllayouts/taxonomy/taxonomy.xmllayouts/taxonomy/list.xmllayouts/category/term.rss.xmllayouts/category/category.rss.xmllayouts/category/taxonomy.rss.xmllayouts/category/rss.xmllayouts/category/list.rss.xmllayouts/category/term.xmllayouts/category/category.xmllayouts/category/taxonomy.xmllayouts/category/list.xmllayouts/_default/term.rss.xmllayouts/_default/category.rss.xmllayouts/_default/taxonomy.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/term.xmllayouts/_default/category.xmllayouts/_default/taxonomy.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml\r"},{"date":"0001-01-01","uri":"/hugo-pipes/transpile-sass-to-css/","title":"ToCSS","content":"Usage Transpile Sass to CSS using the LibSass transpiler included in Hugo’s extended edition, or install Dart Sass to use the latest features of the Sass language.\n{{ $opts := dict \"transpiler\" \"libsass\" \"targetPath\" \"css/style.css\" }} {{ with resources.Get \"sass/main.scss\" | toCSS $opts | minify | fingerprint }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e {{ end }} Sass has two forms of syntax: SCSS and indented. Hugo supports both.\nOptions transpiler (string) The transpiler to use, either libsass (default) or dartsass. Hugo’s extended edition includes the LibSass transpiler. To use the Dart Sass transpiler, see the installation instructions below. targetPath (string) If not set, the transformed resource’s target path will be the original path of the asset file with its extension replaced by .css. vars New in v0.109.0\r(map) A map of key/value pairs that will be available in the hugo:vars namespace. Useful for initializing Sass variables from Hugo templates. // LibSass @import \"hugo:vars\"; // Dart Sass @use \"hugo:vars\" as v; outputStyle (string) Output styles available to LibSass include nested (default), expanded, compact, and compressed. Output styles available to Dart Sass include expanded (default) and compressed. precision (int) Precision of floating point math. Not applicable to Dart Sass. enableSourceMap (bool) If true, generates a source map. sourceMapIncludeSources New in v0.108.0\r(bool) If true, embeds sources in the generated source map. Not applicable to LibSass. includePaths (slice) A slice of paths, relative to the project root, that the transpiler will use when resolving @use and @import statements. {{ $opts := dict \"transpiler\" \"dartsass\" \"targetPath\" \"css/style.css\" \"vars\" site.Params.styles \"enableSourceMap\" (not hugo.IsProduction) \"includePaths\" (slice \"node_modules/bootstrap/scss\") }} {{ with resources.Get \"sass/main.scss\" | toCSS $opts | minify | fingerprint }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e {{ end }} Dart Sass The extended version of Hugo includes LibSass to transpile Sass to CSS. In 2020, the Sass team deprecated LibSass in favor of Dart Sass.\nUse the latest features of the Sass language by installing Dart Sass in your development and production environments.\nInstallation overview Dart Sass is compatible with Hugo v0.114.0 and later.\nIf you have been using Embedded Dart Sass1 with Hugo v0.113.0 and earlier, uninstall Embedded Dart Sass, then install Dart Sass. If you have installed both, Hugo will use Dart Sass.\nIf you install Hugo as a Snap package there is no need to install Dart Sass. The Hugo Snap package includes Dart Sass.\nInstalling in a development environment When you install Dart Sass somewhere in your PATH, Hugo will find it.\nOS Package manager Site Installation Linux Homebrew brew.sh brew install sass/sass/sass Linux Snap snapcraft.io sudo snap install dart-sass macOS Homebrew brew.sh brew install sass/sass/sass Windows Chocolatey chocolatey.org choco install sass Windows Scoop scoop.sh scoop install sass You may also install prebuilt binaries for Linux, macOS, and Windows.\nRun hugo env to list the active transpilers.\nInstalling in a production environment For CI/CD deployments (e.g., GitHub Pages, GitLab Pages, Netlify, etc.) you must edit the workflow to install Dart Sass before Hugo builds the site2. Some providers allow you to use one of the package managers above, or you can download and extract one of the prebuilt binaries.\nGitHub Pages To install Dart Sass for your builds on GitHub Pages, add this step to the GitHub Pages workflow file:\n- name: Install Dart Sass run: sudo snap install dart-sass If you are using GitHub Pages for the first time with your repository, GitHub provides a starter workflow for Hugo that includes Dart Sass. This is the simplest way to get started.\nGitLab Pages To install Dart Sass for your builds on GitLab Pages, the .gitlab-ci.yml file should look something like this:\nvariables: HUGO_VERSION: 0.122.0 DART_SASS_VERSION: 1.70.0 GIT_DEPTH: 0 GIT_STRATEGY: clone GIT_SUBMODULE_STRATEGY: recursive TZ: America/Los_Angeles image: name: golang:1.20-buster pages: script: # Install Dart Sass - curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz - tar -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz - cp -r dart-sass/* /usr/local/bin - rm -rf dart-sass* # Install Hugo - curl -LJO https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb - apt install -y ./hugo_extended_${HUGO_VERSION}_linux-amd64.deb - rm hugo_extended_${HUGO_VERSION}_linux-amd64.deb # Build - hugo --gc --minify artifacts: paths: - public rules: - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH Netlify To install Dart Sass for your builds on Netlify, the netlify.toml file should look something like this:\n[build.environment] HUGO_VERSION = \"0.122.2\" DART_SASS_VERSION = \"1.70.0\" TZ = \"America/Los_Angeles\" [build] publish = \"public\" command = \"\"\"\\ curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz \u0026\u0026 \\ tar -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz \u0026\u0026 \\ rm dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz \u0026\u0026 \\ export PATH=/opt/build/repo/dart-sass:$PATH \u0026\u0026 \\ hugo --gc --minify \\ \"\"\" Example To transpile with Dart Sass, set transpiler to dartsass in the options map passed to resources.ToCSS. For example:\n{{ $opts := dict \"transpiler\" \"dartsass\" \"targetPath\" \"css/style.css\" }} {{ with resources.Get \"sass/main.scss\" | toCSS $opts | minify | fingerprint }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e {{ end }} Miscellaneous If you build Hugo from source and run mage test -v, the test will fail if you install Dart Sass as a Snap package. This is due to the Snap package’s strict confinement model.\nIn 2023, the Sass team deprecated Embedded Dart Sass in favor of Dart Sass. ↩︎\nYou do not have to do this if (a) you have not modified the assets cache location, and (b) you have not set useResourceCacheWhen to never in your site configuration, and (c) you add and commit your resources directory to your repository. ↩︎\n"},{"date":"0001-01-01","uri":"/hugo-modules/use-modules/","title":"Use Hugo Modules","content":"Prerequisite Most of the commands for Hugo Modules require a newer version of Go installed (see https://golang.org/dl/) and the relevant VCS client (e.g. Git, see https://git-scm.com/downloads/ ). If you have an “older” site running on Netlify, you may have to set GO_VERSION to 1.12 in your Environment settings.\nFor more information about Go Modules, see:\nhttps://github.com/golang/go/wiki/Modules https://blog.golang.org/using-go-modules Initialize a new module Use hugo mod init to initialize a new Hugo Module. If it fails to guess the module path, you must provide it as an argument, e.g.:\nhugo mod init github.com/gohugoio/myShortcodes Also see the CLI Doc.\nUse a module for a theme The easiest way to use a Module for a theme is to import it in the configuration.\nInitialize the hugo module system: hugo mod init github.com/\u003cyour_user\u003e/\u003cyour_project\u003e Import the theme: hugo.\ryaml\r \rtoml\r \rjson\r \rmodule: imports: - path: github.com/spf13/hyde [module] [[module.imports]] path = 'github.com/spf13/hyde' { \"module\": { \"imports\": [ { \"path\": \"github.com/spf13/hyde\" } ] } } Update modules Modules will be downloaded and added when you add them as imports to your configuration, see Module Imports.\nTo update or manage versions, you can use hugo mod get.\nSome examples:\nUpdate all modules hugo mod get -u Update all modules recursively hugo mod get -u ./... Update one module hugo mod get -u github.com/gohugoio/myShortcodes Get a specific version hugo mod get github.com/gohugoio/myShortcodes@v1.0.7 Also see the CLI Doc.\nMake and test changes in a module One way to do local development of a module imported in a project is to add a replace directive to a local directory with the source in go.mod:\nreplace github.com/bep/hugotestmods/mypartials =\u003e /Users/bep/hugotestmods/mypartials If you have the hugo server running, the configuration will be reloaded and /Users/bep/hugotestmods/mypartials put on the watch list.\nInstead of modifying the go.mod files, you can also use the modules configuration replacements option.\nPrint dependency graph Use hugo mod graph from the relevant module directory and it will print the dependency graph, including vendoring, module replacement or disabled status.\nE.g.:\nhugo mod graph github.com/bep/my-modular-site github.com/bep/hugotestmods/mymounts@v1.2.0 github.com/bep/my-modular-site github.com/bep/hugotestmods/mypartials@v1.0.7 github.com/bep/hugotestmods/mypartials@v1.0.7 github.com/bep/hugotestmods/myassets@v1.0.4 github.com/bep/hugotestmods/mypartials@v1.0.7 github.com/bep/hugotestmods/myv2@v1.0.0 DISABLED github.com/bep/my-modular-site github.com/spf13/hyde@v0.0.0-20190427180251-e36f5799b396 github.com/bep/my-modular-site github.com/bep/hugo-fresh@v1.0.1 github.com/bep/my-modular-site in-themesdir Also see the CLI Doc.\nVendor your modules hugo mod vendor will write all the module dependencies to a _vendor folder, which will then be used for all subsequent builds.\nNote that:\nYou can run hugo mod vendor on any level in the module tree. Vendoring will not store modules stored in your themes folder. Most commands accept a --ignoreVendorPaths flag, which will then not use the vendored modules in _vendor for the module paths matching the Glob pattern given. Also see the CLI Doc.\nTidy go.mod, go.sum Run hugo mod tidy to remove unused entries in go.mod and go.sum.\nAlso see the CLI Doc.\nClean module cache Run hugo mod clean to delete the entire modules cache.\nNote that you can also configure the modules cache with a maxAge, see File Caches.\nAlso see the CLI Doc.\nModule workspaces New in v0.109.0\rWorkspace support was added in Go 1.18 and Hugo got solid support for it in the v0.109.0 version.\nA common use case for a workspace is to simplify local development of a site with its theme modules.\nA workspace can be configured in a *.work file and activated with the module.workspace setting, which for this use is commonly controlled via the HUGO_MODULE_WORKSPACE OS environment variable.\nSee the hugo.work file in the Hugo Docs repo for an example:\ngo 1.20 use . use ../gohugoioTheme Using the use directive, list all the modules you want to work on, pointing to its relative location. As in the example above, it’s recommended to always include the main project (the “.”) in the list.\nWith that you can start the Hugo server with that workspace enabled:\nHUGO_MODULE_WORKSPACE=hugo.work hugo server --ignoreVendorPaths \"**\" The --ignoreVendorPaths flag is added above to ignore any of the vendored dependencies inside _vendor. If you don’t use vendoring, you don’t need that flag. But now the server is set up watching the files and directories in the workspace and you can see your local edits reloaded.\n"},{"date":"0001-01-01","uri":"/templates/base/","title":"Base templates and blocks","content":"The block keyword allows you to define the outer shell of your pages’ one or more master template(s) and then fill in or override portions as necessary.\nBase template lookup order The base template lookup order closely follows that of the template it applies to (e.g. _default/list.html).\nSee Template Lookup Order for details and examples.\nDefine the base template The following defines a simple base template at _default/baseof.html. As a default template, it is the shell from which all your pages will be rendered unless you specify another *baseof.html closer to the beginning of the lookup order.\nlayouts/_default/baseof.html\r\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003e{{ block \"title\" . }} \u003c!-- Blocks may include default content. --\u003e {{ .Site.Title }} {{ end }}\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003c!-- Code that all your templates share, like a header --\u003e {{ block \"main\" . }} \u003c!-- The part of the page that begins to differ between templates --\u003e {{ end }} {{ block \"footer\" . }} \u003c!-- More shared code, perhaps a footer but that can be overridden if need be in --\u003e {{ end }} \u003c/body\u003e \u003c/html\u003e\rOverride the base template From the above base template, you can define a default list template. The default list template will inherit all of the code defined above and can then implement its own \"main\" block from:\nlayouts/_default/list.html\r{{ define \"main\" }} \u003ch1\u003ePosts\u003c/h1\u003e {{ range .Pages }} \u003carticle\u003e \u003ch2\u003e{{ .Title }}\u003c/h2\u003e {{ .Content }} \u003c/article\u003e {{ end }} {{ end }}\rThis replaces the contents of our (basically empty) “main” block with something useful for the list template. In this case, we didn’t define a \"title\" block, so the contents from our base template remain unchanged in lists.\nCode that you put outside the block definitions can break your layout. This even includes HTML comments. For example:\n\u003c!-- Seemingly harmless HTML comment..that will break your layout at build --\u003e {{ define \"main\" }} ...your code here {{ end }} See this thread from the Hugo discussion forums.\nThe following shows how you can override both the \"main\" and \"title\" block areas from the base template with code unique to your default single page template:\nlayouts/_default/single.html\r{{ define \"title\" }} \u003c!-- This will override the default value set in baseof.html; i.e., \"{{ .Site.Title }}\" in the original example--\u003e {{ .Title }} \u0026ndash; {{ .Site.Title }} {{ end }} {{ define \"main\" }} \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ .Content }} {{ end }}\r"},{"date":"0001-01-01","uri":"/getting-started/configuration/","title":"Configure Hugo","content":"Configuration file Create a site configuration file in the root of your project directory, naming it hugo.toml, hugo.yaml, or hugo.json, with that order of precedence.\nmy-project/ └── hugo.toml With v0.109.0 and earlier the basename of the site configuration file was config instead of hugo. You can use either, but should transition to the new naming convention when practical.\nA simple example:\nhugo.\ryaml\r \rtoml\r \rjson\r \rbaseURL: https://example.org/ languageCode: en-us params: contact: email: info@example.org phone: +1 202-555-1212 subtitle: The Best Widgets on Earth title: ABC Widgets, Inc. baseURL = 'https://example.org/' languageCode = 'en-us' title = 'ABC Widgets, Inc.' [params] subtitle = 'The Best Widgets on Earth' [params.contact] email = 'info@example.org' phone = '+1 202-555-1212' { \"baseURL\": \"https://example.org/\", \"languageCode\": \"en-us\", \"params\": { \"contact\": { \"email\": \"info@example.org\", \"phone\": \"+1 202-555-1212\" }, \"subtitle\": \"The Best Widgets on Earth\" }, \"title\": \"ABC Widgets, Inc.\" } To use a different configuration file when building your site, use the --config flag:\nhugo --config other.toml Combine two or more configuration files, with left-to-right precedence:\nhugo --config a.toml,b.yaml,c.json See the specifications for each file format: TOML, YAML, and JSON.\nConfiguration directory Instead of a single site configuration file, split your configuration by environment, root configuration key, and language. For example:\nmy-project/ └── config/ ├── _default/ │ ├── hugo.toml │ ├── menus.en.toml │ ├── menus.de.toml │ └── params.toml ├── production/ │ ├── hugo.toml │ └── params.toml └── staging/ ├── hugo.toml └── params.toml The root configuration keys are build, caches, cascade, deployment, frontmatter, imaging, languages, markup, mediatypes, menus, minify, module, outputformats, outputs, params, permalinks, privacy, related, security, server, services, sitemap, and taxonomies.\nOmit the root key When splitting the configuration by root key, omit the root key in the given file. For example, these are equivalent:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: foo: bar [params] foo = 'bar' { \"params\": { \"foo\": \"bar\" } } params.\ryaml\r \rtoml\r \rjson\r \rfoo: bar foo = 'bar' { \"foo\": \"bar\" } Recursive parsing Hugo parses the config directory recursively, allowing you to organize the files into subdirectories. For example:\nmy-project/ └── config/ └── _default/ ├── navigation/ │ ├── menus.de.toml │ └── menus.en.toml └── hugo.toml Example my-project/ └── config/ ├── _default/ │ ├── hugo.toml │ ├── menus.en.toml │ ├── menus.de.toml │ └── params.toml ├── production/ │ ├── hugo.toml │ └── params.toml └── staging/ ├── hugo.toml └── params.toml Considering the structure above, when running hugo --environment staging, Hugo will use every setting from config/_default and merge staging’s on top of those.\nLet’s take an example to understand this better. Let’s say you are using Google Analytics for your website. This requires you to specify a Google tag ID in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: googleAnalytics: ID: G-XXXXXXXXX [services] [services.googleAnalytics] ID = 'G-XXXXXXXXX' { \"services\": { \"googleAnalytics\": { \"ID\": \"G-XXXXXXXXX\" } } } Now consider the following scenario:\nYou don’t want to load the analytics code when running hugo server.\nYou want to use different Google tag IDs for your production and staging environments. For example:\nG-PPPPPPPPP for production G-SSSSSSSSS for staging To satisfy these requirements, configure your site as follows:\nconfig/_default/hugo.toml\nExclude the services.googleAnalytics section. This will prevent loading of the analytics code when you run hugo server.\nBy default, Hugo sets its environment to development when running hugo server. In the absence of a config/development directory, Hugo uses the config/_default directory.\nconfig/production/hugo.toml\nInclude this section only:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: googleAnalytics: ID: G-PPPPPPPPP [services] [services.googleAnalytics] ID = 'G-PPPPPPPPP' { \"services\": { \"googleAnalytics\": { \"ID\": \"G-PPPPPPPPP\" } } } You do not need to include other parameters in this file. Include only those parameters that are specific to your production environment. Hugo will merge these parameters with the default configuration.\nBy default, Hugo sets its environment to production when running hugo. The analytics code will use the G-PPPPPPPPP tag ID.\nconfig/staging/hugo.toml\nInclude this section only:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: googleAnalytics: ID: G-SSSSSSSSS [services] [services.googleAnalytics] ID = 'G-SSSSSSSSS' { \"services\": { \"googleAnalytics\": { \"ID\": \"G-SSSSSSSSS\" } } } You do not need to include other parameters in this file. Include only those parameters that are specific to your staging environment. Hugo will merge these parameters with the default configuration.\nTo build your staging site, run hugo --environment staging. The analytics code will use the G-SSSSSSSSS tag ID.\nMerge configuration from themes The configuration value for _merge can be one of:\nnone No merge. shallow Only add values for new keys. deep Add values for new keys, merge existing. Note that you don’t need to be so verbose as in the default setup below; a _merge value higher up will be inherited if not set.\nhugo.\ryaml\r \rtoml\r \rjson\r \rbuild: _merge: none caches: _merge: none cascade: _merge: none deployment: _merge: none frontmatter: _merge: none imaging: _merge: none languages: _merge: none en: _merge: none menus: _merge: shallow params: _merge: deep markup: _merge: none mediatypes: _merge: shallow menus: _merge: shallow minify: _merge: none module: _merge: none outputformats: _merge: shallow outputs: _merge: none params: _merge: deep permalinks: _merge: none privacy: _merge: none related: _merge: none security: _merge: none server: _merge: none services: _merge: none sitemap: _merge: none taxonomies: _merge: none [build] _merge = 'none' [caches] _merge = 'none' [cascade] _merge = 'none' [deployment] _merge = 'none' [frontmatter] _merge = 'none' [imaging] _merge = 'none' [languages] _merge = 'none' [languages.en] _merge = 'none' [languages.en.menus] _merge = 'shallow' [languages.en.params] _merge = 'deep' [markup] _merge = 'none' [mediatypes] _merge = 'shallow' [menus] _merge = 'shallow' [minify] _merge = 'none' [module] _merge = 'none' [outputformats] _merge = 'shallow' [outputs] _merge = 'none' [params] _merge = 'deep' [permalinks] _merge = 'none' [privacy] _merge = 'none' [related] _merge = 'none' [security] _merge = 'none' [server] _merge = 'none' [services] _merge = 'none' [sitemap] _merge = 'none' [taxonomies] _merge = 'none' { \"build\": { \"_merge\": \"none\" }, \"caches\": { \"_merge\": \"none\" }, \"cascade\": { \"_merge\": \"none\" }, \"deployment\": { \"_merge\": \"none\" }, \"frontmatter\": { \"_merge\": \"none\" }, \"imaging\": { \"_merge\": \"none\" }, \"languages\": { \"_merge\": \"none\", \"en\": { \"_merge\": \"none\", \"menus\": { \"_merge\": \"shallow\" }, \"params\": { \"_merge\": \"deep\" } } }, \"markup\": { \"_merge\": \"none\" }, \"mediatypes\": { \"_merge\": \"shallow\" }, \"menus\": { \"_merge\": \"shallow\" }, \"minify\": { \"_merge\": \"none\" }, \"module\": { \"_merge\": \"none\" }, \"outputformats\": { \"_merge\": \"shallow\" }, \"outputs\": { \"_merge\": \"none\" }, \"params\": { \"_merge\": \"deep\" }, \"permalinks\": { \"_merge\": \"none\" }, \"privacy\": { \"_merge\": \"none\" }, \"related\": { \"_merge\": \"none\" }, \"security\": { \"_merge\": \"none\" }, \"server\": { \"_merge\": \"none\" }, \"services\": { \"_merge\": \"none\" }, \"sitemap\": { \"_merge\": \"none\" }, \"taxonomies\": { \"_merge\": \"none\" } } All configuration settings archetypeDir (string) The directory where Hugo finds archetype files (content templates). Default is archetypes. Also see Module Mounts Config for an alternative way to configure this directory (from Hugo 0.56).\nassetDir (string) The directory where Hugo finds asset files used in Hugo Pipes. Default is assets. Also see Module Mounts Config for an alternative way to configure this directory (from Hugo 0.56).\nbaseURL (string) The absolute URL (protocol, host, path, and trailing slash) of your published site (e.g., https://www.example.org/docs/).\nbuild See Configure Build.\nbuildDrafts (bool) Include drafts when building. Default is false.\nbuildExpired (bool) Include content already expired. Default is false.\nbuildFuture (bool) Include content with publishdate in the future. Default is false.\ncaches See Configure File Caches.\ncascade Pass down down default configuration values (front matter) to pages in the content tree. The options in site config is the same as in page front matter, see Front Matter Cascade.\nFor a website in a single language, define the [[cascade]] in Front Matter. For a multilingual website, define the [[cascade]] in Site Config.\nTo remain consistent and prevent unexpected behavior, do not mix these strategies.\ncanonifyURLs (bool) Enable to turn relative URLs into absolute. Default is false. See details.\ncleanDestinationDir (bool) When building, removes files from destination not found in static directories. Default is false.\ncontentDir (string) The directory from where Hugo reads content files. Default is content. Also see Module Mounts Config for an alternative way to configure this directory (from Hugo 0.56).\ncopyright (string) Copyright notice for your site, typically displayed in the footer.\ndataDir (string) The directory from where Hugo reads data files. Default is data. Also see Module Mounts Config for an alternative way to configure this directory (from Hugo 0.56).\ndefaultContentLanguage (string) Content without language indicator will default to this language. Default is en.\ndefaultContentLanguageInSubdir (bool) Render the default content language in subdir, e.g. content/en/. The site root / will then redirect to /en/. Default is false.\ndisableAliases (bool) Will disable generation of alias redirects. Note that even if disableAliases is set, the aliases themselves are preserved on the page. The motivation with this is to be able to generate 301 redirects in an .htaccess, a Netlify _redirects file or similar using a custom output format. Default is false.\ndisableHugoGeneratorInject (bool) Hugo will, by default, inject a generator meta tag in the HTML head on the home page only. You can turn it off, but we would really appreciate if you don’t, as this is a good way to watch Hugo’s popularity on the rise. Default is false.\ndisableKinds (string slice) Disable rendering of the specified page kinds, any of 404, home, page, robotstxt, rss, section, sitemap, taxonomy, or term.\ndisableLiveReload (bool) Disable automatic live reloading of browser window. Default is false.\ndisablePathToLower (bool) Do not convert the url/path to lowercase. Default is false.\nenableEmoji (bool) Enable Emoji emoticons support for page content; see the emoji shortcode quick reference guide. Default is false.\nenableGitInfo (bool) Enable .GitInfo object for each page (if the Hugo site is versioned by Git). This will then update the Lastmod parameter for each page using the last git commit date for that content file. Default is false.\nenableMissingTranslationPlaceholders (bool) Show a placeholder instead of the default value or an empty string if a translation is missing. Default is false.\nenableRobotsTXT (bool) Enable generation of robots.txt file. Default is false.\nfrontmatter See Front matter Configuration.\nhasCJKLanguage (bool) If true, auto-detect Chinese/Japanese/Korean Languages in the content. This will make .Summary and .WordCount behave correctly for CJK languages. Default is false.\nimaging See image processing configuration.\nlanguageCode (string) A language tag as defined by RFC 5646. This value is used to populate:\nThe \u003clanguage\u003e element in the internal RSS template The lang attribute of the \u003chtml\u003e element in the internal alias template languages See Configure Languages.\ndisableLanguages See Disable a Language\nmarkup See Configure Markup.\nmediaTypes See Configure Media Types.\nmenus See Menus.\nminify See Configure Minify.\nmodule Module configuration see module configuration.\nnewContentEditor (string) The editor to use when creating new content.\nnoChmod (bool) Don’t sync permission mode of files. Default is false.\nnoTimes (bool) Don’t sync modification time of files. Default is false.\noutputFormats See Configure Output Formats.\npaginate (int) Default number of elements per page in pagination. Default is 10.\npaginatePath (string) The path element used during pagination (https://example.org/page/2). Default is page.\npermalinks See Content Management.\npluralizeListTitles (bool) Pluralize titles in lists. Default is true.\npublishDir (string) The directory to where Hugo will write the final static site (the HTML files etc.). Default is public.\nrelated See Related Content.\nrelativeURLs (bool) Enable this to make all relative URLs relative to content root. Note that this does not affect absolute URLs. Default is false. See details.\nrefLinksErrorLevel (string) When using ref or relref to resolve page links and a link cannot be resolved, it will be logged with this log level. Valid values are ERROR (default) or WARNING. Any ERROR will fail the build (exit -1). Default is ERROR.\nrefLinksNotFoundURL (string) URL to be used as a placeholder when a page reference cannot be found in ref or relref. Is used as-is.\nremovePathAccents (bool) Removes non-spacing marks from composite characters in content paths. Default is false.\ncontent/post/hügó.md → https://example.org/post/hugo/ sectionPagesMenu See Menus.\nsecurity See Security Policy.\nsitemap Default sitemap configuration.\nsummaryLength (int) The length of text in words to show in a .Summary. Default is 70.\ntaxonomies See Configure Taxonomies.\ntheme See module configuration for how to import a theme.\nthemesDir (string) The directory where Hugo reads the themes from. Default is themes.\ntimeout (string) Timeout for generating page contents, specified as a duration or in seconds. Note: this is used to bail out of recursive content generation. You might need to raise this limit if your pages are slow to generate (e.g., because they require large image processing or depend on remote contents). Default is 30s.\ntimeZone (string) The time zone (or location), e.g. Europe/Oslo, used to parse front matter dates without such information and in the time function. The list of valid values may be system dependent, but should include UTC, Local, and any location in the IANA Time Zone database.\ntitle (string) Site title.\ntitleCaseStyle (string) Default is ap. See Configure Title Case.\nuglyURLs (bool) When enabled, creates URL of the form /filename.html instead of /filename/. Default is false.\nwatch (bool) Watch filesystem for changes and recreate as needed. Default is false.\nIf you are developing your site on a *nix machine, here is a handy shortcut for finding a configuration option from the command line:\ncd ~/sites/yourhugosite hugo config | grep emoji which shows output like\nenableemoji: true Configure build The build configuration section contains global build-related configuration options.\nhugo.\ryaml\r \rtoml\r \rjson\r \rbuild: buildStats: disableClasses: false disableIDs: false disableTags: false enable: false cacheBusters: - source: assets/.*\\.(js|ts|jsx|tsx) target: (js|scripts|javascript) - source: assets/.*\\.(css|sass|scss)$ target: (css|styles|scss|sass) - source: (postcss|tailwind)\\.config\\.js target: (css|styles|scss|sass) - source: assets/.*\\.(.*)$ target: $1 noJSConfigInAssets: false useResourceCacheWhen: fallback [build] noJSConfigInAssets = false useResourceCacheWhen = 'fallback' [build.buildStats] disableClasses = false disableIDs = false disableTags = false enable = false [[build.cacheBusters]] source = 'assets/.*\\.(js|ts|jsx|tsx)' target = '(js|scripts|javascript)' [[build.cacheBusters]] source = 'assets/.*\\.(css|sass|scss)$' target = '(css|styles|scss|sass)' [[build.cacheBusters]] source = '(postcss|tailwind)\\.config\\.js' target = '(css|styles|scss|sass)' [[build.cacheBusters]] source = 'assets/.*\\.(.*)$' target = '$1' { \"build\": { \"buildStats\": { \"disableClasses\": false, \"disableIDs\": false, \"disableTags\": false, \"enable\": false }, \"cacheBusters\": [ { \"source\": \"assets/.*\\\\.(js|ts|jsx|tsx)\", \"target\": \"(js|scripts|javascript)\" }, { \"source\": \"assets/.*\\\\.(css|sass|scss)$\", \"target\": \"(css|styles|scss|sass)\" }, { \"source\": \"(postcss|tailwind)\\\\.config\\\\.js\", \"target\": \"(css|styles|scss|sass)\" }, { \"source\": \"assets/.*\\\\.(.*)$\", \"target\": \"$1\" } ], \"noJSConfigInAssets\": false, \"useResourceCacheWhen\": \"fallback\" } } buildStats New in v0.115.1\rWhen enabled, creates a hugo_stats.json file in the root of your project. This file contains arrays of the class attributes, id attributes, and tags of every HTML element within your published site. Use this file as data source when removing unused CSS from your site. This process is also known as pruning, purging, or tree shaking. Exclude class attributes, id attributes, or tags from hugo_stats.json with the disableClasses, disableIDs, and disableTags keys.\nWith v0.115.0 and earlier this feature was enabled by setting writeStats to true. Although still functional, the writeStats key will be deprecated in a future release.\nGiven that CSS purging is typically limited to production builds, place the buildStats object below config/production.\nBuilt for speed, there may be “false positive” detections (e.g., HTML elements that are not HTML elements) while parsing the published site. These “false positives” are infrequent and inconsequential.\nDue to the nature of partial server builds, new HTML entities are added while the server is running, but old values will not be removed until you restart the server or run a regular hugo build.\ncachebusters See Configure Cache Busters noJSConfigInAssets Turn off writing a jsconfig.json into your /assets folder with mapping of imports from running js.Build. This file is intended to help with intellisense/navigation inside code editors such as VS Code. Note that if you do not use js.Build, no file will be written. useResourceCacheWhen When to use the cached resources in /resources/_gen for PostCSS and ToCSS. Valid values are never, always and fallback. The last value means that the cache will be tried if PostCSS/extended version is not available. Configure cache busters New in v0.112.0\rThe build.cachebusters configuration option was added to support development using Tailwind 3.x’s JIT compiler where a build configuration may look like this:\nhugo.\ryaml\r \rtoml\r \rjson\r \rbuild: buildStats: enable: true cachebusters: - source: assets/watching/hugo_stats\\.json target: styles\\.css - source: (postcss|tailwind)\\.config\\.js target: css - source: assets/.*\\.(js|ts|jsx|tsx) target: js - source: assets/.*\\.(.*)$ target: $1 [build] [build.buildStats] enable = true [[build.cachebusters]] source = 'assets/watching/hugo_stats\\.json' target = 'styles\\.css' [[build.cachebusters]] source = '(postcss|tailwind)\\.config\\.js' target = 'css' [[build.cachebusters]] source = 'assets/.*\\.(js|ts|jsx|tsx)' target = 'js' [[build.cachebusters]] source = 'assets/.*\\.(.*)$' target = '$1' { \"build\": { \"buildStats\": { \"enable\": true }, \"cachebusters\": [ { \"source\": \"assets/watching/hugo_stats\\\\.json\", \"target\": \"styles\\\\.css\" }, { \"source\": \"(postcss|tailwind)\\\\.config\\\\.js\", \"target\": \"css\" }, { \"source\": \"assets/.*\\\\.(js|ts|jsx|tsx)\", \"target\": \"js\" }, { \"source\": \"assets/.*\\\\.(.*)$\", \"target\": \"$1\" } ] } } When buildStats New in v0.115.1\ris enabled, Hugo writes a hugo_stats.json file on each build with HTML classes etc. that’s used in the rendered output. Changes to this file will trigger a rebuild of the styles.css file. You also need to add hugo_stats.json to Hugo’s server watcher. See Hugo Starter Tailwind Basic for a running example.\nsource A regexp matching file(s) relative to one of the virtual component directories in Hugo, typically assets/.... target A regexp matching the keys in the resource cache that should be expired when source changes. You can use the matching regexp groups from source in the expression, e.g. $1. Configure server This is only relevant when running hugo server, and it allows to set HTTP headers during development, which allows you to test out your Content Security Policy and similar. The configuration format matches Netlify’s with slightly more powerful Glob matching:\nhugo.\ryaml\r \rtoml\r \rjson\r \rserver: headers: - for: /** values: Content-Security-Policy: script-src localhost:1313 Referrer-Policy: strict-origin-when-cross-origin X-Content-Type-Options: nosniff X-Frame-Options: DENY X-XSS-Protection: 1; mode=block [server] [[server.headers]] for = '/**' [server.headers.values] Content-Security-Policy = 'script-src localhost:1313' Referrer-Policy = 'strict-origin-when-cross-origin' X-Content-Type-Options = 'nosniff' X-Frame-Options = 'DENY' X-XSS-Protection = '1; mode=block' { \"server\": { \"headers\": [ { \"for\": \"/**\", \"values\": { \"Content-Security-Policy\": \"script-src localhost:1313\", \"Referrer-Policy\": \"strict-origin-when-cross-origin\", \"X-Content-Type-Options\": \"nosniff\", \"X-Frame-Options\": \"DENY\", \"X-XSS-Protection\": \"1; mode=block\" } } ] } } Since this is “development only”, it may make sense to put it below the development environment:\nconfig/development/server.\ryaml\r \rtoml\r \rjson\r \rheaders: - for: /** values: Content-Security-Policy: script-src localhost:1313 Referrer-Policy: strict-origin-when-cross-origin X-Content-Type-Options: nosniff X-Frame-Options: DENY X-XSS-Protection: 1; mode=block [[headers]] for = '/**' [headers.values] Content-Security-Policy = 'script-src localhost:1313' Referrer-Policy = 'strict-origin-when-cross-origin' X-Content-Type-Options = 'nosniff' X-Frame-Options = 'DENY' X-XSS-Protection = '1; mode=block' { \"headers\": [ { \"for\": \"/**\", \"values\": { \"Content-Security-Policy\": \"script-src localhost:1313\", \"Referrer-Policy\": \"strict-origin-when-cross-origin\", \"X-Content-Type-Options\": \"nosniff\", \"X-Frame-Options\": \"DENY\", \"X-XSS-Protection\": \"1; mode=block\" } } ] } You can also specify simple redirects rules for the server. The syntax is again similar to Netlify’s.\nNote that a status code of 200 will trigger a URL rewrite, which is what you want in SPA situations, e.g:\nconfig/development/server.\ryaml\r \rtoml\r \rjson\r \rredirects: - force: false from: /myspa/** status: 200 to: /myspa/ [[redirects]] force = false from = '/myspa/**' status = 200 to = '/myspa/' { \"redirects\": [ { \"force\": false, \"from\": \"/myspa/**\", \"status\": 200, \"to\": \"/myspa/\" } ] } Setting force=true will make a redirect even if there is existing content in the path. Note that before Hugo 0.76 force was the default behavior, but this is inline with how Netlify does it.\n404 server error page New in v0.103.0\rHugo will, by default, render all 404 errors when running hugo server with the 404.html template. Note that if you have already added one or more redirects to your server configuration, you need to add the 404 redirect explicitly, e.g:\nconfig/development/server.\ryaml\r \rtoml\r \rjson\r \rredirects: - from: /** status: 404 to: /404.html [[redirects]] from = '/**' status = 404 to = '/404.html' { \"redirects\": [ { \"from\": \"/**\", \"status\": 404, \"to\": \"/404.html\" } ] } Configure title case By default, Hugo follows the capitalization rules published in the Associated Press Stylebook when creating automatic section titles, and when transforming strings with the strings.Title function.\nChange this behavior by setting titleCaseStyle in your site configuration to any of the values below:\nap Use the capitalization rules published in the Associated Press Stylebook. chicago Use the capitalization rules published in the Chicago Manual of Style. go Capitalize the first letter of every word. firstupper Capitalize the first letter of the first word. none Disable transformation of automatic section titles, and disable the transformation performed by the strings.Title function. This is useful if you would prefer to manually capitalize section titles as needed, and to bypass opinionated theme usage of the strings.Title function. Configuration environment variables HUGO_NUMWORKERMULTIPLIER Can be set to increase or reduce the number of workers used in parallel processing in Hugo. If not set, the number of logical CPUs will be used. Configure with environment variables In addition to the 3 configuration options already mentioned, configuration key-values can be defined through operating system environment variables.\nFor example, the following command will effectively set a website’s title on Unix-like systems:\n$ env HUGO_TITLE=\"Some Title\" hugo This is really useful if you use a service such as Netlify to deploy your site. Look at the Hugo docs Netlify configuration file for an example.\nNames must be prefixed with HUGO_ and the configuration key must be set in uppercase when setting operating system environment variables.\nTo set configuration parameters, prefix the name with HUGO_PARAMS_\nIf you are using snake_cased variable names, the above will not work. Hugo determines the delimiter to use by the first character after HUGO. This allows you to define environment variables on the form HUGOxPARAMSxAPI_KEY=abcdefgh, using any allowed delimiter.\nIgnore content and data files when rendering This works, but we recommend you use the newer and more powerful includeFiles and excludeFiles mount options.\nTo exclude specific files from the content, data, and i18n directories when rendering your site, set ignoreFiles to one or more regular expressions to match against the absolute file path.\nTo ignore files ending with .foo or .boo:\nhugo.\ryaml\r \rtoml\r \rjson\r \rignoreFiles: - \\.foo$ - \\.boo$ ignoreFiles = ['\\.foo$', '\\.boo$'] { \"ignoreFiles\": [ \"\\\\.foo$\", \"\\\\.boo$\" ] } To ignore a file using the absolute file path:\nhugo.\ryaml\r \rtoml\r \rjson\r \rignoreFiles: - ^/home/user/project/content/test\\.md$ ignoreFiles = ['^/home/user/project/content/test\\.md$'] { \"ignoreFiles\": [ \"^/home/user/project/content/test\\\\.md$\" ] } Configure front matter Configure dates Dates are important in Hugo, and you can configure how Hugo assigns dates to your content pages. You do this by adding a frontmatter section to your hugo.toml.\nThe default configuration is:\nhugo.\ryaml\r \rtoml\r \rjson\r \rfrontmatter: date: - date - publishdate - pubdate - published - lastmod - modified expiryDate: - expirydate - unpublishdate lastmod: - :git - lastmod - modified - date - publishdate - pubdate - published publishDate: - publishdate - pubdate - published - date [frontmatter] date = ['date', 'publishdate', 'pubdate', 'published', 'lastmod', 'modified'] expiryDate = ['expirydate', 'unpublishdate'] lastmod = [':git', 'lastmod', 'modified', 'date', 'publishdate', 'pubdate', 'published'] publishDate = ['publishdate', 'pubdate', 'published', 'date'] { \"frontmatter\": { \"date\": [ \"date\", \"publishdate\", \"pubdate\", \"published\", \"lastmod\", \"modified\" ], \"expiryDate\": [ \"expirydate\", \"unpublishdate\" ], \"lastmod\": [ \":git\", \"lastmod\", \"modified\", \"date\", \"publishdate\", \"pubdate\", \"published\" ], \"publishDate\": [ \"publishdate\", \"pubdate\", \"published\", \"date\" ] } } If you, as an example, have a non-standard date parameter in some of your content, you can override the setting for date:\nhugo.\ryaml\r \rtoml\r \rjson\r \rfrontmatter: date: - myDate - :default [frontmatter] date = ['myDate', ':default'] { \"frontmatter\": { \"date\": [ \"myDate\", \":default\" ] } } The :default is a shortcut to the default settings. The above will set .Date to the date value in myDate if present, if not we will look in date,publishDate, lastmod and pick the first valid date.\nIn the list to the right, values starting with “:” are date handlers with a special meaning (see below). The others are just names of date parameters (case insensitive) in your front matter configuration. Also note that Hugo have some built-in aliases to the above: lastmod =\u003e modified, publishDate =\u003e pubdate, published and expiryDate =\u003e unpublishdate. With that, as an example, using pubDate as a date in front matter, will, by default, be assigned to .PublishDate.\nThe special date handlers are:\n:fileModTime Fetches the date from the content file’s last modification timestamp. An example:\nhugo.\ryaml\r \rtoml\r \rjson\r \rfrontmatter: lastmod: - lastmod - :fileModTime - :default [frontmatter] lastmod = ['lastmod', ':fileModTime', ':default'] { \"frontmatter\": { \"lastmod\": [ \"lastmod\", \":fileModTime\", \":default\" ] } } The above will try first to extract the value for .Lastmod starting with the lastmod front matter parameter, then the content file’s modification timestamp. The last, :default should not be needed here, but Hugo will finally look for a valid date in :git, date and then publishDate.\n:filename Fetches the date from the content file’s file name. For example, 2018-02-22-mypage.md will extract the date 2018-02-22. Also, if slug is not set, mypage will be used as the value for .Slug. An example:\nhugo.\ryaml\r \rtoml\r \rjson\r \rfrontmatter: date: - :filename - :default [frontmatter] date = [':filename', ':default'] { \"frontmatter\": { \"date\": [ \":filename\", \":default\" ] } } The above will try first to extract the value for .Date from the file name, then it will look in front matter parameters date, publishDate and lastly lastmod.\n:git This is the Git author date for the last revision of this content file. This will only be set if --enableGitInfo is set or enableGitInfo = true is set in site configuration. Configure additional output formats Hugo v0.20 introduced the ability to render your content to multiple output formats (e.g., to JSON, AMP html, or CSV). See Output Formats for information on how to add these values to your Hugo project’s configuration file.\nConfigure minify See the tdewolff/minify project page for details.\nDefault configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rminify: disableCSS: false disableHTML: false disableJS: false disableJSON: false disableSVG: false disableXML: false minifyOutput: false tdewolff: css: keepCSS2: true precision: 0 html: keepComments: false keepConditionalComments: false keepDefaultAttrVals: true keepDocumentTags: true keepEndTags: true keepQuotes: false keepSpecialComments: true keepWhitespace: false templateDelims: - \"\" - \"\" js: keepVarNames: false precision: 0 version: 2022 json: keepNumbers: false precision: 0 svg: keepComments: false precision: 0 xml: keepWhitespace: false [minify] disableCSS = false disableHTML = false disableJS = false disableJSON = false disableSVG = false disableXML = false minifyOutput = false [minify.tdewolff] [minify.tdewolff.css] keepCSS2 = true precision = 0 [minify.tdewolff.html] keepComments = false keepConditionalComments = false keepDefaultAttrVals = true keepDocumentTags = true keepEndTags = true keepQuotes = false keepSpecialComments = true keepWhitespace = false templateDelims = ['', ''] [minify.tdewolff.js] keepVarNames = false precision = 0 version = 2022 [minify.tdewolff.json] keepNumbers = false precision = 0 [minify.tdewolff.svg] keepComments = false precision = 0 [minify.tdewolff.xml] keepWhitespace = false { \"minify\": { \"disableCSS\": false, \"disableHTML\": false, \"disableJS\": false, \"disableJSON\": false, \"disableSVG\": false, \"disableXML\": false, \"minifyOutput\": false, \"tdewolff\": { \"css\": { \"keepCSS2\": true, \"precision\": 0 }, \"html\": { \"keepComments\": false, \"keepConditionalComments\": false, \"keepDefaultAttrVals\": true, \"keepDocumentTags\": true, \"keepEndTags\": true, \"keepQuotes\": false, \"keepSpecialComments\": true, \"keepWhitespace\": false, \"templateDelims\": [ \"\", \"\" ] }, \"js\": { \"keepVarNames\": false, \"precision\": 0, \"version\": 2022 }, \"json\": { \"keepNumbers\": false, \"precision\": 0 }, \"svg\": { \"keepComments\": false, \"precision\": 0 }, \"xml\": { \"keepWhitespace\": false } } } } Configure file caches Since Hugo 0.52 you can configure more than just the cacheDir. This is the default configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rcaches: assets: dir: :resourceDir/_gen maxAge: -1 getcsv: dir: :cacheDir/:project maxAge: -1 getjson: dir: :cacheDir/:project maxAge: -1 getresource: dir: :cacheDir/:project maxAge: -1 images: dir: :resourceDir/_gen maxAge: -1 modules: dir: :cacheDir/modules maxAge: -1 [caches] [caches.assets] dir = ':resourceDir/_gen' maxAge = -1 [caches.getcsv] dir = ':cacheDir/:project' maxAge = -1 [caches.getjson] dir = ':cacheDir/:project' maxAge = -1 [caches.getresource] dir = ':cacheDir/:project' maxAge = -1 [caches.images] dir = ':resourceDir/_gen' maxAge = -1 [caches.modules] dir = ':cacheDir/modules' maxAge = -1 { \"caches\": { \"assets\": { \"dir\": \":resourceDir/_gen\", \"maxAge\": -1 }, \"getcsv\": { \"dir\": \":cacheDir/:project\", \"maxAge\": -1 }, \"getjson\": { \"dir\": \":cacheDir/:project\", \"maxAge\": -1 }, \"getresource\": { \"dir\": \":cacheDir/:project\", \"maxAge\": -1 }, \"images\": { \"dir\": \":resourceDir/_gen\", \"maxAge\": -1 }, \"modules\": { \"dir\": \":cacheDir/modules\", \"maxAge\": -1 } } } You can override any of these cache settings in your own hugo.toml.\nThe keywords explained cacheDir (string) See Configure cacheDir. project (string) The base directory name of the current Hugo project. This means that, in its default setting, every project will have separated file caches, which means that when you do hugo --gc you will not touch files related to other Hugo projects running on the same PC. resourceDir (string) This is the value of the resourceDir configuration option. maxAge (string) This is the duration before a cache entry will be evicted, -1 means forever and 0 effectively turns that particular cache off. Uses Go’s time.Duration, so valid values are \"10s\" (10 seconds), \"10m\" (10 minutes) and \"10h\" (10 hours). dir (string) The absolute path to where the files for this cache will be stored. Allowed starting placeholders are :cacheDir and :resourceDir (see above). Configure cacheDir This is the directory where Hugo by default will store its file caches. See Configure File Caches.\nThis can be set using the cacheDir config option or via the OS env variable HUGO_CACHEDIR.\nIf this is not set, Hugo will use, in order of preference:\nIf running on Netlify: /opt/build/cache/hugo_cache/. This means that if you run your builds on Netlify, all caches configured with :cacheDir will be saved and restored on the next build. For other CI vendors, please read their documentation. For an CircleCI example, see this configuration. In a hugo_cache directory below the OS user cache directory as defined by Go’s os.UserCacheDir. On Unix systems, this is $XDG_CACHE_HOME as specified by basedir-spec-latest if non-empty, else $HOME/.cache. On MacOS, this is $HOME/Library/Caches. On Windows, this is%LocalAppData%. On Plan 9, this is $home/lib/cache. New in v0.116.0\rIn a hugo_cache_$USER directory below the OS temp dir. If you want to know the current value of cacheDir, you can run hugo config, e.g: hugo config | grep cachedir.\n"},{"date":"0001-01-01","uri":"/content-management/formats/","title":"Content formats","content":"You can put any file type into your /content directories, but Hugo uses the markup front matter value if set or the file extension (see Markup identifiers in the table below) to determine if the markup needs to be processed, e.g.:\nMarkdown converted to HTML Shortcodes processed Layout applied List of content formats The current list of content formats in Hugo:\nName Markup identifiers Comment Goldmark markdown, goldmark Note that you can set the default handler of md and markdown to something else, see Configure Markup. Emacs Org-Mode org See go-org. AsciiDoc asciidocext, adoc, ad Needs Asciidoctor installed. RST rst Needs RST installed. Pandoc pandoc, pdc Needs Pandoc installed. HTML html, htm To be treated as a content file, with layout, shortcodes etc., it must have front matter. If not, it will be copied as-is. The markup identifier is fetched from either the markup variable in front matter or from the file extension. For markup-related configuration, see Configure Markup.\nExternal helpers Some of the formats in the table above need external helpers installed on your PC. For example, for AsciiDoc files, Hugo will try to call the asciidoctor command. This means that you will have to install the associated tool on your machine to be able to use these formats.\nHugo passes reasonable default arguments to these external helpers by default:\nasciidoctor: --no-header-footer - rst2html: --leave-comments --initial-header-level=2 pandoc: --mathjax Because additional formats are external commands, generation performance will rely heavily on the performance of the external tool you are using. As this feature is still in its infancy, feedback is welcome.\nAsciidoctor The Asciidoctor community offers a wide set of tools for the AsciiDoc format that can be installed additionally to Hugo. See the Asciidoctor docs for installation instructions. Make sure that also all optional extensions like asciidoctor-diagram or asciidoctor-html5s are installed if required.\nExternal asciidoctor command requires Hugo rendering to disk to a specific destination directory. It is required to run Hugo with the command option --destination.\nSome Asciidoctor parameters can be customized in Hugo. See details.\nLearn markdown Markdown syntax is simple enough to learn in a single sitting. The following are excellent resources to get you up and running:\nDaring Fireball: Markdown, John Gruber (Creator of Markdown) Markdown Cheatsheet, Adam Pritchard Markdown Tutorial (Interactive), Garen Torikian The Markdown Guide, Matt Cone "},{"date":"0001-01-01","uri":"/troubleshooting/inspection/","title":"Data inspection","content":"Use the jsonify function to inspect a data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") .Params }}\u003c/pre\u003e { \"date\": \"2023-11-10T15:10:42-08:00\", \"draft\": false, \"iscjklanguage\": false, \"lastmod\": \"2023-11-10T15:10:42-08:00\", \"publishdate\": \"2023-11-10T15:10:42-08:00\", \"tags\": [ \"foo\", \"bar\" ], \"title\": \"My first post\" } Hugo will throw an error if you attempt to use the construct above to display context that includes a page collection. For example, in a home page template, this will fail:\n{{ jsonify (dict \"indent\" \" \") . }}\nUse the debug.Dump function to inspect data types:\n\u003cpre\u003e{{ debug.Dump .Params }}\u003c/pre\u003e maps.Params{ \"date\": time.Time{}, \"draft\": false, \"iscjklanguage\": false, \"lastmod\": time.Time{}, \"publishdate\": time.Time{}, \"tags\": []string{ \"foo\", \"bar\", }, \"title\": \"My first post\", } Use the printf function (render) or warnf function (log to console) to inspect simple data structures. The layout string below displays both value and data type.\n{{ $value := 42 }} {{ printf \"%[1]v (%[1]T)\" $value }} → 42 (int) "},{"date":"0001-01-01","uri":"/variables/menu-entry/","title":"Menu entry variables","content":"\rWe are making an effort to unify our terminology, and to use these terms consistently throughout the documentation.\nHistorically, we have inconsistently referred to the items on this page as functions, parameters, variables, or methods. They are not functions, parameters, or variables; they are methods.\nThis page will remain in place as readers become familiar with the unified terminology. See the methods section for a list of methods by object, or the methods quick reference guide.\n.Children\rReturns a collection of child menu entries, if any, under the given menu entry.\r.HasChildren\rReports whether the given menu entry has child menu entries.\r.Identifier\rReturns the identifier property of the given menu entry.\r.KeyName\rReturns the identifier property of the given menu entry, falling back to its name property.\r.Menu\rReturns the identifier of the menu that contains the given menu entry.\r.Name\rReturns the name property of the given menu entry.\r.Page\rReturns the Page object associated with the given menu entry.\r.Params\rReturns the params property of the given menu entry.\r.Parent\rReturns the parent property of the given menu entry.\r.Post\rReturns the post property of the given menu entry.\r.Pre\rReturns the pre property of the given menu entry.\r.Title\rReturns the title property of the given menu entry.\r.URL\rReturns the relative permalink of the page associated with the given menu entry, else its url property.\r.Weight\rReturns the weight property of the given menu entry.\r"},{"date":"0001-01-01","uri":"/quick-reference/methods/","title":"Methods","content":"Duration Use these methods with time.Duration values.\nAbs Returns the absolute value of the given time.Duration value. Hours Returns the time.Duration value as a floating point number of hours. Microseconds Returns the time.Duration value as an integer microsecond count. Milliseconds Returns the time.Duration value as an integer millisecond count. Minutes Returns the time.Duration value as a floating point number of minutes. Nanoseconds Returns the time.Duration value as an integer nanosecond count. Round Returns the result of rounding DURATION1 to the nearest multiple of DURATION2. Seconds Returns the time.Duration value as a floating point number of seconds. Truncate Returns the result of rounding DURATION1 toward zero to a multiple of DURATION2. Menu Use these methods when ranging through menu entries.\nByName Returns the given menu with its entries sorted by name. ByWeight Returns the given menu with its entries sorted by weight, then by name, then by identifier. Limit Returns the given menu, limited to the first N entries. Reverse Returns the given menu, reversing the sort order of its entries. Menu entry Use these methods in your menu templates.\nChildren Returns a collection of child menu entries, if any, under the given menu entry. HasChildren Reports whether the given menu entry has child menu entries. Identifier Returns the identifier property of the given menu entry. KeyName Returns the identifier property of the given menu entry, falling back to its name property. Menu Returns the identifier of the menu that contains the given menu entry. Name Returns the name property of the given menu entry. Page Returns the Page object associated with the given menu entry. Params Returns the params property of the given menu entry. Parent Returns the parent property of the given menu entry. Post Returns the post property of the given menu entry. Pre Returns the pre property of the given menu entry. Title Returns the title property of the given menu entry. URL Returns the relative permalink of the page associated with the given menu entry, else its url property. Weight Returns the weight property of the given menu entry. Page Use these methods with a Page object.\nAliases Returns the URL aliases as defined in front matter. AllTranslations Returns all translation of the given page, including the given page. AlternativeOutputFormats Returns a slice of OutputFormat objects, excluding the current output format, each representing one of the output formats enabled for the given page. Ancestors Returns a collection of Page objects, one for each ancestor section of the given page. BundleType Returns the bundle type of the given page, or an empty string if the page is not a page bundle. CodeOwners Returns of slice of code owners for the given page, derived from the CODEOWNERS file in the root of the project directory. Content Returns the rendered content of the given page. CurrentSection Returns the Page object of the section in which the given page resides. Data Returns a unique data object for each page kind. Date Returns the date of the given page. Description Returns the description of the given page as defined in front matter. Draft Reports whether the given page is a draft as defined in front matter. Eq Reports whether two Page objects are equal. ExpiryDate Returns the expiry date of the given page. File For pages backed by a file, returns file information for the given page. FirstSection Returns the Page object of the top level section of which the given page is a descendant. Fragments Returns a data structure of the fragments in the given page. FuzzyWordCount Returns the number of words in the content of the given page, rounded up to the nearest multiple of 100. GetPage Returns a Page object from the given path. GetTerms Returns a collection of term pages for terms defined on the given page in the given taxonomy, ordered according to the sequence in which they appear in front matter. GitInfo Returns Git information related to the last commit of the given page. HasMenuCurrent Reports whether the given page object matches the page object associated with one of the child menu entries under the given menu entry in the given menu. HasShortcode Reports whether the given shortcode is called by the given page. HeadingsFiltered Returns a slice of headings for each page related to the given page. InSection Reports whether the given page is in the given section. IsAncestor Reports whether PAGE1 in an ancestor of PAGE2. IsDescendant Reports whether PAGE1 in a descendant of PAGE2. IsHome Reports whether the given page is the home page. IsMenuCurrent Reports whether the given page object matches the page object associated with the given menu entry in the given menu. IsNode Reports whether the given page is a node. IsPage Reports whether the given page is a regular page. IsSection Reports whether the given page is a section page. IsTranslated Reports whether the given page has one or more translations. Keywords Returns a slice of keywords as defined in front matter. Kind Returns the kind of the given page. Language Returns the language object for the given page. Lastmod Returns the last modification date of the given page. Layout Returns the layout for the given page as defined in front matter. Len Returns the length, in bytes, of the rendered content of the given page. LinkTitle Returns the link title of the given page. Next Returns the next page in a global page collection, relative to the given page. NextInSection Returns the next page within a section, relative to the given page. OutputFormats Returns a slice of OutputFormat objects, each representing one of the output formats enabled for the given page. Page Returns the Page object of the given page. Pages Returns a collection of regular pages within the current section, and section pages of immediate descendant sections. Paginate Paginates a collection of pages. Paginator Paginates the collection of regular pages received in context. Param Returns a page parameter with the given key, falling back to a site parameter if present. Params Returns a map of custom parameters as defined in the front matter of the given page. Parent Returns the Page object of the parent section of the given page. Permalink Returns the permalink of the given page. Plain Returns the rendered content of the given page, removing all HTML tags. PlainWords Calls the Plain method, splits the result into a slice of words, and returns the slice. Prev Returns the previous page in a global page collection, relative to the given page. PrevInSection Returns the previous page within a section, relative to the given page. PublishDate Returns the publish date of the given page. RawContent Returns the raw content of the given page. ReadingTime Returns the estimated reading time, in minutes, for the given page. Ref Returns the absolute URL of the page with the given path, language, and output format. RegularPages Returns a collection of regular pages within the current section. RegularPagesRecursive Returns a collection of regular pages within the current section, and regular pages within all descendant sections. RelPermalink Returns the relative permalink of the given page. RelRef Returns the relative URL of the page with the given path, language, and output format. Render Renders the given template with the given page as context. RenderShortcodes Renders all shortcodes in the content of the given page, preserving the surrounding markup. RenderString Renders markup to HTML. Resources Returns a collection of page resources. Scratch Creates a \"scratch pad\" on the given page to store and manipulate data. Section Returns the name of the top level section in which the given page resides. Sections Returns a collection of section pages, one for each immediate descendant section of the given page. Site Returns the Site object. Sitemap Returns the sitemap settings for the given page as defined in front matter, falling back to the sitemap settings as defined in the site configuration. Sites Returns a collection of all Site objects, one for each language, ordered by language weight. Slug Returns the URL slug of the given page as defined in front matter. Store Creates a persistent \"scratch pad\" on the given page to store and manipulate data. Summary Returns the content summary of the given page. TableOfContents Returns a table of contents for the given page. Title Returns the title of the given page. TranslationKey Returns the translation key of the given page. Translations Returns all translation of the given page, excluding the current language. Truncated Reports whether the content length exceeds the summary length. Type Returns the content type of the given page. Weight Returns the weight of the given page as defined in front matter. WordCount Returns the number of words in the content of the given page. Pages Use these methods with a collection of Page objects.\nByDate Returns the given page collection sorted by date in ascending order. ByExpiryDate Returns the given page collection sorted by expiration date in ascending order. ByLanguage Returns the given page collection sorted by language in ascending order. ByLastmod Returns the given page collection sorted by last modification date in ascending order. ByLength Returns the given page collection sorted by content length in ascending order. ByLinkTitle Returns the given page collection sorted by link title in ascending order, falling back to title if link title is not defined. ByParam Returns the given page collection sorted by the given parameter in ascending order. ByPublishDate Returns the given page collection sorted by publish date in ascending order. ByTitle Returns the given page collection sorted by title in ascending order. ByWeight Returns the given page collection sorted by weight in ascending order. GroupBy Returns the given page collection grouped by the given field in ascending order. GroupByDate Returns the given page collection grouped by date in descending order. GroupByExpiryDate Returns the given page collection grouped by expiration date in descending order. GroupByLastmod Returns the given page collection grouped by last modification date in descending order. GroupByParam Returns the given page collection grouped by the given parameter in ascending order. GroupByParamDate Returns the given page collection grouped by the given date parameter in descending order. GroupByPublishDate Returns the given page collection grouped by publish date in descending order. Len Returns the number of pages in the given page collection. Limit Returns the first N pages from the given page collection. Next Returns the next page in a local page collection, relative to the given page. Prev Returns the previous page in a local page collection, relative to the given page. Related Returns a collection of pages related to the given page. Reverse Returns the given page collection in reverse order. Resource Use these methods with global, page, and remote Resource objects.\nColors Applicable to images, returns a slice of the most dominant colors using a simple histogram method. Content Returns the content of the given resource. Crop Applicable to images, returns an image resource cropped to the given dimensions without resizing. Data Applicable to resources returned by the resources.GetRemote function, returns information from the HTTP response. Err Applicable to resources returned by the resources.GetRemote function, returns an error message if the HTTP request fails, else nil. Exif Applicable to JPEG and TIFF images, returns an EXIF object containing image metadata. Fill Applicable to images, returns an image resource cropped and resized to the given dimensions. Filter Applicable to images, applies one or more image filters to the given image resource. Fit Applicable to images, returns an image resource downscaled to fit the given dimensions while maintaining aspect ratio. Height Applicable to images, returns the height of the given resource. Key Returns the unique key for the given resource, equivalent to its publishing path. MediaType Returns a media type object for the given resource. Name Returns the name of the given resource as optionally defined in front matter, falling back to a relative path or hashed file name depending on resource type. Params Returns a map of resource parameters as defined in front matter. Permalink Publishes the given resource and returns its permalink. Process Applicable to images, returns an image resource processed with the given specification. Publish Publishes the given resource. RelPermalink Publishes the given resource and returns its relative permalink. Resize Applicable to images, returns an image resource resized to the given width and/or height. ResourceType Returns the main type of the given resource's media type. Title Returns the title of the given resource as optionally defined in front matter, falling back to a relative path or hashed file name depending on resource type. Width Applicable to images, returns the width of the given resource. Shortcode Use these methods in your shortcode templates.\nGet Returns the value of the given parameter. Inner Returns the content between opening and closing shortcode tags, applicable when the shortcode call includes a closing tag. InnerDeindent Returns the content between opening and closing shortcode tags, with indentation removed, applicable when the shortcode call includes a closing tag. IsNamedParams Reports whether the shortcode call uses named parameters. Name Returns the shortcode file name, excluding the file extension. Ordinal Returns the zero-based ordinal of the shortcode in relation to its parent. Page Returns the Page object from which the shortcode was called. Params Returns a collection of the shortcode parameters. Parent Returns the parent shortcode context in nested shortcodes. Position Returns the filename and position from which the shortcode was called. Ref Returns the absolute URL of the page with the given path, language, and output format. RelRef Returns the relative URL of the page with the given path, language, and output format. Scratch Creates a \"scratch pad\" scoped to the shortcode to store and manipulate data. Site Returns the Site object. Site Use these methods with Site objects. A multilingual project will have two or more sites, one for each language.\nAllPages Returns a collection of all pages in all languages. BaseURL Returns the base URL as defined in the site configuration. BuildDrafts Reports whether the current build includes draft pages. Config Returns a subset of the site configuration. Copyright Returns the copyright notice as defined in the site configuration. Data Returns a data structure composed from the files in the data directory. DisqusShortname Returns the Disqus shortname as defined in the site configuration. GetPage Returns a Page object from the given path. GoogleAnalytics Returns the Google Analytics tracking ID as defined in the site configuration. Home Returns the home Page object for the given site. IsDevelopment Reports whether the current running environment is “development”. IsMultiLingual Reports whether the site is multilingual. IsServer Reports whether the built-in development server is running. Language Returns the language object for the given site. LanguagePrefix Returns the URL language prefix, if any, for the given site. Languages Returns a collection of language objects for all sites, ordered by language weight. LastChange Returns the last modification date of site content. MainSections Returns a slice of the main section names as defined in the site configuration, falling back to the top level section with the most pages. Menus Returns a collection of menu objects for the given site. Pages Returns a collection of all pages. Param Returns the site parameter with the given key. Params Returns a map of custom parameters as defined in the site configuration. RegularPages Returns a collection of all regular pages. Sections Returns a collection of first level section pages. Sites Returns a collection of all Site objects, one for each language, ordered by language weight. Taxonomies Returns a data structure containing the site's taxonomy objects, the terms within each taxonomy object, and the pages to which the terms are assigned. Title Returns the title as defined in the site configuration. Taxonomy Use these methods with Taxonomy objects.\nAlphabetical Returns an ordered taxonomy, sorted alphabetically by term. ByCount Returns an ordered taxonomy, sorted by the number of pages associated with each term. Count Returns the number of number of weighted pages to which the given term has been assigned. Get Returns a slice of weighted pages to which the given term has been assigned. Time Use these methods with time.Time values.\nAdd Returns the given time plus the given duration. AddDate Returns the time corresponding to adding the given number of years, months, and days to the given time.Time value. After Reports whether TIME1 is after TIME2. Before Reports whether TIME1 is before TIME2. Day Returns the day of the month of the given time.Time value. Equal Reports whether TIME1 is equal to TIME2. Format Returns a textual representation of the time.Time value formatted according to the layout string. Hour Returns the hour within the day of the given time.Time value, in the range [0, 23]. IsDST Reports whether the given time.Time value is in Daylight Savings Time. IsZero Reports whether the given time.Time value represents the zero time instant, January 1, year 1, 00:00:00 UTC. Local Returns the given time.Time value with the location set to local time. Minute Returns the minute offset within the hour of the given time.Time value, in the range [0, 59]. Month Returns the month of the year of the given time.Time value. Nanosecond Returns the nanosecond offset within the second of the given time.Time value, in the range [0, 999999999]. Second Returns the second offset within the minute of the given time.Time value, in the range [0, 59]. Sub Returns the duration computed by subtracting TIME2 from TIME1. Unix Returns the given time.Time value expressed as the number of seconds elapsed since January 1, 1970 UTC. UnixMicro Returns the given time.Time value expressed as the number of microseconds elapsed since January 1, 1970 UTC. UnixMilli Returns the given time.Time value expressed as the number of milliseconds elapsed since January 1, 1970 UTC. UnixNano Returns the given time.Time value expressed as the number of nanoseconds elapsed since January 1, 1970 UTC. UTC Returns the given time.Time value with the location set to UTC. Weekday Returns the day of the week of the given time.Time value. Year Returns the year of the given time.Time value. YearDay Returns the day of the year of the given time.Time value, in the range [1, 365] for non-leap years, and [1,366] in leap years. "},{"date":"0001-01-01","uri":"/hugo-pipes/postcss/","title":"PostCSS","content":"Setup Follow the steps below to transform CSS using any of the available PostCSS plugins.\nStep 1 Install Node.js. Step 2 Install the required Node.js packages in the root of your project. For example, to add vendor prefixes to CSS rules: npm i -D postcss postcss-cli autoprefixer Step 3 Create a PostCSS configuration file in the root of your project. You must name this file postcss.config.js or one of the other supported file names. For example: postcss.config.js\rmodule.exports = { plugins: [ require('autoprefixer') ] };\rIf you are a Windows user, and the path to your project contains a space, you must place the PostCSS configuration within the package.json file. See this example and issue #7333.\nStep 4 Place your CSS file within the assets directory. Step 5 Capture the CSS file as a resource and pipe it through resources.PostCSS (alias postCSS): layouts/partials/css.html\r{{ with resources.Get \"css/main.css\" | postCSS }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ end }}\rIf starting with a Sass file within the assets directory:\nlayouts/partials/css.html\r{{ with resources.Get \"sass/main.scss\" | toCSS | postCSS }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ end }}\rOptions The resources.PostCSS method takes an optional map of options.\nconfig (string) The directory that contains the PostCSS configuration file. Default is the root of the project directory. noMap (bool) Default is false. If true, disables inline sourcemaps. inlineImports (bool) Default is false. Enable inlining of @import statements. It does so recursively, but will only import a file once. URL imports (e.g. @import url('https://fonts.googleapis.com/css?family=Open+Sans\u0026display=swap');) and imports with media queries will be ignored. Note that this import routine does not care about the CSS spec, so you can have @import anywhere in the file. Hugo will look for imports relative to the module mount and will respect theme overrides. skipInlineImportsNotFound New in v0.99.0\r(bool) Default is false. Before Hugo 0.99.0 when inlineImports was enabled and we failed to resolve an import, we logged it as a warning. We now fail the build. If you have regular CSS imports in your CSS that you want to preserve, you can either use imports with URL or media queries (Hugo does not try to resolve those) or set skipInlineImportsNotFound to true. layouts/partials/css.html\r{{ $opts := dict \"config\" \"config-directory\" \"noMap\" true }} {{ with resources.Get \"css/main.css\" | postCSS $opts }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ end }}\rNo configuration file To avoid using a PostCSS configuration file, you can specify a minimal configuration using the options map.\nuse (string) A space-delimited list of PostCSS plugins to use. parser (string) A custom PostCSS parser. stringifier (string) A custom PostCSS stringifier. syntax (string) Custom postcss syntax. layouts/partials/css.html\r{{ $opts := dict \"use\" \"autoprefixer postcss-color-alpha\" }} {{ with resources.Get \"css/main.css\" | postCSS $opts }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ end }}\rCheck Hugo environment The current Hugo environment name (set by --environment or in configuration or OS environment) is available in the Node context, which allows constructs like this:\npostcss.config.js\rmodule.exports = { plugins: [ require('autoprefixer'), ...process.env.HUGO_ENVIRONMENT === 'production' ? [purgecss] : [] ] }\r"},{"date":"0001-01-01","uri":"/tools/search/","title":"Search tools","content":"A static website with a dynamic search function? Yes, Hugo provides an alternative to embeddable scripts from Google or other search engines for static websites. Hugo allows you to provide your visitors with a custom search function by indexing your content files directly.\nOpen source Pagefind A fully static search library that aims to perform well on large sites, while using as little of your users’ bandwidth as possible. GitHub Gist for Hugo Workflow This gist contains a simple workflow to create a search index for your static website. It uses a simple Grunt script to index all your content files and lunr.js to serve the search results. hugo-lunr A simple way to add site search to your static Hugo site using lunr.js. Hugo-lunr will create an index file of any HTML and Markdown documents in your Hugo project. hugo-lunr-zh A bit like Hugo-lunr, but Hugo-lunr-zh can help you separate the Chinese keywords. GitHub Gist for Fuse.js integration This gist demonstrates how to leverage Hugo’s existing build time processing to generate a searchable JSON index used by Fuse.js on the client-side. Although this gist uses Fuse.js for fuzzy matching, any client-side search tool capable of reading JSON indexes will work. Does not require npm, grunt, or other build-time tools except Hugo! hugo-search-index A library containing Gulp tasks and a prebuilt browser script that implements search. Gulp generates a search index from project markdown files. hugofastsearch A usability and speed update to “GitHub Gist for Fuse.js integration” — global, keyboard-optimized search. JS \u0026 Fuse.js tutorial A simple client-side search solution, using FuseJS (does not require jQuery). Hugo Lyra Hugo-Lyra is a JavaScript module to integrate Lyra into a Hugo website. It contains the server-side part to generate the index and the client-side library (optional) to bootstrap the search engine easily. Commercial Algolia Algolia’s Search API makes it easy to deliver a great search experience in your apps and websites. Algolia Search provides hosted full-text, numerical, faceted, and geolocalized search. Bonsai Bonsai is a fully-managed hosted Elasticsearch service that is fast, reliable, and simple to set up. Easily ingest your docs from Hugo into Elasticsearch following this guide from the docs. ExpertRec ExpertRec is a hosted search-as-a-service solution that is fast and scalable. Set-up and integration is extremely easy and takes only a few minutes. The search settings can be modified without coding using a dashboard. "},{"date":"0001-01-01","uri":"/about/benefits/","title":"Benefits of static site generators","content":"The purpose of website generators is to render content into HTML files. Most are “dynamic site generators.” That means the HTTP server—i.e., the program that sends files to the browser to be viewed—runs the generator to create a new HTML file every time an end user requests a page.\nOver time, dynamic site generators were programmed to cache their HTML files to prevent unnecessary delays in delivering pages to end users. A cached page is a static version of a web page.\nHugo takes caching a step further and all HTML files are rendered on your computer. You can review the files locally before copying them to the computer hosting the HTTP server. Since the HTML files aren’t generated dynamically, we say that Hugo is a static site generator.\nThis has many benefits. The most noticeable is performance. HTTP servers are very good at sending files—so good, in fact, that you can effectively serve the same number of pages with a fraction of the memory and CPU needed for a dynamic site.\nMore on static site generators “An Introduction to Static Site Generators”, David Walsh “Hugo vs. WordPress page load speed comparison: Hugo leaves WordPress in its dust”, GettingThingsTech “Static Site Generators”, O’Reilly StaticGen: Top Open-Source Static Site Generators (GitHub Stars) “Top 10 Static Website Generators”, Netlify blog “The Resurgence of Static”, dotCMS "},{"date":"0001-01-01","uri":"/hugo-modules/theme-components/","title":"Theme components","content":"\rThis section contain information that may be outdated and is in the process of being rewritten.\nSince Hugo 0.42 a project can configure a theme as a composite of as many theme components you need:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtheme: - my-shortcodes - base-theme - hyde theme = ['my-shortcodes', 'base-theme', 'hyde'] { \"theme\": [ \"my-shortcodes\", \"base-theme\", \"hyde\" ] } You can even nest this, and have the theme component itself include theme components in its own hugo.toml (theme inheritance).1\nThe theme definition example above in hugo.toml creates a theme with 3 theme components with precedence from left to right.\nFor any given file, data entry, etc., Hugo will look first in the project and then in my-shortcodes, base-theme, and lastly hyde.\nHugo uses two different algorithms to merge the file systems, depending on the file type:\nFor i18n and data files, Hugo merges deeply using the translation ID and data key inside the files. For static, layouts (templates), and archetypes files, these are merged on file level. So the left-most file will be chosen. The name used in the theme definition above must match a folder in /your-site/themes, e.g. /your-site/themes/my-shortcodes. There are plans to improve on this and get a URL scheme so this can be resolved automatically.\nAlso note that a component that is part of a theme can have its own configuration file, e.g. hugo.toml. There are currently some restrictions to what a theme component can configure:\nparams (global and per language) menu (global and per language) outputformats and mediatypes The same rules apply here: The left-most parameter/menu etc. with the same ID will win. There are some hidden and experimental namespace support in the above, which we will work to improve in the future, but theme authors are encouraged to create their own namespaces to avoid naming conflicts.\nFor themes hosted on the Hugo Themes Showcase components need to be added as git submodules that point to the directory exampleSite/themes ↩︎\n"},{"date":"0001-01-01","uri":"/contribute/themes/","title":"Themes","content":"Visit themes.gohugo.io to browse a collection of themes created by the Hugo community.\nTo submit your theme:\nRead the submission guidelines Open a pull request in the themes repository Other useful theme directories:\njamstack.club jamstackthemes.dev "},{"date":"0001-01-01","uri":"/installation/windows/","title":"Windows","content":"\rHugo v0.121.1 and later require at least Windows 10 or Windows Server 2016.\nEditions Hugo is available in two editions: standard and extended. With the extended edition you can:\nEncode to the WebP format when processing images. You can decode WebP images with either edition. Transpile Sass to CSS using the embedded LibSass transpiler. The extended edition is not required to use the Dart Sass transpiler. We recommend that you install the extended edition.\nPrerequisites Although not required in all cases, Git, Go, and Dart Sass are commonly used when working with Hugo.\nGit is required to:\nBuild Hugo from source Use the Hugo Modules feature Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as CloudCannon, Cloudflare Pages, GitHub Pages, GitLab Pages, and Netlify Go is required to:\nBuild Hugo from source Use the Hugo Modules feature Dart Sass is required to transpile Sass to CSS when using the latest features of the Sass language.\nPlease refer to the relevant documentation for installation instructions:\nGit Go Dart Sass Prebuilt binaries Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section.\nDownload the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable.\nIf you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below.\nPackage managers Chocolatey Chocolatey is a free and open-source package manager for Windows. To install the extended edition of Hugo:\nchoco install hugo-extended Scoop Scoop is a free and open-source package manager for Windows. To install the extended edition of Hugo:\nscoop install hugo-extended Winget Winget is Microsoft’s official free and open-source package manager for Windows. To install the extended edition of Hugo:\nwinget install Hugo.Hugo.Extended Build from source To build the extended edition of Hugo from source you must:\nInstall Git Install Go version 1.20 or later Install a C compiler, either GCC or Clang Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ($HOME/go or %USERPROFILE%\\go).\nThen build and test:\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest hugo version See these detailed instructions to install GCC on Windows.\nComparison Prebuilt binaries Package managers Build from source Easy to install? ✔️ ✔️ ✔️ Easy to upgrade? ✔️ ✔️ ✔️ Easy to downgrade? ✔️ ✔️ 1 ✔️ Automatic updates? ❌ ❌ 2 ❌ Latest version available? ✔️ ✔️ ✔️ Easy if a previous version is still installed. ↩︎\nPossible but requires advanced configuration. ↩︎\n"},{"date":"0001-01-01","uri":"/installation/bsd/","title":"BSD","content":"Editions Hugo is available in two editions: standard and extended. With the extended edition you can:\nEncode to the WebP format when processing images. You can decode WebP images with either edition. Transpile Sass to CSS using the embedded LibSass transpiler. The extended edition is not required to use the Dart Sass transpiler. We recommend that you install the extended edition.\nPrerequisites Although not required in all cases, Git, Go, and Dart Sass are commonly used when working with Hugo.\nGit is required to:\nBuild Hugo from source Use the Hugo Modules feature Install a theme as a Git submodule Access commit information from a local Git repository Host your site with services such as CloudCannon, Cloudflare Pages, GitHub Pages, GitLab Pages, and Netlify Go is required to:\nBuild Hugo from source Use the Hugo Modules feature Dart Sass is required to transpile Sass to CSS when using the latest features of the Sass language.\nPlease refer to the relevant documentation for installation instructions:\nGit Go Dart Sass Prebuilt binaries Prebuilt binaries are available for a variety of operating systems and architectures. Visit the latest release page, and scroll down to the Assets section.\nDownload the archive for the desired edition, operating system, and architecture Extract the archive Move the executable to the desired directory Add this directory to the PATH environment variable Verify that you have execute permission on the file Please consult your operating system documentation if you need help setting file permissions or modifying your PATH environment variable.\nIf you do not see a prebuilt binary for the desired edition, operating system, and architecture, install Hugo using one of the methods described below.\nRepository packages Most BSD derivatives maintain a repository for commonly installed applications. Please note that these repositories may not contain the latest release.\nDragonFly BSD DragonFly BSD includes Hugo in its package repository. To install the extended edition of Hugo:\nsudo pkg install gohugo FreeBSD FreeBSD includes Hugo in its package repository. To install the extended edition of Hugo:\nsudo pkg install gohugo NetBSD NetBSD includes Hugo in its package repository. To install the extended edition of Hugo:\nsudo pkgin install go-hugo OpenBSD OpenBSD includes Hugo in its package repository. This will prompt you to select which edition of Hugo to install:\ndoas pkg_add hugo Build from source To build the extended edition of Hugo from source you must:\nInstall Git Install Go version 1.20 or later Install a C compiler, either GCC or Clang Update your PATH environment variable as described in the Go documentation The install directory is controlled by the GOPATH and GOBIN environment variables. If GOBIN is set, binaries are installed to that directory. If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ($HOME/go or %USERPROFILE%\\go).\nThen build and test:\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest hugo version Comparison Prebuilt binaries Repository packages Build from source Easy to install? ✔️ ✔️ ✔️ Easy to upgrade? ✔️ varies ✔️ Easy to downgrade? ✔️ varies ✔️ Automatic updates? ❌ varies ❌ Latest version available? ✔️ varies ✔️ "},{"date":"0001-01-01","uri":"/getting-started/configuration-markup/","title":"Configure markup","content":"Default handler By default, Hugo uses Goldmark to render markdown to HTML.\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: defaultMarkdownHandler: goldmark [markup] defaultMarkdownHandler = 'goldmark' { \"markup\": { \"defaultMarkdownHandler\": \"goldmark\" } } Files with the .md or .markdown extension are processed as markdown, provided that you have not specified a different content format using the markup field in front matter.\nTo use a different renderer for markdown files, specify one of asciidocext, org, pandoc, or rst in your site configuration.\ndefaultMarkdownHandler Description asciidocext AsciiDoc goldmark Goldmark org Emacs Org Mode pandoc Pandoc rst reStructuredText To use Asciidoc, Pandoc, or reStructuredText you must install the relevant renderer and update your security policy.\nUnless you need a unique capability provided by one of the alternate markdown handlers, we strongly recommend that you use the default setting. Goldmark is fast, well maintained, conforms to the CommonMark specification, and is compatible with GitHub Flavored Markdown (GFM).\nGoldmark This is the default configuration for the Goldmark markdown renderer:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: goldmark: extensions: cjk: eastAsianLineBreaks: false eastAsianLineBreaksStyle: simple enable: false escapedSpace: false definitionList: true footnote: true linkify: true linkifyProtocol: https passthrough: delimiters: block: [] inline: [] enable: false strikethrough: true table: true taskList: true typographer: apostrophe: '\u0026rsquo;' disable: false ellipsis: '\u0026hellip;' emDash: '\u0026mdash;' enDash: '\u0026ndash;' leftAngleQuote: '\u0026laquo;' leftDoubleQuote: '\u0026ldquo;' leftSingleQuote: '\u0026lsquo;' rightAngleQuote: '\u0026raquo;' rightDoubleQuote: '\u0026rdquo;' rightSingleQuote: '\u0026rsquo;' parser: attribute: block: false title: true autoHeadingID: true autoHeadingIDType: github wrapStandAloneImageWithinParagraph: true renderer: hardWraps: false unsafe: false xhtml: false [markup] [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true linkifyProtocol = 'https' strikethrough = true table = true taskList = true [markup.goldmark.extensions.cjk] eastAsianLineBreaks = false eastAsianLineBreaksStyle = 'simple' enable = false escapedSpace = false [markup.goldmark.extensions.passthrough] enable = false [markup.goldmark.extensions.passthrough.delimiters] block = [] inline = [] [markup.goldmark.extensions.typographer] apostrophe = '\u0026rsquo;' disable = false ellipsis = '\u0026hellip;' emDash = '\u0026mdash;' enDash = '\u0026ndash;' leftAngleQuote = '\u0026laquo;' leftDoubleQuote = '\u0026ldquo;' leftSingleQuote = '\u0026lsquo;' rightAngleQuote = '\u0026raquo;' rightDoubleQuote = '\u0026rdquo;' rightSingleQuote = '\u0026rsquo;' [markup.goldmark.parser] autoHeadingID = true autoHeadingIDType = 'github' wrapStandAloneImageWithinParagraph = true [markup.goldmark.parser.attribute] block = false title = true [markup.goldmark.renderer] hardWraps = false unsafe = false xhtml = false { \"markup\": { \"goldmark\": { \"extensions\": { \"cjk\": { \"eastAsianLineBreaks\": false, \"eastAsianLineBreaksStyle\": \"simple\", \"enable\": false, \"escapedSpace\": false }, \"definitionList\": true, \"footnote\": true, \"linkify\": true, \"linkifyProtocol\": \"https\", \"passthrough\": { \"delimiters\": { \"block\": [], \"inline\": [] }, \"enable\": false }, \"strikethrough\": true, \"table\": true, \"taskList\": true, \"typographer\": { \"apostrophe\": \"\\u0026rsquo;\", \"disable\": false, \"ellipsis\": \"\\u0026hellip;\", \"emDash\": \"\\u0026mdash;\", \"enDash\": \"\\u0026ndash;\", \"leftAngleQuote\": \"\\u0026laquo;\", \"leftDoubleQuote\": \"\\u0026ldquo;\", \"leftSingleQuote\": \"\\u0026lsquo;\", \"rightAngleQuote\": \"\\u0026raquo;\", \"rightDoubleQuote\": \"\\u0026rdquo;\", \"rightSingleQuote\": \"\\u0026rsquo;\" } }, \"parser\": { \"attribute\": { \"block\": false, \"title\": true }, \"autoHeadingID\": true, \"autoHeadingIDType\": \"github\", \"wrapStandAloneImageWithinParagraph\": true }, \"renderer\": { \"hardWraps\": false, \"unsafe\": false, \"xhtml\": false } } } } For details on the extensions, refer to the Goldmark documentation.\nSome settings explained:\nhardWraps By default, Goldmark ignores newlines within a paragraph. Set to true to render newlines as \u003cbr\u003e elements. unsafe By default, Goldmark does not render raw HTML and potentially dangerous links. If you have lots of inline HTML and/or JavaScript, you may need to turn this on. typographer The typographer extension replaces certain character combinations with HTML entities as specified below: Markdown Replaced by Description ... \u0026hellip; horizontal ellipsis ' \u0026rsquo; apostrophe -- \u0026ndash; en dash --- \u0026mdash; em dash « \u0026laquo; left angle quote “ \u0026ldquo; left double quote ‘ \u0026lsquo; left single quote » \u0026raquo; right angle quote ” \u0026rdquo; right double quote ’ \u0026rsquo; right single quote attribute Enable custom attribute support for titles and blocks by adding attribute lists inside single curly brackets ({.myclass class=\"class1 class2\" }) and placing it after the Markdown element it decorates, on the same line for titles and on a new line directly below for blocks. Hugo supports adding attributes (e.g. CSS classes) to Markdown blocks, e.g. tables, lists, paragraphs etc.\nA blockquote with a CSS class:\n\u003e foo \u003e bar {.myclass} There are some current limitations: For tables you can currently only apply it to the full table, and for lists the ul/ol-nodes only, e.g.:\n* Fruit * Apple * Orange * Banana {.fruits} * Dairy * Milk * Cheese {.dairies} {.list} Note that attributes in code fences must come after the opening tag, with any other highlighting processing instruction, e.g.:\n```go {.myclass linenos=table,hl_lines=[8,\"15-17\"],linenostart=199} // ... code ``` autoHeadingIDType (“github”) The strategy used for creating auto IDs (anchor names). Available types are github, github-ascii and blackfriday. github produces GitHub-compatible IDs, github-ascii will drop any non-ASCII characters after accent normalization, and blackfriday will make the IDs compatible with Blackfriday, the default Markdown engine before Hugo 0.60. Note that if Goldmark is your default Markdown engine, this is also the strategy used in the anchorize template func. Asciidoc This is the default configuration for the AsciiDoc markdown renderer:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: asciidocExt: attributes: {} backend: html5 extensions: [] failureLevel: fatal noHeaderOrFooter: true preserveTOC: false safeMode: unsafe sectionNumbers: false trace: false verbose: false workingFolderCurrent: false [markup] [markup.asciidocExt] backend = 'html5' extensions = [] failureLevel = 'fatal' noHeaderOrFooter = true preserveTOC = false safeMode = 'unsafe' sectionNumbers = false trace = false verbose = false workingFolderCurrent = false [markup.asciidocExt.attributes] { \"markup\": { \"asciidocExt\": { \"attributes\": {}, \"backend\": \"html5\", \"extensions\": [], \"failureLevel\": \"fatal\", \"noHeaderOrFooter\": true, \"preserveTOC\": false, \"safeMode\": \"unsafe\", \"sectionNumbers\": false, \"trace\": false, \"verbose\": false, \"workingFolderCurrent\": false } } } attributes (map) Variables to be referenced in your AsciiDoc file. This is a list of variable name/value maps. See Asciidoctor’s attributes. backend: (string) Don’t change this unless you know what you are doing. extensions ([]string) Possible extensions are asciidoctor-html5s, asciidoctor-bibtex, asciidoctor-diagram, asciidoctor-interdoc-reftext, asciidoctor-katex, asciidoctor-latex, asciidoctor-mathematical, and asciidoctor-question. failureLevel (string) The minimum logging level that triggers a non-zero exit code (failure). noHeaderOrFooter (bool) Output an embeddable document, which excludes the header, the footer, and everything outside the body of the document. Don’t change this unless you know what you are doing. preserveTOC (bool) By default, Hugo removes the table of contents generated by Asciidoctor and provides it through the built-in variable .TableOfContents to enable further customization and better integration with the various Hugo themes. This option can be set to true to preserve Asciidoctor’s TOC in the generated page. safeMode (string) Safe mode level unsafe, safe, server, or secure. Don’t change this unless you know what you are doing. sectionNumbers (bool) Auto-number section titles. trace (bool) Include backtrace information on errors. verbose (bool) Verbosely print processing information and configuration file checks to stderr. workingFolderCurrent (bool) Sets the working directory to be the same as that of the AsciiDoc file being processed, so that include will work with relative paths. This setting uses the asciidoctor cli parameter –base-dir and attribute outdir=. For rendering diagrams with asciidoctor-diagram, workingFolderCurrent must be set to true. Notice that for security concerns only extensions that do not have path separators (either \\, / or .) are allowed. That means that extensions can only be invoked if they are in the Ruby’s $LOAD_PATH (ie. most likely, the extension has been installed by the user). Any extension declared relative to the website’s path will not be accepted.\nExample of how to set extensions and attributes:\n[markup.asciidocExt] extensions = [\"asciidoctor-html5s\", \"asciidoctor-diagram\"] workingFolderCurrent = true [markup.asciidocExt.attributes] my-base-url = \"https://example.com/\" my-attribute-name = \"my value\" In a complex Asciidoctor environment it is sometimes helpful to debug the exact call to your external helper with all parameters. Run Hugo with -v. You will get an output like\nINFO 2019/12/22 09:08:48 Rendering book-as-pdf.adoc with C:\\Ruby26-x64\\bin\\asciidoctor.bat using asciidoc args [--no-header-footer -r asciidoctor-html5s -b html5s -r asciidoctor-diagram --base-dir D:\\prototypes\\hugo_asciidoc_ddd\\docs -a outdir=D:\\prototypes\\hugo_asciidoc_ddd\\build -] ... Highlight This is the default highlight configuration. Note that some of these settings can be set per code block, see Syntax Highlighting.\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: highlight: anchorLineNos: false codeFences: true guessSyntax: false hl_Lines: \"\" hl_inline: false lineAnchors: \"\" lineNoStart: 1 lineNos: false lineNumbersInTable: true noClasses: true noHl: false style: monokai tabWidth: 4 [markup] [markup.highlight] anchorLineNos = false codeFences = true guessSyntax = false hl_Lines = '' hl_inline = false lineAnchors = '' lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true noHl = false style = 'monokai' tabWidth = 4 { \"markup\": { \"highlight\": { \"anchorLineNos\": false, \"codeFences\": true, \"guessSyntax\": false, \"hl_Lines\": \"\", \"hl_inline\": false, \"lineAnchors\": \"\", \"lineNoStart\": 1, \"lineNos\": false, \"lineNumbersInTable\": true, \"noClasses\": true, \"noHl\": false, \"style\": \"monokai\", \"tabWidth\": 4 } } } For style, see these galleries:\nShort snippets Long snippets For CSS, see Generate Syntax Highlighter CSS.\nTable of contents hugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: tableOfContents: endLevel: 3 ordered: false startLevel: 2 [markup] [markup.tableOfContents] endLevel = 3 ordered = false startLevel = 2 { \"markup\": { \"tableOfContents\": { \"endLevel\": 3, \"ordered\": false, \"startLevel\": 2 } } } These settings only works for the Goldmark renderer:\nstartLevel The heading level, values starting at 1 (h1), to start render the table of contents. endLevel The heading level, inclusive, to stop render the table of contents. ordered If true, generates an ordered list instead of an unordered list. Render hooks See Markdown Render Hooks.\n"},{"date":"0001-01-01","uri":"/troubleshooting/deprecation/","title":"Deprecation","content":"When a project deprecates something, they are telling its users:\nDon’t use Thing One anymore. Use Thing Two instead. We’re going to remove Thing One at some point in the future. Common reasons for deprecation:\nA feature has been replaced by a more powerful alternative. A feature contains a design flaw. A feature is considered extraneous, and will be removed in the future in order to simplify the system as a whole. A future version of the software will make major structural changes, making it impossible or impractical to support older features. Standardization or increased consistency in naming. A feature that once was available only independently is now combined with its co-feature. After the project team deprecates something in code, Hugo will:\nLog an INFO message for 6 minor releases1 Log a WARN message for another 6 minor releases Log an ERROR message and fail the build thereafter To see the INFO messages, you must use the --logLevel command line flag:\nhugo --logLevel info To limit the output to deprecation notices:\nhugo --logLevel info | grep deprecate Run the above command every time you upgrade Hugo.\nFor example, v0.1.1 =\u003e v0.2.0 is a minor release. ↩︎\n"},{"date":"0001-01-01","uri":"/content-management/diagrams/","title":"Diagrams","content":"\rNew in v0.93.0\rGoAT diagrams (ASCII) Hugo supports GoAT natively. This means that this code block:\n```goat . . . .--- 1 .-- 1 / 1 / \\ | | .---+ .-+ + / \\ .---+---. .--+--. | '--- 2 | '-- 2 / \\ 2 + + | | | | ---+ ---+ + / \\ / \\ .-+-. .-+-. .+. .+. | .--- 3 | .-- 3 \\ / 3 / \\ / \\ | | | | | | | | '---+ '-+ + 1 2 3 4 1 2 3 4 1 2 3 4 '--- 4 '-- 4 \\ 4 ``` Will be rendered as:\n1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 Mermaid diagrams Hugo currently does not provide default templates for Mermaid diagrams. But you can easily add your own. One way to do it would be to create layouts/_default/_markup/render-codeblock-mermaid.html:\n\u003cpre class=\"mermaid\"\u003e {{- .Inner | safeHTML }} \u003c/pre\u003e {{ .Page.Store.Set \"hasMermaid\" true }} And then include this snippet at the bottom of the content template (Note: below .Content as the render hook is not processed until .Content is executed):\n{{ if .Page.Store.Get \"hasMermaid\" }} \u003cscript type=\"module\"\u003e import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs'; mermaid.initialize({ startOnLoad: true }); \u003c/script\u003e {{ end }} With that you can use the mermaid language in Markdown code blocks:\n```mermaid sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! ``` Goat ASCII diagram examples Graphics 1 5 0 4 2 6 3 7 + z + y + x v 1 v P 0 X v 3 E y v e 2 R e f r a c t i o n R e f l e c t i o n Complex \u0026 A M S i o i q f b B x u j o e a ( - x d r a \u003e e f R \u003e c o C n u o b ( n r ) ) d n e e J d r o s i n N o R D t o i u a a n g d d l o i t n e D i a g o n a l s C V u e r r v t e i d c a l n o t A N C : o u l d r r i A a / I v n s i n e e h s t d - e - t r l B i h i i s i o n ' s r e q n . u * o o b t t o e l a s d ' * l i n e D o n S e e ? a r c 3 h Process P S I R T N O A P C R U E T T S S E N D A C P H R O O I C C E E S S B C P O R M O X P C L E E S X S P R E P A R A T I O N X File tree Created from https://arthursonzogni.com/Diagon/#Tree\n─ ─ ─ L i n u x ─ ┬ ├ │ │ │ │ ├ └ ─ ─ ─ ─ A D C F n e e e d b n d r i t o o a o r i n s a d ─ ┬ │ │ │ └ ─ ─ U M b i u n n t t u ─ ┬ ├ ├ └ ─ ─ ─ ─ L K X X u u u u b b b b u u u u n n n n t t t t u u u u Sequence diagram https://arthursonzogni.com/Diagon/#Sequence\n┌ │ └ ┌ │ └ ─ A ─ ─ A ─ ─ l ─ ─ l ─ ─ i ┬ │ │ │ │ │ │ ┴ i ─ ─ c ─ ─ H \u003c ─ c ─ ─ e ─ H ─ e ─ ─ e ─ ┐ │ ┘ e ─ l ─ ┐ │ ┘ l ─ l ─ l ─ o ─ o ─ ─ ─ A ─ B ─ l ─ o ─ i ─ b ─ c ─ ┌ │ └ ! ─ e ─ ┌ │ └ ─ B ─ \u003e ! ─ ─ B ─ ─ o ┬ │ │ │ │ │ │ ┴ o ─ ─ b ─ ─ b ─ ┐ │ ┘ ┐ │ ┘ Flowchart https://arthursonzogni.com/Diagon/#Flowchart\nO L _ D F _ K I _ B O _ O L _ A N _ U N _ O _ Y E _ T E _ ┌ │ └ Y W _ , _ S _ ─ I ─ O _ L _ Y _ ┌ │ └ ─ ─ U C _ Y A _ O L _ ─ L ─ ─ H ─ H _ O B _ U A _ ─ I ─ ─ A ─ U A _ _ U E _ _ B _ ─ S ─ ─ T ─ N R _ │ ▽ L _ │ ▽ S E _ │ ▽ T ┬ ▽ E ─ D T _ n _ S E _ n _ E L _ n ─ E ─ ─ ─ E S _ o _ E D _ o _ E E _ o ─ N ─ ─ Y ─ R ? _ _ E _ _ D _ ─ . ─ ─ O ─ S _ _ ' _ _ T _ ┐ │ ┘ ─ U ─ T _ _ T Y _ _ H ' _ ┐ │ ┘ A _ _ H E _ _ E N _ N _ _ E S _ _ O _ D _ _ ' _ _ ' _ _ ? _ _ ? _ _ y _ e _ y _ y _ s _ e _ e _ _ s _ s _ _ ┌ │ └ _ _ ─ W ─ _ _ ─ A ─ _ _ ─ I ─ _ _ ─ T ─ _ _ ─ , ─ _ _ ─ ─ _ _ ─ W ─ _ _ ─ H ─ _ _ ─ A ─ _ _ ─ T ─ _ _ ─ ? ─ _ _ ┐ │ ┘ _ _ _ T _ _ H _ B F _ _ E _ U O _ _ _ T L _ _ A O _ L _ _ N N _ Y O _ _ D E _ O W _ _ S _ U E _ _ Y _ D _ _ O L _ _ J _ _ U A _ │ ▽ U T _ │ │ └ _ B _ n _ S H _ n ─ ┌ │ │ └ _ C E _ o _ T E _ o ─ ─ ( A ─ _ A L _ _ M _ ─ ─ T ─ ┌ │ └ _ N E _ _ _ ─ ─ H Q ─ ─ S ─ _ D _ _ T _ ─ ─ A U ─ ─ C ─ _ S _ _ W _ ─ ─ T E ─ ─ R ─ _ E ' _ _ I _ ─ ─ S ─ ─ E ─ _ E N _ _ C _ ┬ ▽ W T ┬ ▽ W ┬ └ _ O _ _ E _ ─ ─ A I ─ ─ ─ ─ _ ' _ _ ? _ ─ ─ S O ─ ─ I ─ ─ ┌ │ │ └ _ ? _ ─ ─ N N ─ ─ T ─ ─ ─ H I ─ _ ─ ─ ' ) ─ ┐ │ ┘ ─ ┌ │ └ ─ E N ─ _ _ y ─ ─ T ─ ─ ─ L ─ ─ Y S ─ _ _ y _ e ─ ┐ │ │ ┘ ┬ │ └ ─ E ─ ─ , T ─ _ _ e _ s ─ ─ ─ ─ T ─ ─ A ─ _ _ s │ │ │ │ ┘ ─ ─ ─ ' ─ ─ I L ─ _ ┌ │ └ ─ ─ ─ S ─ ─ L ─ _ ─ G ─ ─ ─ ─ ─ ─ S I ─ _ ─ O ─ ─ ─ ─ G ─ ─ H N ─ _ ─ O ┬ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ ┘ ┬ ▽ O ┬ ▽ O G ─ _ ─ D ─ ─ ─ ─ ─ U ─ _ ┐ │ ┘ ─ ─ D ─ ─ L F ─ ┌ │ └ ─ ─ R ─ ─ D R ─ ─ G ─ ─ ─ I ─ ─ E ─ ─ O ─ ─ ─ N ─ ─ T E ─ ─ O ┬ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ ┘ ─ G ─ ─ R B ─ ─ D ─ ┐ │ ┘ ─ Y S ─ ─ ! ─ ─ D ─ ┐ │ ┘ ─ ! ─ ┐ │ │ ┘ Table https://arthursonzogni.com/Diagon/#Table\n┌ │ ├ │ ├ │ ├ │ ├ │ ├ │ ├ │ ├ │ ├ │ ├ │ ├ │ ├ │ └ ─ ─ S ─ P ─ E ─ T ─ F ─ ─ ─ ─ ─ I ─ L ─ ─ ─ Y ─ R ─ X ─ E ─ A ─ ─ ─ ─ ─ D ─ I ─ ─ ─ N ─ O ─ P ─ R ─ C ─ ─ ─ ─ ─ E ─ T ─ ─ ─ T ─ D ─ R ─ M ─ T ─ ─ ─ ─ ─ N ─ E ─ ─ ─ A ─ U ─ E ─ ─ O ─ ─ ─ ─ ─ T ─ R ─ ─ ─ X ─ C ─ S ─ ─ R ─ ─ ─ ─ ─ I ─ A ─ ─ ─ ─ T ─ S ─ ─ ─ ─ ─ ─ ─ F ─ L ─ ─ ─ ─ I ─ I ─ ─ ─ ─ ─ ─ ─ I ─ ─ ─ ─ ─ O ─ O ─ ─ ─ ─ ─ ─ ─ E ─ ─ ─ ─ ─ N ─ N ─ ─ ─ ─ ─ ─ ─ R ─ ─ ─ ─ ─ ─ ─ ─ ─ | ─ | ─ | ─ | ─ ─ ─ ─ ─ = ─ = ─ = ─ = ─ = ─ ─ ─ ─ ─ = ─ = ─ ─ ─ ─ ─ ─ ─ ─ L ─ \" ─ \" ─ \" ─ ─ ─ ─ ─ { ─ I ─ T ─ F ─ I ─ I ─ [ ─ ( ─ { ─ l ─ \" ─ ─ ─ ─ D ─ E ─ A ─ D ─ T ─ \" ─ \" ─ \" ─ e ─ \" ─ ─ ─ P ─ E ─ R ─ C ─ E ─ E ─ ─ ─ ─ t ─ \" ─ ─ ─ R ─ N ─ M ─ T ─ N ─ R ─ E ─ E ─ E ─ t ─ \" ─ ─ ─ O ─ T ─ ─ O ─ T ─ A ─ X ─ X ─ X ─ e ─ ─ ─ ─ D ─ I ─ { ─ R ─ I ─ L ─ P ─ P ─ P ─ r ─ c ─ ─ ─ U ─ F ─ ─ ─ F ─ ─ R ─ R ─ R ─ ─ h ─ ─ ─ C ─ I ─ \" ─ { ─ I ─ ─ E ─ E ─ E ─ { ─ a ─ ─ ─ T ─ E ─ | ─ ─ E ─ ─ S ─ S ─ S ─ ─ r ─ ─ ─ I ─ R ─ \" ─ F ─ R ─ ─ S ─ S ─ S ─ l ─ a ─ ─ ─ O ─ ─ ─ A ─ ─ ─ I ─ I ─ I ─ e ─ c ─ ─ ─ N ─ \" ─ T ─ C ─ ─ ─ O ─ O ─ O ─ t ─ t ─ ─ ─ ─ = ─ E ─ T ─ ─ ─ N ─ N ─ N ─ t ─ e ─ ─ ─ } ─ \" ─ R ─ O ─ ─ ─ ─ ─ ─ e ─ r ─ ─ ─ ─ ─ M ─ R ─ ─ ─ \" ─ \" ─ \" ─ r ─ ─ ─ ─ . ─ E ─ ─ ─ ─ ─ ] ─ ) ─ } ─ ─ { ─ ─ ─ ─ X ─ } ─ } ─ ─ ─ \" ─ \" ─ \" ─ } ─ ─ ─ ─ ─ P ─ ─ ─ ─ ─ ─ ─ ─ ─ c ─ ─ ─ ─ R ─ . ─ . ─ ─ ─ ─ ─ . ─ . ─ h ─ ─ ─ ─ E ─ ─ ─ ─ ─ ─ ─ ─ ─ a ─ ─ ─ ─ S ─ ─ ─ ─ ─ ─ ─ ─ ─ r ─ ─ ─ ─ S ─ ─ ─ ─ ─ ─ ─ ─ ─ a ─ ─ ─ ─ I ─ ─ ─ ─ ─ ─ ─ ─ ─ c ─ ─ ─ ─ O ─ ─ ─ ─ ─ ─ ─ ─ ─ t ─ ─ ─ ─ N ─ ─ ─ ─ ─ ─ ─ ─ ─ e ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ r ─ ─ ─ ─ \" ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ . ─ ─ ─ ─ ─ ─ ─ ─ ─ } ─ ─ ─ ─ \" ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ \" ─ ─ ─ ─ . ─ ─ ─ ─ ─ ─ ─ ─ ─ \" ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ \" ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ \" ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ . ─ ┐ │ ┤ │ ┤ │ ┤ │ ┤ │ ┤ │ ┤ │ ┤ │ ┤ │ ┤ │ ┤ │ ┤ │ ┘ "},{"date":"0001-01-01","uri":"/about/security-model/","title":"Hugo's security model","content":"Runtime security Hugo produces static output, so once built, the runtime is the browser (assuming the output is HTML) and any server (API) that you integrate with.\nBut when developing and building your site, the runtime is the hugo executable. Securing a runtime can be a real challenge.\nHugo’s main approach is that of sandboxing and a security policy with strict defaults:\nHugo has a virtual file system and only the main project (not third-party components) is allowed to mount directories or files outside the project root. Only the main project can walk symbolic links. User-defined components have read-only access to the filesystem. We shell out to some external binaries to support Asciidoctor and similar, but those binaries and their flags are predefined and disabled by default (see Security Policy). General functions to run arbitrary external OS commands have been discussed, but not implemented because of security concerns. Security policy Hugo has a built-in security policy that restricts access to os/exec, remote communication and similar.\nThe default configuration is listed below. Any build using features not in the allow list of the security policy will fail with a detailed message about what needs to be done. Most of these settings are allow lists (string or slice, Regular Expressions or none which matches nothing).\nhugo.\ryaml\r \rtoml\r \rjson\r \rsecurity: enableInlineShortcodes: false exec: allow: - ^(dart-)?sass(-embedded)?$ - ^go$ - ^npx$ - ^postcss$ osEnv: - (?i)^((HTTPS?|NO)_PROXY|PATH(EXT)?|APPDATA|TE?MP|TERM|GO\\w+|(XDG_CONFIG_)?HOME|USERPROFILE|SSH_AUTH_SOCK|DISPLAY|LANG)$ funcs: getenv: - ^HUGO_ - ^CI$ http: mediaTypes: null methods: - (?i)GET|POST urls: - .* [security] enableInlineShortcodes = false [security.exec] allow = ['^(dart-)?sass(-embedded)?$', '^go$', '^npx$', '^postcss$'] osEnv = ['(?i)^((HTTPS?|NO)_PROXY|PATH(EXT)?|APPDATA|TE?MP|TERM|GO\\w+|(XDG_CONFIG_)?HOME|USERPROFILE|SSH_AUTH_SOCK|DISPLAY|LANG)$'] [security.funcs] getenv = ['^HUGO_', '^CI$'] [security.http] methods = ['(?i)GET|POST'] urls = ['.*'] { \"security\": { \"enableInlineShortcodes\": false, \"exec\": { \"allow\": [ \"^(dart-)?sass(-embedded)?$\", \"^go$\", \"^npx$\", \"^postcss$\" ], \"osEnv\": [ \"(?i)^((HTTPS?|NO)_PROXY|PATH(EXT)?|APPDATA|TE?MP|TERM|GO\\\\w+|(XDG_CONFIG_)?HOME|USERPROFILE|SSH_AUTH_SOCK|DISPLAY|LANG)$\" ] }, \"funcs\": { \"getenv\": [ \"^HUGO_\", \"^CI$\" ] }, \"http\": { \"mediaTypes\": null, \"methods\": [ \"(?i)GET|POST\" ], \"urls\": [ \".*\" ] } } } Note that these and other configuration settings in Hugo can be overridden by the OS environment. If you want to block all remote HTTP fetching of data:\nHUGO_SECURITY_HTTP_URLS=none hugo Dependency security Hugo is built as a static binary using Go Modules to manage its dependencies. Go Modules have several safeguards, one of them being the go.sum file. This is a database of the expected cryptographic checksums of all of your dependencies, including transitive dependencies.\nHugo Modules is a feature built on top of the functionality of Go Modules. Like Go Modules, a Hugo project using Hugo Modules will have a go.sum file. We recommend that you commit this file to your version control system. The Hugo build will fail if there is a checksum mismatch, which would be an indication of dependency tampering.\nWeb application security These are the security threats as defined by OWASP.\nFor HTML output, this is the core security model:\nhttps://pkg.go.dev/html/template#hdr-Security_Model\nIn short:\nTemplate and configuration authors (you) are trusted, but the data you send in is not. This is why you sometimes need to use the safe functions, such as safeHTML, to avoid escaping of data you know is safe. There is one exception to the above, as noted in the documentation: If you enable inline shortcodes, you also say that the shortcodes and data handling in content files are trusted, as those macros are treated as pure text. It may be worth adding that Hugo is a static site generator with no concept of dynamic user input.\nFor content, the default Markdown renderer is configured to remove or escape potentially unsafe content. This behavior can be reconfigured if you trust your content.\n"},{"date":"0001-01-01","uri":"/tools/migrations/","title":"Migrate to Hugo","content":"This section highlights some projects around Hugo that are independently developed. These tools try to extend the functionality of our static site generator or help you to get started.\nTake a look at this list of migration tools if you currently use other blogging tools like Jekyll or WordPress but intend to switch to Hugo instead. They’ll take care to export your content into Hugo-friendly formats.\nJekyll Alternatively, you can use the Jekyll import command.\nJekyllToHugo A Small script for converting Jekyll blog posts to a Hugo site. ConvertToHugo Convert your blog from Jekyll to Hugo. Octopress octohug Octopress to Hugo migrator. DokuWiki dokuwiki-to-hugo Migrates your DokuWiki source pages from DokuWiki syntax to Hugo Markdown syntax. Includes extra’s like the TODO plugin. Written with extensibility in mind using python 3. Also generates a TOML header for each page. Designed to copypaste the wiki directory into your /content directory. WordPress wordpress-to-hugo-exporter A one-click WordPress plugin that converts all posts, pages, taxonomies, metadata, and settings to Markdown and YAML which can be dropped into Hugo. (Note: If you have trouble using this plugin, you - \\s-\\scan export your site for Jekyll and use Hugo’s built in Jekyll converter listed above.) blog2md Works with exported xml file of your free YOUR-TLD.wordpress.com website. It also saves approved comments to YOUR-POST-NAME-comments.md file along with posts. wordhugopress A small utility written in Java, exports the entire WordPress site from the database and resource (e.g. images) files stored locally or remotely. Therefore, migration from the backup files is possible. Supports merging of the multiple WordPress sites into a single Hugo one. Medium medium2md A simple Medium to Hugo exporter able to import stories in one command, including front matter. medium-to-hugo CLI tool written in Go to export medium posts into a Hugo compatible Markdown format. Tags and images are included. All images will be downloaded locally and linked appropriately. Tumblr tumblr-importr An importer that uses the Tumblr API to create a Hugo static site. tumblr2hugomarkdown Export all your Tumblr content to Hugo Markdown files with preserved original formatting. Tumblr to Hugo A migration tool that converts each of your Tumblr posts to a content file with a proper title and path. Furthermore, “Tumblr to Hugo” creates a CSV file with the original URL and the new path on Hugo, to help you setup the redirections. Drupal drupal2hugo Convert a Drupal site to Hugo. Joomla hugojoomla This utility written in Java takes a Joomla database and converts all the content into Markdown files. It changes any URLs that are in Joomla’s internal format and converts them to a suitable form. Blogger blogimport A tool to import from Blogger posts to Hugo. blogger-to-hugo Another tool to import Blogger posts to Hugo. It also downloads embedded images so they will be stored locally. blog2md Works with exported xml file of your YOUR-TLD.blogspot.com website. It also saves comments to YOUR-POST-NAME-comments.md file along with posts. BloggerToHugo Yet another tool to import Blogger posts to Hugo. For Windows platform only, and .NET Framework 4.5 is required. See README.md before using this tool. Contentful contentful-hugo A tool to create content-files for Hugo from content on Contentful. BlogML BlogML2Hugo A tool that helps you convert BlogML xml file to Hugo Markdown files. Users need to take care of links to attachments and images by themselves. This helps the blogs that export BlogML files (e.g. BlogEngine.NET) transform to hugo sites easily. "},{"date":"0001-01-01","uri":"/quick-reference/page-collections/","title":"Page collections","content":"Page Use these Page methods when rendering lists on section pages, taxonomy pages, term pages, and the home page.\nPAGE.Pages\rReturns a collection of regular pages within the current section, and section pages of immediate descendant sections.\rPAGE.RegularPages\rReturns a collection of regular pages within the current section.\rPAGE.RegularPagesRecursive\rReturns a collection of regular pages within the current section, and regular pages within all descendant sections.\rPAGE.Sections\rReturns a collection of section pages, one for each immediate descendant section of the given page.\rSite Use these Site methods when rendering lists on any page.\nSITE.Pages\rReturns a collection of all pages.\rSITE.RegularPages\rReturns a collection of all regular pages.\rSITE.Sections\rReturns a collection of first level section pages.\rFilter Use the where function to filter page collections.\nSort Use these methods to sort page collections.\nPAGES.ByDate\rReturns the given page collection sorted by date in ascending order.\rPAGES.ByExpiryDate\rReturns the given page collection sorted by expiration date in ascending order.\rPAGES.ByLanguage\rReturns the given page collection sorted by language in ascending order.\rPAGES.ByLastmod\rReturns the given page collection sorted by last modification date in ascending order.\rPAGES.ByLength\rReturns the given page collection sorted by content length in ascending order.\rPAGES.ByLinkTitle\rReturns the given page collection sorted by link title in ascending order, falling back to title if link title is not defined.\rPAGES.ByParam\rReturns the given page collection sorted by the given parameter in ascending order.\rPAGES.ByPublishDate\rReturns the given page collection sorted by publish date in ascending order.\rPAGES.ByTitle\rReturns the given page collection sorted by title in ascending order.\rPAGES.ByWeight\rReturns the given page collection sorted by weight in ascending order.\rPAGES.Reverse\rReturns the given page collection in reverse order.\rGroup Use these methods to group page collections.\nPAGES.GroupBy\rReturns the given page collection grouped by the given field in ascending order.\rPAGES.GroupByDate\rReturns the given page collection grouped by date in descending order.\rPAGES.GroupByExpiryDate\rReturns the given page collection grouped by expiration date in descending order.\rPAGES.GroupByLastmod\rReturns the given page collection grouped by last modification date in descending order.\rPAGES.GroupByParam\rReturns the given page collection grouped by the given parameter in ascending order.\rPAGES.GroupByParamDate\rReturns the given page collection grouped by the given date parameter in descending order.\rPAGES.GroupByPublishDate\rReturns the given page collection grouped by publish date in descending order.\rPAGES.Reverse\rReturns the given page collection in reverse order.\r"},{"date":"0001-01-01","uri":"/variables/page/","title":"Page variables","content":"\rWe are making an effort to unify our terminology, and to use these terms consistently throughout the documentation.\nHistorically, we have inconsistently referred to the items on this page as functions, parameters, variables, or methods. They are not functions, parameters, or variables; they are methods.\nThis page will remain in place as readers become familiar with the unified terminology. See the methods section for a list of methods by object, or the methods quick reference guide.\nAll methods Use any of these methods in your templates.\n.Aliases\rReturns the URL aliases as defined in front matter.\r.AllTranslations\rReturns all translation of the given page, including the given page.\r.AlternativeOutputFormats\rReturns a slice of OutputFormat objects, excluding the current output format, each representing one of the output formats enabled for the given page.\r.Ancestors\rReturns a collection of Page objects, one for each ancestor section of the given page.\r.BundleType\rReturns the bundle type of the given page, or an empty string if the page is not a page bundle.\r.CodeOwners\rReturns of slice of code owners for the given page, derived from the CODEOWNERS file in the root of the project directory.\r.Content\rReturns the rendered content of the given page.\r.CurrentSection\rReturns the Page object of the section in which the given page resides.\r.Data\rReturns a unique data object for each page kind.\r.Date\rReturns the date of the given page.\r.Description\rReturns the description of the given page as defined in front matter.\r.Draft\rReports whether the given page is a draft as defined in front matter.\r.Eq\rReports whether two Page objects are equal.\r.ExpiryDate\rReturns the expiry date of the given page.\r.File\rFor pages backed by a file, returns file information for the given page.\r.FirstSection\rReturns the Page object of the top level section of which the given page is a descendant.\r.Fragments\rReturns a data structure of the fragments in the given page.\r.FuzzyWordCount\rReturns the number of words in the content of the given page, rounded up to the nearest multiple of 100.\r.GetPage\rReturns a Page object from the given path.\r.GetTerms\rReturns a collection of term pages for terms defined on the given page in the given taxonomy, ordered according to the sequence in which they appear in front matter.\r.GitInfo\rReturns Git information related to the last commit of the given page.\r.HasMenuCurrent\rReports whether the given page object matches the page object associated with one of the child menu entries under the given menu entry in the given menu.\r.HasShortcode\rReports whether the given shortcode is called by the given page.\r.HeadingsFiltered\rReturns a slice of headings for each page related to the given page.\r.InSection\rReports whether the given page is in the given section.\r.IsAncestor\rReports whether PAGE1 in an ancestor of PAGE2.\r.IsDescendant\rReports whether PAGE1 in a descendant of PAGE2.\r.IsHome\rReports whether the given page is the home page.\r.IsMenuCurrent\rReports whether the given page object matches the page object associated with the given menu entry in the given menu.\r.IsNode\rReports whether the given page is a node.\r.IsPage\rReports whether the given page is a regular page.\r.IsSection\rReports whether the given page is a section page.\r.IsTranslated\rReports whether the given page has one or more translations.\r.Keywords\rReturns a slice of keywords as defined in front matter.\r.Kind\rReturns the kind of the given page.\r.Language\rReturns the language object for the given page.\r.Lastmod\rReturns the last modification date of the given page.\r.Layout\rReturns the layout for the given page as defined in front matter.\r.Len\rReturns the length, in bytes, of the rendered content of the given page.\r.LinkTitle\rReturns the link title of the given page.\r.Next\rReturns the next page in a global page collection, relative to the given page.\r.NextInSection\rReturns the next page within a section, relative to the given page.\r.OutputFormats\rReturns a slice of OutputFormat objects, each representing one of the output formats enabled for the given page.\r.Page\rReturns the Page object of the given page.\r.Pages\rReturns a collection of regular pages within the current section, and section pages of immediate descendant sections.\r.Paginate\rPaginates a collection of pages.\r.Paginator\rPaginates the collection of regular pages received in context.\r.Param\rReturns a page parameter with the given key, falling back to a site parameter if present.\r.Params\rReturns a map of custom parameters as defined in the front matter of the given page.\r.Parent\rReturns the Page object of the parent section of the given page.\r.Permalink\rReturns the permalink of the given page.\r.Plain\rReturns the rendered content of the given page, removing all HTML tags.\r.PlainWords\rCalls the Plain method, splits the result into a slice of words, and returns the slice.\r.Prev\rReturns the previous page in a global page collection, relative to the given page.\r.PrevInSection\rReturns the previous page within a section, relative to the given page.\r.PublishDate\rReturns the publish date of the given page.\r.RawContent\rReturns the raw content of the given page.\r.ReadingTime\rReturns the estimated reading time, in minutes, for the given page.\r.Ref\rReturns the absolute URL of the page with the given path, language, and output format.\r.RegularPages\rReturns a collection of regular pages within the current section.\r.RegularPagesRecursive\rReturns a collection of regular pages within the current section, and regular pages within all descendant sections.\r.RelPermalink\rReturns the relative permalink of the given page.\r.RelRef\rReturns the relative URL of the page with the given path, language, and output format.\r.Render\rRenders the given template with the given page as context.\r.RenderShortcodes\rRenders all shortcodes in the content of the given page, preserving the surrounding markup.\r.RenderString\rRenders markup to HTML.\r.Resources\rReturns a collection of page resources.\r.Scratch\rCreates a “scratch pad” on the given page to store and manipulate data.\r.Section\rReturns the name of the top level section in which the given page resides.\r.Sections\rReturns a collection of section pages, one for each immediate descendant section of the given page.\r.Site\rReturns the Site object.\r.Sitemap\rReturns the sitemap settings for the given page as defined in front matter, falling back to the sitemap settings as defined in the site configuration.\r.Sites\rReturns a collection of all Site objects, one for each language, ordered by language weight.\r.Slug\rReturns the URL slug of the given page as defined in front matter.\r.Store\rCreates a persistent “scratch pad” on the given page to store and manipulate data.\r.Summary\rReturns the content summary of the given page.\r.TableOfContents\rReturns a table of contents for the given page.\r.Title\rReturns the title of the given page.\r.TranslationKey\rReturns the translation key of the given page.\r.Translations\rReturns all translation of the given page, excluding the current language.\r.Truncated\rReports whether the content length exceeds the summary length.\r.Type\rReturns the content type of the given page.\r.Weight\rReturns the weight of the given page as defined in front matter.\r.WordCount\rReturns the number of words in the content of the given page.\rDates Use these methods to access content dates.\n.Date\rReturns the date of the given page.\r.ExpiryDate\rReturns the expiry date of the given page.\r.Lastmod\rReturns the last modification date of the given page.\r.PublishDate\rReturns the publish date of the given page.\rMultilingual Use these methods with your multilingual projects.\n.AllTranslations\rReturns all translation of the given page, including the given page.\r.IsTranslated\rReports whether the given page has one or more translations.\r.Language\rReturns the language object for the given page.\r.TranslationKey\rReturns the translation key of the given page.\r.Translations\rReturns all translation of the given page, excluding the current language.\rNavigation Use these methods to create navigation links between pages.\n.Next\rReturns the next page in a global page collection, relative to the given page.\r.NextInSection\rReturns the next page within a section, relative to the given page.\r.Prev\rReturns the previous page in a global page collection, relative to the given page.\r.PrevInSection\rReturns the previous page within a section, relative to the given page.\rPage collections Range through these collections when rendering lists on section pages, taxonomy pages, term pages, and the home page.\n.Pages\rReturns a collection of regular pages within the current section, and section pages of immediate descendant sections.\r.RegularPages\rReturns a collection of regular pages within the current section.\r.RegularPagesRecursive\rReturns a collection of regular pages within the current section, and regular pages within all descendant sections.\r.Sections\rReturns a collection of section pages, one for each immediate descendant section of the given page.\rParameters Use these methods to access page parameters.\n.Param\rReturns a page parameter with the given key, falling back to a site parameter if present.\r.Params\rReturns a map of custom parameters as defined in the front matter of the given page.\rSections Use these methods to access section pages, and their ancestors and descendants. See details.\n.Ancestors\rReturns a collection of Page objects, one for each ancestor section of the given page.\r.CurrentSection\rReturns the Page object of the section in which the given page resides.\r.FirstSection\rReturns the Page object of the top level section of which the given page is a descendant.\r.InSection\rReports whether the given page is in the given section.\r.IsAncestor\rReports whether PAGE1 in an ancestor of PAGE2.\r.IsDescendant\rReports whether PAGE1 in a descendant of PAGE2.\r.Parent\rReturns the Page object of the parent section of the given page.\r.Section\rReturns the name of the top level section in which the given page resides.\r.Sections\rReturns a collection of section pages, one for each immediate descendant section of the given page.\r"},{"date":"0001-01-01","uri":"/hugo-pipes/postprocess/","title":"PostProcess","content":"Usage Marking a resource with resources.PostProcess delays any transformations to after the build, typically because one or more of the steps in the transformation chain depends on the result of the build (e.g. files in public).\nA prime use case for this is CSS purging with PostCSS.\nThere are currently two limitations to this:\nThis only works in *.html templates (i.e. templates that produces HTML files).\nYou cannot manipulate the values returned from the resource’s methods. E.g. the upper in this example will not work as expected:\n{{ $css := resources.Get \"css/main.css\" }} {{ $css = $css | resources.PostCSS | minify | fingerprint | resources.PostProcess }} {{ $css.RelPermalink | upper }} CSS purging with PostCSS There are several ways to set up CSS purging with PostCSS in Hugo. If you have a simple project, you should consider going the simpler route and drop the use of resources.PostProcess and just extract keywords from the templates. See the Tailwind documentation for some examples.\nThe below configuration will write a hugo_stats.json file to the project root as part of the build. If you’re only using this for the production build, you should consider placing it below config/production.\nhugo.\ryaml\r \rtoml\r \rjson\r \rbuild: buildStats: enable: true [build] [build.buildStats] enable = true { \"build\": { \"buildStats\": { \"enable\": true } } } See the configure build documentation for details and options.\npostcss.config.js\nconst purgecss = require('@fullhuman/postcss-purgecss')({ content: [ './hugo_stats.json' ], defaultExtractor: (content) =\u003e { let els = JSON.parse(content).htmlElements; return els.tags.concat(els.classes, els.ids); } }); module.exports = { plugins: [ ...(process.env.HUGO_ENVIRONMENT === 'production' ? [ purgecss ] : []) ] }; Note that in the example above, the “CSS purge step” will only be applied to the production build. This means that you need to do something like this in your head template to build and include your CSS:\n{{ $css := resources.Get \"css/main.css\" }} {{ $css = $css | resources.PostCSS }} {{ if hugo.IsProduction }} {{ $css = $css | minify | fingerprint | resources.PostProcess }} {{ end }} \u003clink href=\"{{ $css.RelPermalink }}\" rel=\"stylesheet\" /\u003e Hugo environment variables available in PostCSS These are the environment variables Hugo passes down to PostCSS (and Babel), which allows you do do process.env.HUGO_ENVIRONMENT === 'production' ? [autoprefixer] : [] and similar:\nPWD The absolute path to the project working directory. HUGO_ENVIRONMENT The value e.g. set with hugo -e production (defaults to production for hugo and development for hugo server). HUGO_PUBLISHDIR New in v0.109.0\rThe absolute path to the publish directory (the public directory). Note that the value will always point to a directory on disk even when running hugo server in memory mode. If you write to this folder from PostCSS when running the server, you could run the server with one of these flags: hugo server --renderToDisk hugo server --renderStaticToDisk Also, Hugo will add environment variables for all files mounted below assets/_jsconfig. A default mount will be set up with files in the project root matching this regexp: (babel|postcss|tailwind)\\.config\\.js.\nThese will get environment variables named on the form HUGO_FILE_:filename: where :filename: is all upper case with periods replaced with underscore. This allows you to do this and similar:\nlet tailwindConfig = process.env.HUGO_FILE_TAILWIND_CONFIG_JS || './tailwind.config.js'; "},{"date":"0001-01-01","uri":"/templates/single-page-templates/","title":"Single page templates","content":"Single page template lookup order See Template Lookup.\nExample single page templates Content pages are of the type page and will therefore have all the page variables and site variables available to use in their templates.\nposts/single.html This single page template makes use of Hugo base templates, the .Format function for dates, the .WordCount page variable, and ranges through the single content’s specific taxonomies. with is also used to check whether the taxonomies are set in the front matter.\nlayouts/posts/single.html\r{{ define \"main\" }} \u003csection id=\"main\"\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e \u003cdiv\u003e \u003carticle id=\"content\"\u003e {{ .Content }} \u003c/article\u003e \u003c/div\u003e \u003c/section\u003e \u003caside id=\"meta\"\u003e \u003cdiv\u003e \u003csection\u003e \u003ch4 id=\"date\"\u003e {{ .Date.Format \"Mon Jan 2, 2006\" }} \u003c/h4\u003e \u003ch5 id=\"wordcount\"\u003e {{ .WordCount }} Words\u003c/h5\u003e \u003c/section\u003e {{ with .GetTerms \"topics\" }} \u003cul id=\"topics\"\u003e {{ range . }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} {{ with .GetTerms \"tags\" }} \u003cul id=\"tags\"\u003e {{ range . }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} \u003c/div\u003e \u003cdiv\u003e {{ with .PrevInSection }} \u003ca class=\"previous\" href=\"{{ .RelPermalink }}\"\u003e {{ .LinkTitle }}\u003c/a\u003e {{ end }} {{ with .NextInSection }} \u003ca class=\"next\" href=\"{{ .RelPermalink }}\"\u003e {{ .LinkTitle }}\u003c/a\u003e {{ end }} \u003c/div\u003e \u003c/aside\u003e {{ end }}\rTo easily generate new instances of a content type (e.g., new .md files in a section like project/) with preconfigured front matter, use content archetypes.\n"},{"date":"0001-01-01","uri":"/content-management/front-matter/","title":"Front matter","content":"Front matter allows you to keep metadata attached to an instance of a content type—i.e., embedded inside a content file—and is one of the many features that gives Hugo its strength.\nFront matter formats Hugo supports four formats for front matter, each with their own identifying tokens.\nTOML identified by opening and closing +++. YAML identified by opening and closing ---. JSON a single JSON object surrounded by ‘{’ and ‘}’, followed by a new line. ORG a group of Org mode keywords in the format ‘#+KEY: VALUE’. Any line that does not start with #+ ends the front matter section. Array values can either be separated into multiple lines (#+KEY: VALUE_1 and #+KEY: VALUE_2) or a whitespace separated list of strings (#+KEY[]: VALUE_1 VALUE_2). Example yaml\r \rtoml\r \rjson\r \rcategories: - Development - VIM date: \"2012-04-06\" description: spf13-vim is a cross platform distribution of vim plugins and resources for Vim. slug: spf13-vim-3-0-release-and-new-website tags: - .vimrc - plugins - spf13-vim - vim title: spf13-vim 3.0 release and new website categories = ['Development', 'VIM'] date = '2012-04-06' description = 'spf13-vim is a cross platform distribution of vim plugins and resources for Vim.' slug = 'spf13-vim-3-0-release-and-new-website' tags = ['.vimrc', 'plugins', 'spf13-vim', 'vim'] title = 'spf13-vim 3.0 release and new website' { \"categories\": [ \"Development\", \"VIM\" ], \"date\": \"2012-04-06\", \"description\": \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\", \"slug\": \"spf13-vim-3-0-release-and-new-website\", \"tags\": [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ], \"title\": \"spf13-vim 3.0 release and new website\" } Front matter variables Predefined There are a few predefined variables that Hugo is aware of. See Page Variables for how to call many of these predefined variables in your templates.\naliases An array of one or more aliases (e.g., old published paths of renamed content) that will be created in the output directory structure . See Aliases for details. audio An array of paths to audio files related to the page; used by the opengraph internal template to populate og:audio. cascade A map of front matter keys whose values are passed down to the page’s descendants unless overwritten by self or a closer ancestor’s cascade. See Front Matter Cascade for details. date The datetime assigned to this page. This is usually fetched from the date field in front matter, but this behavior is configurable. description The description for the content. draft If true, the content will not be rendered unless the --buildDrafts flag is passed to the hugo command. expiryDate The datetime at which the content should no longer be published by Hugo; expired content will not be rendered unless the --buildExpired flag is passed to the hugo command. headless If true, sets a leaf bundle to be headless. images An array of paths to images related to the page; used by internal templates such as _internal/twitter_cards.html. isCJKLanguage If true, Hugo will explicitly treat the content as a CJK language; both .Summary and .WordCount work properly in CJK languages. keywords The meta keywords for the content. layout The layout Hugo should select from the lookup order when rendering the content. If a type is not specified in the front matter, Hugo will look for the layout of the same name in the layout directory that corresponds with a content’s section. See Content Types. lastmod The datetime at which the content was last modified. linkTitle Used for creating links to content; if set, Hugo defaults to using the linkTitle before the title. markup experimental; specify \"rst\" for reStructuredText (requiresrst2html) or \"md\" (default) for Markdown. outputs Allows you to specify output formats specific to the content. See output formats. publishDate If in the future, content will not be rendered unless the --buildFuture flag is passed to hugo. resources Used for configuring page bundle resources. See Page Resources. series An array of series this page belongs to, as a subset of the series taxonomy; used by the opengraph internal template to populate og:see_also. slug Overrides the last segment of the URL path. Not applicable to section pages. See URL Management for details. summary Text used when providing a summary of the article in the .Summary page variable; details available in the content-summaries section. title The title for the content. type The type of the content; this value will be automatically derived from the directory (i.e., the section) if not specified in front matter. url Overrides the entire URL path. Applicable to regular pages and section pages. See URL Management for details. videos An array of paths to videos related to the page; used by the opengraph internal template to populate og:video. weight used for ordering your content in lists. Lower weight gets higher precedence. So content with lower weight will come first. If set, weights should be non-zero, as 0 is interpreted as an unset weight. If neither slug nor url is present and permalinks are not configured otherwise in your site configuration file, Hugo will use the file name of your content to create the output URL. See Content Organization for an explanation of paths in Hugo and URL Management for ways to customize Hugo’s default behaviors.\nUser-defined You can add fields to your front matter arbitrarily to meet your needs. These user-defined key-values are placed into a single .Params variable for use in your templates.\nThe following fields can be accessed via .Params.include_toc and .Params.show_comments, respectively. The Variables section provides more information on using Hugo’s page- and site-level variables in your templates.\nyaml\r \rtoml\r \rjson\r \rinclude_toc: true show_comments: false include_toc = true show_comments = false { \"include_toc\": true, \"show_comments\": false } Front matter cascade Any node or section can pass down to descendants a set of front matter values as long as defined underneath the reserved cascade front matter key.\nTarget specific pages The cascade block can be a slice with a optional _target keyword, allowing for multiple cascade values targeting different page sets.\nyaml\r \rtoml\r \rjson\r \rcascade: - _target: kind: page lang: en path: /blog/** background: yosemite.jpg - _target: kind: section background: goldenbridge.jpg title: Blog title = 'Blog' [[cascade]] background = 'yosemite.jpg' [cascade._target] kind = 'page' lang = 'en' path = '/blog/**' [[cascade]] background = 'goldenbridge.jpg' [cascade._target] kind = 'section' { \"cascade\": [ { \"_target\": { \"kind\": \"page\", \"lang\": \"en\", \"path\": \"/blog/**\" }, \"background\": \"yosemite.jpg\" }, { \"_target\": { \"kind\": \"section\" }, \"background\": \"goldenbridge.jpg\" } ], \"title\": \"Blog\" } Keywords available for _target:\npath A Glob pattern matching the content path below /content. Expects Unix-styled slashes. Note that this is the virtual path, so it starts at the mount root. The matching supports double-asterisks so you can match for patterns like /blog/*/** to match anything from the third level and down. kind A Glob pattern matching the Page’s Kind(s), e.g. “{home,section}”. lang A Glob pattern matching the Page’s language, e.g. “{en,sv}”. environment A Glob pattern matching the build environment, e.g. “{production,development}” Any of the above can be omitted.\nWhen making a site that supports multiple languages, defining a [[cascade]] is recommended to be done in Site Config to prevent duplication.\nIf you instead define a [[cascade]] in front matter for multiple languages, an content/XX/foo/_index.md file needs to be made on a per-language basis, with XX the glob pattern matching the Page’s language. In this case, the lang keyword is ignored.\nExample In content/blog/_index.md\nyaml\r \rtoml\r \rjson\r \rcascade: banner: images/typewriter.jpg title: Blog title = 'Blog' [cascade] banner = 'images/typewriter.jpg' { \"cascade\": { \"banner\": \"images/typewriter.jpg\" }, \"title\": \"Blog\" } With the above example the Blog section page and its descendants will return images/typewriter.jpg when .Params.banner is invoked unless:\nSaid descendant has its own banner value set Or a closer ancestor node has its own cascade.banner value set. Order content through front matter You can assign content-specific weight in the front matter of your content. These values are especially useful for ordering in list views. You can use weight for ordering of content and the convention of \u003cTAXONOMY\u003e_weight for ordering content within a taxonomy. See Ordering and Grouping Hugo Lists to see how weight can be used to organize your content in list views.\nOverride global markdown configuration It’s possible to set some options for Markdown rendering in a content’s front matter as an override to the rendering options set in your project configuration.\nFront matter format specs TOML Spec YAML Spec JSON Spec "},{"date":"0001-01-01","uri":"/getting-started/glossary/","title":"Glossary of terms","content":"A B C D E F G I K L M O P R S T U V W\naction See template action.\narchetype A template for new content. See details.\nargument A scalar, array, slice, map, or object passed to a function, method, or shortcode.\narray A numbered sequence of elements. Unlike Go’s slice data type, an array has a fixed length. Elements within an array can be scalars, slices, maps, pages, or other arrays. See the Go documentation for details.\nbool See boolean.\nboolean A data type with two possible values, either true or false.\nbranch bundle A page bundle with an _index.md file and zero or more resources. Analogous to a physical branch, a branch bundle may have descendants including regular pages, leaf bundles, and other branch bundles. See details.\nbuild To generate a static site that includes HTML files and assets such as images, CSS, and JavaScript. The build process includes rendering and resource transformations.\nbundle See page bundle.\ncache A software component that stores data so that future requests for the same data are faster.\nchain Within a template, to connect one or more identifiers with a dot. An identifier can represent a method, object, or field. For example, .Site.Params.author.name or .Date.UTC.Hour.\ncollection An array, slice, or map.\ncontent format A markup language for creating content. Typically markdown, but may also be HTML, AsciiDoc, Org, Pandoc, or reStructuredText. See details.\ncontent type A classification of content inferred from the top-level directory name or the type set in front matter. Pages in the root of the content directory, including the home page, are of type “page”. Accessed via .Page.Type in templates. See details.\ncontent view A template called with the .Page.Render method. See details.\ncontext Represented by a dot “.” within a template action, context is the current location in a data structure. For example, while iterating over a collection of pages, the context within each iteration is the page’s data structure. The context received by each template depends on template type and/or how it was called. See details.\ndefault sort order The default sort order for page collections. Hugo sorts by weight, then by date (descending), then by link title, and then by file path.\nelement A member of a slice or array.\nenvironment Typically one of development, staging, or production, each environment may exhibit different behavior depending on configuration and template logic. For example, in a production environment you might minify and fingerprint CSS, but that probably doesn’t make sense in a development environment.\nWhen running the built-in development server with the hugo server command, the environment is set to development. When building your site with the hugo command, the environment is set to production. To override the environment value, use the --environment command line flag.\nTo determine the current environment within a template, use the hugo.Environment function.\nfield A predefined key/value pair in front matter such as date or title. See also parameter.\nflag An option passed to a command-line program, beginning with one or two hyphens. See details.\nfloat See floating point.\nfloating point A numeric data type with a fractional component. For example, 3.14159.\nfragment The final segment of a URL, beginning with a hash (#) mark, that references an id attribute of an HTML element on the page.\nfront matter Metadata at the beginning of each content page, separated from the content by format-specific delimiters. See details.\nfunction Used within a template action, a function takes one or more arguments and returns a value. Unlike methods, functions are not associated with an object. See details.\nglobal resource A file within the assets directory, or within any directory mounted to the assets directory. Capture one or more global resources using the resources.Get, resources.GetMatch, resources.Match, or resources.ByType functions.\nidentifier A string that represents a variable, method, object, or field. It must conform to Go’s language specification, beginning with a letter or underscore, followed by zero or more letters, digits, or underscores.\nint See integer.\ninteger A numeric data type without a fractional component. For example, 42.\ninternationalization Software design and development efforts that enable localization. See the W3C definition. Abbreviated i18n.\ninterval An interval is a range of numbers between two endpoints: closed, open, or half-open.\nA closed interval, denoted by brackets, includes its endpoints. For example, [0, 1] is the interval where 0 \u003c= x \u003c= 1.\nAn open interval, denoted by parentheses, excludes its endpoints. For example, (0, 1) is the interval where 0 \u003c x \u003c 1.\nA half-open interval includes only one of its endpoints. For example, (0, 1] is the left-open interval where 0 \u003c x \u003c= 1, while [0, 1) is the right-open interval where 0 \u003c= x \u003c 1.\nkind See page kind.\nlayout See template.\nleaf bundle A page bundle with an index.md file and zero or more resources. Analogous to a physical leaf, a leaf bundle is at the end of a branch. Hugo ignores content (but not resources) beneath the leaf bundle. See details.\nlist page Any page kind that receives a page collection in context. This includes the home page, section pages, taxonomy pages, and term pages.\nlocalization Adaptation of a site to meet language and regional requirements. This includes translations, language-specific media, date and currency formats, etc. See details and the W3C definition. Abbreviated l10n.\nmap An unordered group of elements, each indexed by a unique key. See the Go documentation for details.\nmarkdown attribute A list of attributes, containing one or more key/value pairs, separated by spaces or commas, and wrapped by braces. Apply markdown attributes to images and block-level elements including blockquotes, fenced code blocks, headings, horizontal rules, lists, paragraphs, and tables. See details.\nmarshal To transform a data structure into a serialized object. For example, transforming a map into a JSON string. See unmarshal.\nmethod Used within a template action and associated with an object, a method takes zero or more arguments and either returns a value or performs an action. For example, .IsHome is a method on the .Page object which returns true if the current page is the home page. See also function.\nmodule Like a theme, a module is a packaged combination of archetypes, assets, content, data, templates, translation tables, static files, or configuration settings. A module may serve as the basis for a new site, or to augment an existing site. See details.\nobject A data structure with or without associated methods.\nordered taxonomy Created by invoking the Alphabetical or ByCount method on a taxonomy object, which is a map, an ordered taxonomy is a slice, where each element is an object that contains the term and a slice of its weighted pages.\noutput format Hugo generates one or more files per page when building a site. For example, when rendering home, section, taxonomy, and term pages, Hugo generates an HTML file and an RSS file. Both HTML and RSS are built-in output formats. Create multiple output formats, and control generation based on page kind, or by enabling one or more output formats for one or more pages. See details.\npage bundle A directory that encapsulates both content and associated resources. There are two types of page bundles: leaf bundles and branch bundles. See details.\npage collection A slice of page objects.\npage kind A classification of pages, one of home, page, section, taxonomy, or term. See details.\nNote that there are also RSS, sitemap, robotsTXT, and 404 page kinds, but these are only available during the rendering of each of these respective page’s kind and therefore not available in any of the Pages collections.\npage resource A file within a page bundle. Capture one or more page resources using any of the Resources methods on a Page object.\npager Created during pagination, a pager contains a subset of a section list, and navigation links to other pagers.\npaginate To split a section list into two or more pagers See details.\npagination The process of paginating a section list.\nparameter Typically, a user-defined key/value pair at the site or page level, but may also refer to a configuration setting or an argument. See also field.\npartial A template called from any other template including shortcodes, render hooks, and other partials. A partial either renders something or returns something. A partial can also call itself, for example, to walk a data structure.\npermalink The absolute URL of a published resource or a rendered page, including scheme and host.\npipe See pipeline.\npipeline Within a template action, a pipeline is a possibly chained sequence of values, function calls, or method calls. Functions and methods in the pipeline may take multiple arguments.\nA pipeline may be chained by separating a sequence of commands with pipeline characters “|”. In a chained pipeline, the result of each command is passed as the last argument to the following command. The output of the final command in the pipeline is the value of the pipeline. See the Go documentation for details.\npublish See build.\nregular page Content with the “page” page kind. See also section page.\nrelative permalink The host-relative URL of a published resource or a rendered page.\nrender hook A template that overrides standard markdown rendering. See details.\nremote resource A file on a remote server, accessible via HTTP or HTTPS with the resources.GetRemote function.\nresource Any file consumed by the build process to augment or generate content, structure, behavior, or presentation. For example: images, videos, content snippets, CSS, Sass, JavaScript, and data.\nHugo supports three types of resources: global, page, and remote\nscalar A single value, one of string, integer, floating point, or boolean.\nscratch pad Conceptually, a map with methods to set, get, update, and delete values. Attach the data structure to a Page object using the Scratch or Store methods, or created a locally scoped scratch pad using the newScratch function.\nsection A top-level content directory, or any content directory with an _index.md file. A content directory with an _index.md file is also known as a branch bundle. Section templates receive one or more page collections in context. See details.\nsection page Content with the “section” page kind. Typically a listing of regular pages and/or section pages within the current section. See also regular page.\nshortcode A template called from within markdown, taking zero or more arguments. See details.\nslice A numbered sequence of elements. Unlike Go’s array data type, slices are dynamically sized. Elements within a slice can be scalars, arrays, maps, pages, or other slices. See the Go documentation for details.\nstring A sequence of bytes. For example, \"What is 6 times 7?\" .\ntaxonomic weight Defined in front matter and unique to each taxonomy, this weight determines the sort order of page collections contained within a taxonomy object. See details.\ntaxonomy A group of related terms used to classify content. For example, a “colors” taxonomy might include the terms “red”, “green”, and “blue”. See details.\ntaxonomy object A map of terms and the weighted pages associated with each term.\ntaxonomy page Content with the “taxonomy” page kind. Typically a listing of terms within a given taxonomy.\ntemplate A file with template actions, located within the layouts directory of a project, theme, or module. See details.\ntemplate action A data evaluation or control structure within a template, delimited by “{{\" and ”}}\". See the Go documentation for details.\nterm A member of a taxonomy, used to classify content. See details.\nterm page Content with the “term” page kind. Typically a listing of regular pages and section pages with a given term.\ntheme A packaged combination of archetypes, assets, content, data, templates, translation tables, static files, or configuration settings. A theme may serve as the basis for a new site, or to augment an existing site. See also module.\ntoken An identifier within a format string, beginning with a colon and replaced with a value when rendered. For example, use tokens in format strings for both permalinks and dates.\ntype See content type.\nunmarshal To transform a serialized object into a data structure. For example, transforming a JSON file into a map that you can access within a template. See marshal.\nvariable A user-defined identifier prefaced with a $ symbol, representing a value of any data type, initialized or assigned within a template action. For example, $foo and $bar are variables.\nwalk To recursively traverse a nested data structure. For example, rendering a multilevel menu.\nweight Used to position an element within a collection sorted by weight. Assign weights using non-zero integers. Lighter items float to the top, while heavier items sink to the bottom. Unweighted or zero-weighted elements are placed at the end of the collection. Weights are typically assigned to pages, menu entries, languages, and output formats.\nweighted page Contained within a taxonomy object, a weighted page is a map with two elements: a Page object, and its taxonomic weight as defined in front matter. Access the elements using the Page and Weight keys.\n"},{"date":"0001-01-01","uri":"/about/hugo-and-gdpr/","title":"Hugo and the General Data Protection Regulation","content":"General Data Protection Regulation (GDPR) is a regulation in EU law on data protection and privacy for all individuals within the European Union and the European Economic Area. It became enforceable on 25 May 2018.\nHugo is a static site generator. By using Hugo you are already standing on very solid ground. Static HTML files on disk are much easier to reason about compared to server and database driven web sites.\nBut even static websites can integrate with external services, so from version 0.41, Hugo provides a privacy configuration that covers the relevant built-in templates.\nNote that:\nThese settings have their defaults setting set to off, i.e. how it worked before Hugo 0.41. You must do your own evaluation of your site and apply the appropriate settings. These settings work with the internal templates. Some theme may contain custom templates for embedding services like Google Analytics. In that case these options have no effect. We will continue this work and improve this further in future Hugo versions. All privacy settings Below are all privacy settings and their default value. These settings need to be put in your site configuration (e.g. hugo.toml).\nhugo.\ryaml\r \rtoml\r \rjson\r \rprivacy: disqus: disable: false googleAnalytics: anonymizeIP: false disable: false respectDoNotTrack: false useSessionStorage: false instagram: disable: false simple: false twitter: disable: false enableDNT: false simple: false vimeo: disable: false enableDNT: false simple: false youtube: disable: false privacyEnhanced: false [privacy] [privacy.disqus] disable = false [privacy.googleAnalytics] anonymizeIP = false disable = false respectDoNotTrack = false useSessionStorage = false [privacy.instagram] disable = false simple = false [privacy.twitter] disable = false enableDNT = false simple = false [privacy.vimeo] disable = false enableDNT = false simple = false [privacy.youtube] disable = false privacyEnhanced = false { \"privacy\": { \"disqus\": { \"disable\": false }, \"googleAnalytics\": { \"anonymizeIP\": false, \"disable\": false, \"respectDoNotTrack\": false, \"useSessionStorage\": false }, \"instagram\": { \"disable\": false, \"simple\": false }, \"twitter\": { \"disable\": false, \"enableDNT\": false, \"simple\": false }, \"vimeo\": { \"disable\": false, \"enableDNT\": false, \"simple\": false }, \"youtube\": { \"disable\": false, \"privacyEnhanced\": false } } } Disable all services An example privacy configuration that disables all the relevant services in Hugo. With this configuration, the other settings will not matter.\nhugo.\ryaml\r \rtoml\r \rjson\r \rprivacy: disqus: disable: true googleAnalytics: disable: true instagram: disable: true twitter: disable: true vimeo: disable: true youtube: disable: true [privacy] [privacy.disqus] disable = true [privacy.googleAnalytics] disable = true [privacy.instagram] disable = true [privacy.twitter] disable = true [privacy.vimeo] disable = true [privacy.youtube] disable = true { \"privacy\": { \"disqus\": { \"disable\": true }, \"googleAnalytics\": { \"disable\": true }, \"instagram\": { \"disable\": true }, \"twitter\": { \"disable\": true }, \"vimeo\": { \"disable\": true }, \"youtube\": { \"disable\": true } } } The privacy settings explained GoogleAnalytics anonymizeIP Enabling this will make it so the users’ IP addresses are anonymized within Google Analytics. respectDoNotTrack Enabling this will make the GA templates respect the “Do Not Track” HTTP header. useSessionStorage Enabling this will disable the use of Cookies and use Session Storage to Store the GA Client ID. useSessionStorage is not supported when using Google Analytics v4 (gtag.js).\nInstagram simple If simple mode is enabled, a static and no-JS version of the Instagram image card will be built. Note that this only supports image cards and the image itself will be fetched from Instagram’s servers. Note: If you use the simple mode for Instagram and a site styled with Bootstrap 4, you may want to disable the inline styles provided by Hugo:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: instagram: disableInlineCSS: true [services] [services.instagram] disableInlineCSS = true { \"services\": { \"instagram\": { \"disableInlineCSS\": true } } } Twitter enableDNT Enabling this for the twitter/tweet shortcode, the tweet and its embedded page on your site are not used for purposes that include personalized suggestions and personalized ads. simple If simple mode is enabled, a static and no-JS version of a tweet will be built. Note: If you use the simple mode for Twitter, you may want to disable the inline styles provided by Hugo:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: twitter: disableInlineCSS: true [services] [services.twitter] disableInlineCSS = true { \"services\": { \"twitter\": { \"disableInlineCSS\": true } } } YouTube privacyEnhanced When you turn on privacy-enhanced mode, YouTube won’t store information about visitors on your website unless the user plays the embedded video. Vimeo enableDNT Enabling this for the vimeo shortcode, the Vimeo player will be blocked from tracking any session data, including all cookies and stats. simple If simple mode is enabled, the video thumbnail is fetched from Vimeo’s servers and it is overlaid with a play button. If the user clicks to play the video, it will open in a new tab directly on Vimeo’s website. "},{"date":"0001-01-01","uri":"/hugo-pipes/js/","title":"js.Build","content":"Usage Any JavaScript resource file can be transpiled and “tree shaken” using js.Build which takes for argument either a string for the filepath or a dict of options listed below.\nOptions targetPath (string) If not set, the source path will be used as the base target path. Note that the target path’s extension may change if the target MIME type is different, e.g. when the source is TypeScript. params New in v0.96.0\r(map or slice) Params that can be imported as JSON in your JS files, e.g.: {{ $js := resources.Get \"js/main.js\" | js.Build (dict \"params\" (dict \"api\" \"https://example.org/api\")) }} And then in your JS file:\nimport * as params from '@params'; Note that this is meant for small data sets, e.g. configuration settings. For larger data, please put/mount the files into /assets and import them directly.\nminify (bool) Let js.Build handle the minification. inject (slice) This option allows you to automatically replace a global variable with an import from another file. The path names must be relative to assets. See https://esbuild.github.io/api/#inject shims (map) This option allows swapping out a component with another. A common use case is to load dependencies like React from a CDN (with shims) when in production, but running with the full bundled node_modules dependency during development: {{ $shims := dict \"react\" \"js/shims/react.js\" \"react-dom\" \"js/shims/react-dom.js\" }} {{ $js = $js | js.Build dict \"shims\" $shims }} The shim files may look like these:\n// js/shims/react.js module.exports = window.React; // js/shims/react-dom.js module.exports = window.ReactDOM; With the above, these imports should work in both scenarios:\nimport * as React from 'react' import * as ReactDOM from 'react-dom'; target (string) The language target. One of: es5, es2015, es2016, es2017, es2018, es2019, es2020 or esnext. Default is esnext. externals (slice) External dependencies. Use this to trim dependencies you know will never be executed. See https://esbuild.github.io/api/#external defines (map) Allow to define a set of string replacement to be performed when building. Should be a map where each key is to be replaced by its value. {{ $defines := dict \"process.env.NODE_ENV\" `\"development\"` }} format (string) The output format. One of: iife, cjs, esm. Default is iife, a self-executing function, suitable for inclusion as a \u003cscript\u003e tag. sourceMap (string) Whether to generate inline or external source maps from esbuild. External source maps will be written to the target with the output file name + “.map”. Input source maps can be read from js.Build and node modules and combined into the output source maps. By default, source maps are not created. Import JS code from /assets js.Build has full support for the virtual union file system in Hugo Modules. You can see some simple examples in this test project, but in short this means that you can do this:\nimport { hello } from 'my/module'; And it will resolve to the top-most index.{js,ts,tsx,jsx} inside assets/my/module in the layered file system.\nimport { hello3 } from 'my/module/hello3'; Will resolve to hello3.{js,ts,tsx,jsx} inside assets/my/module.\nAny imports starting with . is resolved relative to the current file:\nimport { hello4 } from './lib'; For other files (e.g. JSON, CSS) you need to use the relative path including any extension, e.g:\nimport * as data from 'my/module/data.json'; Any imports in a file outside /assets or that does not resolve to a component inside /assets will be resolved by ESBuild with the project directory as the resolve directory (used as the starting point when looking for node_modules etc.). Also see hugo mod npm pack. If you have any imported npm dependencies in your project, you need to make sure to run npm install before you run hugo.\nAlso note the new params option that can be passed from template to your JS files, e.g.:\n{{ $js := resources.Get \"js/main.js\" | js.Build (dict \"params\" (dict \"api\" \"https://example.org/api\")) }} And then in your JS file:\nimport * as params from '@params'; Hugo will, by default, generate a assets/jsconfig.json file that maps the imports. This is useful for navigation/intellisense help inside code editors, but if you don’t need/want it, you can turn it off.\nInclude dependencies In package.json / node_modules Any imports in a file outside /assets or that does not resolve to a component inside /assets will be resolved by ESBuild with the project directory as the resolve directory (used as the starting point when looking for node_modules etc.). Also see hugo mod npm pack. If you have any imported npm dependencies in your project, you need to make sure to run npm install before you run hugo.\nThe start directory for resolving npm packages (aka. packages that live inside a node_modules folder) is always the main project folder.\nIf you’re developing a theme/component that is supposed to be imported and depends on dependencies inside package.json, we recommend reading about hugo mod npm pack, a tool to consolidate all the npm dependencies in a project.\nExamples {{ $built := resources.Get \"js/index.js\" | js.Build \"main.js\" }} Or with options:\n{{ $externals := slice \"react\" \"react-dom\" }} {{ $defines := dict \"process.env.NODE_ENV\" `\"development\"` }} {{ $opts := dict \"targetPath\" \"main.js\" \"externals\" $externals \"defines\" $defines }} {{ $built := resources.Get \"scripts/main.js\" | js.Build $opts }} \u003cscript src=\"{{ $built.RelPermalink }}\" defer\u003e\u003c/script\u003e "},{"date":"0001-01-01","uri":"/templates/lists/","title":"Lists of content in Hugo","content":"What is a list page template? A list page template is a template used to render multiple pieces of content in a single HTML page. The exception to this rule is the homepage, which is still a list but has its own dedicated template.\nHugo uses the term list in its truest sense; i.e. a sequential arrangement of material, especially in alphabetical or numerical order. Hugo uses list templates on any output HTML page where content is traditionally listed:\nHome page Section pages Taxonomy pages Taxonomy term pages RSS feeds Sitemaps For template lookup order, see Template Lookup.\nThe idea of a list page comes from the hierarchical mental model of the web and is best demonstrated visually:\nList defaults Default templates Since section lists and taxonomy lists (N.B., not taxonomy terms lists) are both lists with regards to their templates, both have the same terminating default of _default/list.html or themes/\u003cTHEME\u003e/layouts/_default/list.html in their lookup order. In addition, both section lists and taxonomy lists have their own default list templates in _default.\nSee Template Lookup Order for the complete reference.\nAdd content and front matter to list pages Since v0.18, everything in Hugo is a Page. This means list pages and the homepage can have associated content files (i.e. _index.md) that contain page metadata (i.e., front matter) and content.\nThis new model allows you to include list-specific front matter via .Params and also means that list templates (e.g., layouts/_default/list.html) have access to all page variables.\nIt is important to note that all _index.md content files will render according to a list template and not according to a single page template.\nExample project directory The following is an example of a typical Hugo project directory’s content:\n. ... ├── content | ├── posts | | ├── _index.md | | ├── post-01.md | | └── post-02.md | └── quote | | ├── quote-01.md | | └── quote-02.md ... Using the above example, let’s assume you have the following in content/posts/_index.md:\ncontent/posts/_index.md\r--- title: My Go Journey date: 2017-03-23 publishdate: 2017-03-24 --- I decided to start learning Go in March 2017. Follow my journey through this new blog.\rYou can now access this _index.md’s’ content in your list template:\nlayouts/_default/list.html\r{{ define \"main\" }} \u003cmain\u003e \u003carticle\u003e \u003cheader\u003e \u003ch1\u003e{{ .Title }}\u003c/h1\u003e \u003c/header\u003e \u003c!-- \"{{ .Content }}\" pulls from the markdown content of the corresponding _index.md --\u003e {{ .Content }} \u003c/article\u003e \u003cul\u003e \u003c!-- Ranges through content/posts/*.md --\u003e {{ range .Pages }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Date.Format \"2006-01-02\" }} | {{ .LinkTitle }}\u003c/a\u003e \u003c/li\u003e {{ end }} \u003c/ul\u003e \u003c/main\u003e {{ end }}\rThis above will output the following HTML:\nexample.com/posts/index.html\r\u003c!--top of your baseof code--\u003e \u003cmain\u003e \u003carticle\u003e \u003cheader\u003e \u003ch1\u003eMy Go Journey\u003c/h1\u003e \u003c/header\u003e \u003cp\u003eI decided to start learning Go in March 2017.\u003c/p\u003e \u003cp\u003eFollow my journey through this new blog.\u003c/p\u003e \u003c/article\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"/posts/post-01/\"\u003ePost 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/posts/post-02/\"\u003ePost 2\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/main\u003e \u003c!--bottom of your baseof--\u003e\rList pages without _index.md You do not have to create an _index.md file for every list page (i.e. section, taxonomy, taxonomy terms, etc) or the homepage. If Hugo does not find an _index.md within the respective content section when rendering a list template, the page will be created but with no {{ .Content }} and only the default values for .Title etc.\nUsing this same layouts/_default/list.html template and applying it to the quotes section above will render the following output. Note that quotes does not have an _index.md file to pull from:\nexample.com/quote/index.html\r\u003c!--baseof--\u003e \u003cmain\u003e \u003carticle\u003e \u003cheader\u003e \u003c!-- Hugo assumes that .Title is the name of the section since there is no _index.md content file from which to pull a \"title:\" field --\u003e \u003ch1\u003eQuotes\u003c/h1\u003e \u003c/header\u003e \u003c/article\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://example.org/quote/quotes-01/\"\u003eQuote 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://example.org/quote/quotes-02/\"\u003eQuote 2\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/main\u003e \u003c!--baseof--\u003e\rThe default behavior of Hugo is to pluralize list titles; hence the inflection of the quote section to “Quotes” when called with the .Title page variable. You can change this via the pluralizeListTitles directive in your site configuration.\nExample list templates Section template This list template has been modified slightly from a template originally used in spf13.com. It makes use of partial templates for the chrome of the rendered page rather than using a base template. The examples that follow also use the content view templates li.html or summary.html.\nlayouts/section/posts.html\r{{ partial \"header.html\" . }} {{ partial \"subheader.html\" . }} \u003cmain\u003e \u003cdiv\u003e \u003ch1\u003e{{ .Title }}\u003c/h1\u003e \u003cul\u003e \u003c!-- Renders the li.html content view for each content/posts/*.md --\u003e {{ range .Pages }} {{ .Render \"li\" }} {{ end }} \u003c/ul\u003e \u003c/div\u003e \u003c/main\u003e {{ partial \"footer.html\" . }}\rTaxonomy template layouts/_default/taxonomy.html\r{{ define \"main\" }} \u003cmain\u003e \u003cdiv\u003e \u003ch1\u003e{{ .Title }}\u003c/h1\u003e \u003c!-- ranges through each of the content files associated with a particular taxonomy term and renders the summary.html content view --\u003e {{ range .Pages }} {{ .Render \"summary\" }} {{ end }} \u003c/div\u003e \u003c/main\u003e {{ end }}\rSort content By default, Hugo sorts page collections by:\nPage weight Page date (descending) Page linkTitle, falling back to page title Page file path if the page is backed by a file Change the sort order using any of the methods below.\n.ByDate\rReturns the given page collection sorted by date in ascending order.\r.ByExpiryDate\rReturns the given page collection sorted by expiration date in ascending order.\r.ByLanguage\rReturns the given page collection sorted by language in ascending order.\r.ByLastmod\rReturns the given page collection sorted by last modification date in ascending order.\r.ByLength\rReturns the given page collection sorted by content length in ascending order.\r.ByLinkTitle\rReturns the given page collection sorted by link title in ascending order, falling back to title if link title is not defined.\r.ByParam\rReturns the given page collection sorted by the given parameter in ascending order.\r.ByPublishDate\rReturns the given page collection sorted by publish date in ascending order.\r.ByTitle\rReturns the given page collection sorted by title in ascending order.\r.ByWeight\rReturns the given page collection sorted by weight in ascending order.\r.Reverse\rReturns the given page collection in reverse order.\rGroup content Group your content by field, parameter, or date using any of the methods below.\n.GroupBy\rReturns the given page collection grouped by the given field in ascending order.\r.GroupByDate\rReturns the given page collection grouped by date in descending order.\r.GroupByExpiryDate\rReturns the given page collection grouped by expiration date in descending order.\r.GroupByLastmod\rReturns the given page collection grouped by last modification date in descending order.\r.GroupByParam\rReturns the given page collection grouped by the given parameter in ascending order.\r.GroupByParamDate\rReturns the given page collection grouped by the given date parameter in descending order.\r.GroupByPublishDate\rReturns the given page collection grouped by publish date in descending order.\r.Reverse\rReturns the given page collection in reverse order.\rFiltering and limiting lists Sometimes you only want to list a subset of the available content. A common is to only display posts from main sections on the blog’s homepage.\nSee the documentation on where and first for further details.\n"},{"date":"0001-01-01","uri":"/tools/other/","title":"Other community projects","content":"And for all the other small things around Hugo:\nhugo-gallery lets you create an image gallery for Hugo sites. flickr-hugo-embed prints shortcodes to embed a set of images from an album on Flickr into Hugo. hugo-openapispec-shortcode A shortcode that allows you to include Open API Spec (formerly known as Swagger Spec) in a page. HugoPhotoSwipe makes it easy to create image galleries using PhotoSwipe. Hugo SFTP Upload Syncs the local build of your Hugo website with your remote web server via SFTP. Emacs Easy Hugo Emacs package for writing blog posts in markdown or org-mode and building your site with Hugo. JAMStack Themes. JAMStack themes is a collection of site themes filterable by static site generator and supported CMS to help build CMS-connected sites using Hugo (linking to Hugo-specific themes). plausible-hugo. Easy Hugo integration for Plausible Analytics, a simple, open-source, lightweight and privacy-friendly web analytics alternative to Google Analytics. "},{"date":"0001-01-01","uri":"/variables/pages/","title":"Pages variables","content":"\rWe are making an effort to unify our terminology, and to use these terms consistently throughout the documentation.\nHistorically, we have inconsistently referred to the items on this page as functions, parameters, variables, or methods. They are not functions, parameters, or variables; they are methods.\nThis page will remain in place as readers become familiar with the unified terminology. See the methods section for a list of methods by object, or the methods quick reference guide.\nAll methods Use any of these methods with page collections in your templates.\n.ByDate\rReturns the given page collection sorted by date in ascending order.\r.ByExpiryDate\rReturns the given page collection sorted by expiration date in ascending order.\r.ByLanguage\rReturns the given page collection sorted by language in ascending order.\r.ByLastmod\rReturns the given page collection sorted by last modification date in ascending order.\r.ByLength\rReturns the given page collection sorted by content length in ascending order.\r.ByLinkTitle\rReturns the given page collection sorted by link title in ascending order, falling back to title if link title is not defined.\r.ByParam\rReturns the given page collection sorted by the given parameter in ascending order.\r.ByPublishDate\rReturns the given page collection sorted by publish date in ascending order.\r.ByTitle\rReturns the given page collection sorted by title in ascending order.\r.ByWeight\rReturns the given page collection sorted by weight in ascending order.\r.GroupBy\rReturns the given page collection grouped by the given field in ascending order.\r.GroupByDate\rReturns the given page collection grouped by date in descending order.\r.GroupByExpiryDate\rReturns the given page collection grouped by expiration date in descending order.\r.GroupByLastmod\rReturns the given page collection grouped by last modification date in descending order.\r.GroupByParam\rReturns the given page collection grouped by the given parameter in ascending order.\r.GroupByParamDate\rReturns the given page collection grouped by the given date parameter in descending order.\r.GroupByPublishDate\rReturns the given page collection grouped by publish date in descending order.\r.Len\rReturns the number of pages in the given page collection.\r.Limit\rReturns the first N pages from the given page collection.\r.Next\rReturns the next page in a local page collection, relative to the given page.\r.Prev\rReturns the previous page in a local page collection, relative to the given page.\r.Related\rReturns a collection of pages related to the given page.\r.Reverse\rReturns the given page collection in reverse order.\rSort by Use these methods to sort page collections.\n.ByDate\rReturns the given page collection sorted by date in ascending order.\r.ByExpiryDate\rReturns the given page collection sorted by expiration date in ascending order.\r.ByLanguage\rReturns the given page collection sorted by language in ascending order.\r.ByLastmod\rReturns the given page collection sorted by last modification date in ascending order.\r.ByLength\rReturns the given page collection sorted by content length in ascending order.\r.ByLinkTitle\rReturns the given page collection sorted by link title in ascending order, falling back to title if link title is not defined.\r.ByParam\rReturns the given page collection sorted by the given parameter in ascending order.\r.ByPublishDate\rReturns the given page collection sorted by publish date in ascending order.\r.ByTitle\rReturns the given page collection sorted by title in ascending order.\r.ByWeight\rReturns the given page collection sorted by weight in ascending order.\r.Reverse\rReturns the given page collection in reverse order.\rGroup by Use these methods to group page collections.\n.GroupBy\rReturns the given page collection grouped by the given field in ascending order.\r.GroupByDate\rReturns the given page collection grouped by date in descending order.\r.GroupByExpiryDate\rReturns the given page collection grouped by expiration date in descending order.\r.GroupByLastmod\rReturns the given page collection grouped by last modification date in descending order.\r.GroupByParam\rReturns the given page collection grouped by the given parameter in ascending order.\r.GroupByParamDate\rReturns the given page collection grouped by the given date parameter in descending order.\r.GroupByPublishDate\rReturns the given page collection grouped by publish date in descending order.\r.Reverse\rReturns the given page collection in reverse order.\rNavigation Use these methods to create navigation links between pages.\n.Next\rReturns the next page in a local page collection, relative to the given page.\r.Prev\rReturns the previous page in a local page collection, relative to the given page.\r"},{"date":"0001-01-01","uri":"/troubleshooting/performance/","title":"Performance","content":"Template metrics Hugo is fast, but inefficient templates impede performance. Enable template metrics to determine which templates take the most time, and to identify caching opportunities:\nhugo --templateMetrics --templateMetricsHints The result will look something like this:\nTemplate Metrics: cumulative average maximum cache percent cached total duration duration duration potential cached count count template ---------- -------- -------- --------- ------- ------ ----- -------- 36.037476822s 135.990478ms 225.765245ms 11 0 0 265 partials/head.html 35.920040902s 164.018451ms 233.475072ms 0 0 0 219 articles/single.html 34.163268129s 128.917992ms 224.816751ms 23 0 0 265 partials/head/meta/opengraph.html 1.041227437s 3.92916ms 186.303376ms 47 0 0 265 partials/head/meta/schema.html 805.628827ms 27.780304ms 114.678523ms 0 0 0 29 _default/list.html 624.08354ms 15.221549ms 108.420729ms 8 0 0 41 partials/utilities/render-page-collection.html 545.968801ms 775.523µs 105.045775ms 0 0 0 704 _default/summary.html 334.680981ms 1.262947ms 127.412027ms 100 0 0 265 partials/head/js.html 272.763205ms 2.050851ms 24.371757ms 0 0 0 133 _default/_markup/render-codeblock.html 230.490038ms 8.865001ms 177.4615ms 0 0 0 26 shortcodes/template.html 176.921913ms 176.921913ms 176.921913ms 0 0 0 1 examples.tmpl 163.951469ms 14.904679ms 70.267953ms 0 0 0 11 articles/list.html 153.07021ms 577.623µs 73.593597ms 100 0 0 265 partials/head/init.html 150.910984ms 150.910984ms 150.910984ms 0 0 0 1 _default/single.html 146.785804ms 146.785804ms 146.785804ms 0 0 0 1 _default/contact.html 115.364617ms 115.364617ms 115.364617ms 0 0 0 1 authors/term.html 87.392071ms 329.781µs 10.687132ms 100 0 0 265 partials/head/css.html 86.803122ms 86.803122ms 86.803122ms 0 0 0 1 _default/home.html From left to right, the columns represent:\ncumulative duration The cumulative time spent executing the template. average duration The average time spent executing the template. maximum duration The maximum time spent executing the template. cache potential Displayed as a percentage, any partial template with a 100% cache potential should be called with the partialCached function instead of the partial function. See the caching section below. percent cached The number of times the rendered templated was cached divided by the number of times the template was executed. cached count The number of times the rendered templated was cached. total count The number of times the template was executed. template The path to the template, relative to the layouts directory. Hugo builds pages in parallel where multiple pages are generated simultaneously. Because of this parallelism, the sum of “cumulative duration” values is usually greater than the actual time it takes to build a site.\nCaching Some partial templates such as sidebars or menus are executed many times during a site build. Depending on the content within the partial template and the desired output, the template may benefit from caching to reduce the number of executions. The partialCached template function provides caching capabilities for partial templates.\nNote that you can create cached variants of each partial by passing additional parameters to partialCached beyond the initial context. See the partialCached documentation for more details.\nTimers Use the debug.Timer function to determine execution time for a block of code, useful for finding performance bottle necks in templates. See details.\n"},{"date":"0001-01-01","uri":"/hugo-pipes/babel/","title":"Babel","content":"Usage Any JavaScript resource file can be transpiled to another JavaScript version using resources.Babel which takes for argument the resource object and an optional dict of options listed below. Babel uses the babel cli.\nHugo Pipe’s Babel requires the @babel/cli and @babel/core JavaScript packages to be installed in the project or globally (npm install -g @babel/cli @babel/core) along with any Babel plugin(s) or preset(s) used (e.g., npm install @babel/preset-env --save-dev).\nIf you are using the Hugo Snap package, Babel and plugin(s) need to be installed locally within your Hugo site directory, e.g., npm install @babel/cli @babel/core --save-dev without the -g flag.\nConfiguration We add the main project’s node_modules to NODE_PATH when running Babel and similar tools. There are some known issues with Babel in this area, so if you have a babel.config.js living in a Hugo Module (and not in the project itself), we recommend using require to load the presets/plugins, e.g.:\nmodule.exports = { presets: [ [ require(\"@babel/preset-env\"), { useBuiltIns: \"entry\", corejs: 3, }, ], ], }; Options config (string) Path to the Babel configuration file. Hugo will, by default, look for a babel.config.js in your project. More information on these configuration files can be found here: babel configuration. minified (bool) Save as many bytes as possible when printing noComments (bool) Write comments to generated output (true by default) compact (bool) Do not include superfluous whitespace characters and line terminators. Defaults to auto if not set. verbose (bool) Log everything sourceMap (string) Output inline or external sourcemap from the babel compile. External sourcemaps will be written to the target with the output file name + “.map”. Input sourcemaps can be read from js.Build and node modules and combined into the output sourcemaps. Examples {{- $transpiled := resources.Get \"scripts/main.js\" | babel -}} Or with options:\n{{ $opts := dict \"noComments\" true }} {{- $transpiled := resources.Get \"scripts/main.js\" | babel $opts -}} "},{"date":"0001-01-01","uri":"/content-management/build-options/","title":"Build options","content":"Build options are stored in a reserved front matter object named _build with these defaults:\ncontent/example/index.md\ryaml\r \rtoml\r \rjson\r \r--- _build: list: always publishResources: true render: always ---\r+++ [_build] list = 'always' publishResources = true render = 'always' +++\r{ \"_build\": { \"list\": \"always\", \"publishResources\": true, \"render\": \"always\" } } list When to include the page within page collections. Specify one of: always Include the page in all page collections. For example, site.RegularPages, .Pages, etc. This is the default value. local Include the page in local page collections. For example, .RegularPages, .Pages, etc. Use this option to create fully navigable but headless content sections. never Do not include the page in any page collection. publishResources Applicable to page bundles, determines whether to publish the associated page resources. Specify one of: true Always publish resources. This is the default value. false Only publish a resource when invoking its Permalink, RelPermalink, or Publish method within a template. render When to render the page. Specify one of: always Always render the page to disk. This is the default value. link Do not render the page to disk, but assign Permalink and RelPermalink values. never Never render the page to disk, and exclude it from all page collections. Any page, regardless of its build options, will always be available by using the .Page.GetPage or .Site.GetPage method.\nExample – headless page Create a unpublished page whose content and resources can be included in other pages.\ncontent/ ├── headless/ │ ├── a.jpg │ ├── b.jpg │ └── index.md \u003c-- leaf bundle └── _index.md \u003c-- home page Set the build options in front matter:\ncontent/headless/index.md\ryaml\r \rtoml\r \rjson\r \r--- _build: list: never publishResources: false render: never title: Headless page ---\r+++ title = 'Headless page' [_build] list = 'never' publishResources = false render = 'never' +++\r{ \"_build\": { \"list\": \"never\", \"publishResources\": false, \"render\": \"never\" }, \"title\": \"Headless page\" } To include the content and images on the home page:\nlayouts/_default/home.html\r{{ with .Site.GetPage \"/headless\" }} {{ .Content }} {{ range .Resources.ByType \"image\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }}\rThe published site will have this structure:\npublic/ ├── headless/ │ ├── a.jpg │ └── b.jpg └── index.html In the example above, note that:\nHugo did not publish an HTML file for the page. Despite setting publishResources to false in front matter, Hugo published the page resources because we invoked the RelPermalink method on each resource. This is the expected behavior. Example – headless section Create a unpublished section whose content and resources can be included in other pages.\ncontent/ ├── headless/ │ ├── note-1/ │ │ ├── a.jpg │ │ ├── b.jpg │ │ └── index.md \u003c-- leaf bundle │ ├── note-2/ │ │ ├── c.jpg │ │ ├── d.jpg │ │ └── index.md \u003c-- leaf bundle │ └── _index.md \u003c-- branch bundle └── _index.md \u003c-- home page Set the build options in front matter, using the cascade keyword to “cascade” the values down to descendant pages.\ncontent/headless/_index.md\ryaml\r \rtoml\r \rjson\r \r--- cascade: - _build: list: local publishResources: false render: never title: Headless section ---\r+++ title = 'Headless section' [[cascade]] [cascade._build] list = 'local' publishResources = false render = 'never' +++\r{ \"cascade\": [ { \"_build\": { \"list\": \"local\", \"publishResources\": false, \"render\": \"never\" } } ], \"title\": \"Headless section\" } In the front matter above, note that we have set list to local to include the descendant pages in local page collections.\nTo include the content and images on the home page:\nlayouts/_default/home.html\r{{ with .Site.GetPage \"/headless\" }} {{ range .Pages }} {{ .Content }} {{ range .Resources.ByType \"image\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} {{ end }}\rThe published site will have this structure:\npublic/ ├── headless/ │ ├── note-1/ │ │ ├── a.jpg │ │ └── b.jpg │ └── note-2/ │ ├── c.jpg │ └── d.jpg └── index.html In the example above, note that:\nHugo did not publish an HTML file for the page. Despite setting publishResources to false in front matter, Hugo correctly published the page resources because we invoked the RelPermalink method on each resource. This is the expected behavior. Example – list without publishing Publish a section page without publishing the descendant pages. For example, to create a glossary:\ncontent/ ├── glossary/ │ ├── _index.md │ ├── bar.md │ ├── baz.md │ └── foo.md └── _index.md Set the build options in front matter, using the cascade keyword to “cascade” the values down to descendant pages.\ncontent/glossary/_index.md\ryaml\r \rtoml\r \rjson\r \r--- _build: render: always cascade: - _build: list: local publishResources: false render: never title: Glossary ---\r+++ title = 'Glossary' [_build] render = 'always' [[cascade]] [cascade._build] list = 'local' publishResources = false render = 'never' +++\r{ \"_build\": { \"render\": \"always\" }, \"cascade\": [ { \"_build\": { \"list\": \"local\", \"publishResources\": false, \"render\": \"never\" } } ], \"title\": \"Glossary\" } To render the glossary:\nlayouts/glossary/list.html\r\u003cdl\u003e {{ range .Pages }} \u003cdt\u003e{{ .Title }}\u003c/dt\u003e \u003cdd\u003e{{ .Content }}\u003c/dd\u003e {{ end }} \u003c/dl\u003e\rThe published site will have this structure:\npublic/ ├── glossary/ │ └── index.html └── index.html Example – publish without listing Publish a section’s descendant pages without publishing the section page itself.\ncontent/ ├── books/ │ ├── _index.md │ ├── book-1.md │ └── book-2.md └── _index.md Set the build options in front matter:\ncontent/books/_index.md\ryaml\r \rtoml\r \rjson\r \r--- _build: list: never render: never title: Books ---\r+++ title = 'Books' [_build] list = 'never' render = 'never' +++\r{ \"_build\": { \"list\": \"never\", \"render\": \"never\" }, \"title\": \"Books\" } The published site will have this structure:\npublic/ ├── books/ │ ├── book-1/ │ │ └── index.html │ └── book-2/ │ └── index.html └── index.html Example – conditionally hide section Consider this example. A documentation site has a team of contributors with access to 20 custom shortcodes. Each shortcode takes several arguments, and requires documentation for the contributors to reference when using them.\nInstead of external documentation for the shortcodes, include an “internal” section that is hidden when building the production site.\ncontent/ ├── internal/ │ ├── shortcodes/ │ │ ├── _index.md │ │ ├── shortcode-1.md │ │ └── shortcode-2.md │ └── _index.md ├── reference/ │ ├── _index.md │ ├── reference-1.md │ └── reference-2.md ├── tutorials/ │ ├── _index.md │ ├── tutorial-1.md │ └── tutorial-2.md └── _index.md Set the build options in front matter, using the cascade keyword to “cascade” the values down to descendant pages, and use the target keyword to target the production environment.\ncontent/internal/_index.md.\ryaml\r \rtoml\r \rjson\r \rcascade: - _build: list: never render: never _target: environment: production title: Internal title = 'Internal' [[cascade]] [cascade._build] list = 'never' render = 'never' [cascade._target] environment = 'production' { \"cascade\": [ { \"_build\": { \"list\": \"never\", \"render\": \"never\" }, \"_target\": { \"environment\": \"production\" } } ], \"title\": \"Internal\" } The production site will have this structure:\npublic/ ├── reference/ │ ├── reference-1/ │ │ └── index.html │ ├── reference-2/ │ │ └── index.html │ └── index.html ├── tutorials/ │ ├── tutorial-1/ │ │ └── index.html │ ├── tutorial-2/ │ │ └── index.html │ └── index.html └── index.html "},{"date":"0001-01-01","uri":"/getting-started/external-learning-resources/","title":"External learning resources","content":"Books Hugo In Action Hugo in Action is a step-by-step guide to using Hugo to create static websites. Working with a complete example website and source code samples, you’ll learn how to build and host a low-maintenance, high-performance site that will wow your users and stay stable without relying on a third-party server.\nHugo In Action Home Page\nBuild Websites with Hugo Build Websites with Hugo - Fast Web Development with Markdown (2020) by Brian P. Hogan.\nBeginner tutorials Hugo tutorial by CloudCannon Step-by-step written tutorial to teach you the basics of creating a Hugo site.\nVideo tutorials Mike Dane explains the various features of Hugo via dedicated tutorials on YouTube.\nIntroduction to building your first Hugo site by Mike Neumegen.\n"},{"date":"0001-01-01","uri":"/troubleshooting/faq/","title":"Frequently asked questions","content":"Hugo’s forum is an active community of users and developers who answer questions, share knowledge, and provide examples. A quick search of over 20,000 topics will often answer your question. Please be sure to read about requesting help before asking your first question.\nThese are just a few of the questions most frequently asked by new users.\nAn error message indicates that a feature is not available. Why? Hugo is available in two editions: standard and extended. With the extended edition you can (a) encode to the WebP format when processing images, and (b) transpile Sass to CSS using the embedded LibSass transpiler. The extended edition is not required to use the Dart Sass transpiler.\nWhen you attempt to perform either of the operations above with the standard edition, Hugo throws this error:\nError: this feature is not available in your current Hugo version To resolve, uninstall the standard edition, then install the extended edition. See the installation section for details.\nWhy do I see “Page Not Found” when visiting the home page? In the content/_index.md file:\nIs draft set to true? Is the date in the future? Is the publishDate in the future? Is the expiryDate in the past? If the answer to any of these questions is yes, either change the field values, or use one of these command line flags: --buildDrafts, --buildFuture, or --buildExpired.\nWhy is a given section not published? In the content/section/_index.md file:\nIs draft set to true? Is the date in the future? Is the publishDate in the future? Is the expiryDate in the past? If the answer to any of these questions is yes, either change the field values, or use one of these command line flags: --buildDrafts, --buildFuture, or --buildExpired.\nWhy is a given page not published? In the content/section/page.md file, or in the content/section/page/index.md file:\nIs draft set to true? Is the date in the future? Is the publishDate in the future? Is the expiryDate in the past? If the answer to any of these questions is yes, either change the field values, or use one of these command line flags: --buildDrafts, --buildFuture, or --buildExpired.\nWhy can’t I see any of a page’s descendants? You may have an index.md file instead of an _index.md file. See details.\nWhat is the difference between an index.md file and an _index.md file? A directory with an index.md file is a leaf bundle. A directory with an _index.md file is a branch bundle. See details.\nWhy is my partial template not rendered as expected? You may have neglected to pass the required context when calling the partial. For example:\n{{/* incorrect */}} {{ partial \"_internal/pagination.html\" }} {{/* correct */}} {{ partial \"_internal/pagination.html\" . }} In a template, what’s the difference between := and = when assigning values to variables? Use := to initialize a variable, and use = to assign a value to a variable that has been previously initialized. See details.\nWhen I paginate a list page, why is the page collection not filtered as specified? You are probably invoking the Paginate or Paginator method more than once on the same page. See details.\nWhy are there two ways to call a shortcode? Use the {{% shortcode %}} notation if the shortcode template, or the content between the opening and closing shortcode tags, contains markdown. Otherwise use the\n{{\u003c shortcode \u003e}} notation. See details.\nCan I use environment variables to control configuration? Yes. See details.\nWhy am I seeing inconsistent output from one build to the next? The most common causes are page collisions (publishing two pages to the same path) and the effects of concurrency. Use the --printPathWarnings command line flag to check for page collisions, and create a topic on the forum if you suspect concurrency problems.\nWhich page methods trigger content rendering? The following methods on a Page object trigger content rendering: Content, FuzzyWordCount, Len, Plain, PlainWords, ReadingTime, Summary, Truncated, and WordCount.\nFor other questions please visit the forum. A quick search of over 20,000 topics will often answer your question. Please be sure to read about requesting help before asking your first question.\n"},{"date":"0001-01-01","uri":"/templates/homepage/","title":"Homepage template","content":"Homepage is a Page and therefore has all the page variables and site variables available for use.\nThe homepage template is the only required template for building a site and therefore useful when bootstrapping a new site and template. It is also the only required template if you are developing a single-page website.\nHomepage template lookup order See Template Lookup.\nAdd content and front matter to the homepage The homepage, similar to other list pages in Hugo, accepts content and front matter from an _index.md file. This file should live at the root of your content folder (i.e., content/_index.md). You can then add body copy and metadata to your homepage the way you would any other content file.\nSee the homepage template below or Content Organization for more information on the role of _index.md in adding content and front matter to list pages.\nExample homepage template The following is an example of a homepage template that uses partial, base templates, and a content file at content/_index.md to populate the {{ .Title }} and {{ .Content }} page variables.\nlayouts/index.html\r{{ define \"main\" }} \u003cmain aria-role=\"main\"\u003e \u003cheader class=\"homepage-header\"\u003e \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ with .Params.subtitle }} \u003cspan class=\"subtitle\"\u003e{{ . }}\u003c/span\u003e {{ end }} \u003c/header\u003e \u003cdiv class=\"homepage-content\"\u003e \u003c!-- Note that the content for index.html, as a sort of list page, will pull from content/_index.md --\u003e {{ .Content }} \u003c/div\u003e \u003cdiv\u003e {{ range first 10 .Site.RegularPages }} {{ .Render \"summary\" }} {{ end }} \u003c/div\u003e \u003c/main\u003e {{ end }}\r"},{"date":"0001-01-01","uri":"/about/license/","title":"License","content":"Apache License Version 2.0, January 2004\nhttp://www.apache.org/licenses/\nTerms and Conditions for use, reproduction, and distribution 1. Definitions “License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n“Legal Entity” shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, “control” means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n“You” (or “Your”) shall mean an individual or Legal Entity exercising permissions granted by this License.\n“Source” form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n“Object” form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n“Work” shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n“Derivative Works” shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n“Contribution” shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, “submitted” means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as “Not a Contribution.”\n“Contributor” shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n2. Grant of Copyright License Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n3. Grant of Patent License Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n4. Redistribution You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a “NOTICE” text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n5. Submission of Contributions Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n6. Trademarks This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n7. Disclaimer of Warranty Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n8. Limitation of Liability In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n9. Accepting Warranty or Additional Liability While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n"},{"date":"0001-01-01","uri":"/variables/shortcode/","title":"Shortcode variables","content":"\rWe are making an effort to unify our terminology, and to use these terms consistently throughout the documentation.\nHistorically, we have inconsistently referred to the items on this page as functions, parameters, variables, or methods. They are not functions, parameters, or variables; they are methods.\nThis page will remain in place as readers become familiar with the unified terminology. See the methods section for a list of methods by object, or the methods quick reference guide.\n.Get\rReturns the value of the given parameter.\r.Inner\rReturns the content between opening and closing shortcode tags, applicable when the shortcode call includes a closing tag.\r.InnerDeindent\rReturns the content between opening and closing shortcode tags, with indentation removed, applicable when the shortcode call includes a closing tag.\r.IsNamedParams\rReports whether the shortcode call uses named parameters.\r.Name\rReturns the shortcode file name, excluding the file extension.\r.Ordinal\rReturns the zero-based ordinal of the shortcode in relation to its parent.\r.Page\rReturns the Page object from which the shortcode was called.\r.Params\rReturns a collection of the shortcode parameters.\r.Parent\rReturns the parent shortcode context in nested shortcodes.\r.Position\rReturns the filename and position from which the shortcode was called.\r.Ref\rReturns the absolute URL of the page with the given path, language, and output format.\r.RelRef\rReturns the relative URL of the page with the given path, language, and output format.\r.Scratch\rCreates a “scratch pad” scoped to the shortcode to store and manipulate data.\r.Site\rReturns the Site object.\r"},{"date":"0001-01-01","uri":"/hugo-pipes/minification/","title":"Minify","content":"Usage Any CSS, JS, JSON, HTML, SVG, or XML resource can be minified using resources.Minify which takes for argument the resource object.\n{{ $css := resources.Get \"css/main.css\" }} {{ $style := $css | resources.Minify }} Note that you can also minify the final HTML output to /public by running hugo --minify.\n"},{"date":"0001-01-01","uri":"/content-management/page-resources/","title":"Page resources","content":"Page resources are only accessible from page bundles, those directories with index.md or _index.md files at their root. Page resources are only available to the page with which they are bundled.\nIn this example, first-post is a page bundle with access to 10 page resources including audio, data, documents, images, and video. Although second-post is also a page bundle, it has no page resources and is unable to directly access the page resources associated with first-post.\ncontent └── post ├── first-post │ ├── images │ │ ├── a.jpg │ │ ├── b.jpg │ │ └── c.jpg │ ├── index.md (root of page bundle) │ ├── latest.html │ ├── manual.json │ ├── notice.md │ ├── office.mp3 │ ├── pocket.mp4 │ ├── rating.pdf │ └── safety.txt └── second-post └── index.md (root of page bundle) Properties ResourceType The main type of the resource’s Media Type. For example, a file of MIME type image/jpeg has the ResourceType image. A Page will have ResourceType with value page. Name Default value is the file name (relative to the owning page). Can be set in front matter. Title Default value is the same as .Name. Can be set in front matter. Permalink The absolute URL to the resource. Resources of type page will have no value. RelPermalink The relative URL to the resource. Resources of type page will have no value. Content The content of the resource itself. For most resources, this returns a string with the contents of the file. Use this to create inline resources. {{ with .Resources.GetMatch \"script.js\" }} \u003cscript\u003e{{ .Content | safeJS }}\u003c/script\u003e {{ end }} {{ with .Resources.GetMatch \"style.css\" }} \u003cstyle\u003e{{ .Content | safeCSS }}\u003c/style\u003e {{ end }} {{ with .Resources.GetMatch \"img.png\" }} \u003cimg src=\"data:{{ .MediaType.Type }};base64,{{ .Content | base64Encode }}\"\u003e {{ end }} MediaType.Type The media type (formerly known as a MIME type) of the resource (e.g., image/jpeg). MediaType.MainType The main type of the resource’s media type (e.g., image). MediaType.SubType The subtype of the resource’s type (e.g., jpeg). This may or may not correspond to the file suffix. MediaType.Suffixes A slice of possible file suffixes for the resource’s media type (e.g., [jpg jpeg jpe jif jfif]). Methods ByType Returns the page resources of the given type. {{ .Resources.ByType \"image\" }} Match Returns all the page resources (as a slice) whose Name matches the given Glob pattern (examples). The matching is case-insensitive. {{ .Resources.Match \"images/*\" }} GetMatch Same as Match but will return the first match. Pattern matching // Using Match/GetMatch to find this images/sunset.jpg ? .Resources.Match \"images/sun*\" ✅ .Resources.Match \"**/sunset.jpg\" ✅ .Resources.Match \"images/*.jpg\" ✅ .Resources.Match \"**.jpg\" ✅ .Resources.Match \"*\" 🚫 .Resources.Match \"sunset.jpg\" 🚫 .Resources.Match \"*sunset.jpg\" 🚫 Page resources metadata The page resources’ metadata is managed from the corresponding page’s front matter with an array/table parameter named resources. You can batch assign values using wildcards.\nResources of type page get Title etc. from their own front matter.\nname Sets the value returned in Name. The methods Match, Get and GetMatch use Name to match the resources.\ntitle Sets the value returned in Title params A map of custom key/values. Resources metadata example yaml\r \rtoml\r \rjson\r \rdate: \"2018-01-25\" resources: - name: header src: images/sunset.jpg - params: icon: photo src: documents/photo_specs.pdf title: Photo Specifications - src: documents/guide.pdf title: Instruction Guide - src: documents/checklist.pdf title: Document Checklist - src: documents/payment.docx title: Proof of Payment - name: pdf-file-:counter params: icon: pdf src: '**.pdf' - params: icon: word src: '**.docx' title: Application date = '2018-01-25' title = 'Application' [[resources]] name = 'header' src = 'images/sunset.jpg' [[resources]] src = 'documents/photo_specs.pdf' title = 'Photo Specifications' [resources.params] icon = 'photo' [[resources]] src = 'documents/guide.pdf' title = 'Instruction Guide' [[resources]] src = 'documents/checklist.pdf' title = 'Document Checklist' [[resources]] src = 'documents/payment.docx' title = 'Proof of Payment' [[resources]] name = 'pdf-file-:counter' src = '**.pdf' [resources.params] icon = 'pdf' [[resources]] src = '**.docx' [resources.params] icon = 'word' { \"date\": \"2018-01-25\", \"resources\": [ { \"name\": \"header\", \"src\": \"images/sunset.jpg\" }, { \"params\": { \"icon\": \"photo\" }, \"src\": \"documents/photo_specs.pdf\", \"title\": \"Photo Specifications\" }, { \"src\": \"documents/guide.pdf\", \"title\": \"Instruction Guide\" }, { \"src\": \"documents/checklist.pdf\", \"title\": \"Document Checklist\" }, { \"src\": \"documents/payment.docx\", \"title\": \"Proof of Payment\" }, { \"name\": \"pdf-file-:counter\", \"params\": { \"icon\": \"pdf\" }, \"src\": \"**.pdf\" }, { \"params\": { \"icon\": \"word\" }, \"src\": \"**.docx\" } ], \"title\": \"Application\" } From the example above:\nsunset.jpg will receive a new Name and can now be found with .GetMatch \"header\". documents/photo_specs.pdf will get the photo icon. documents/checklist.pdf, documents/guide.pdf and documents/payment.docx will get Title as set by title. Every PDF in the bundle except documents/photo_specs.pdf will get the pdf icon. All PDF files will get a new Name. The name parameter contains a special placeholder :counter, so the Name will be pdf-file-1, pdf-file-2, pdf-file-3. Every docx in the bundle will receive the word icon. The order matters — Only the first set values of the title, name and params-keys will be used. Consecutive parameters will be set only for the ones not already set. In the above example, .Params.icon is first set to \"photo\" in src = \"documents/photo_specs.pdf\". So that would not get overridden to \"pdf\" by the later set src = \"**.pdf\" rule.\nThe :counter placeholder in name and title The :counter is a special placeholder recognized in name and title parameters resources.\nThe counter starts at 1 the first time they are used in either name or title.\nFor example, if a bundle has the resources photo_specs.pdf, other_specs.pdf, guide.pdf and checklist.pdf, and the front matter has specified the resources as:\ncontent/inspections/engine/index.md\ryaml\r \rtoml\r \rjson\r \r--- resources: - src: '*specs.pdf' title: 'Specification #:counter' - name: pdf-file-:counter src: '**.pdf' title: Engine inspections ---\r+++ title = 'Engine inspections' [[resources]] src = '*specs.pdf' title = 'Specification #:counter' [[resources]] name = 'pdf-file-:counter' src = '**.pdf' +++\r{ \"resources\": [ { \"src\": \"*specs.pdf\", \"title\": \"Specification #:counter\" }, { \"name\": \"pdf-file-:counter\", \"src\": \"**.pdf\" } ], \"title\": \"Engine inspections\" } the Name and Title will be assigned to the resource files as follows:\nResource file Name Title checklist.pdf \"pdf-file-1.pdf \"checklist.pdf\" guide.pdf \"pdf-file-2.pdf \"guide.pdf\" other_specs.pdf \"pdf-file-3.pdf \"Specification #1\" photo_specs.pdf \"pdf-file-4.pdf \"Specification #2\" "},{"date":"0001-01-01","uri":"/templates/section-templates/","title":"Section page templates","content":"Add content and front matter to section templates To effectively leverage section page templates, you should first understand Hugo’s content organization and, specifically, the purpose of _index.md for adding content and front matter to section and other list pages.\nSection template lookup order See Template Lookup.\nPage kinds Every Page in Hugo has a .Kind attribute.\nKind Description Example home The landing page for the home page /index.html page The landing page for a given page my-post page (/posts/my-post/index.html) section The landing page of a given section posts section (/posts/index.html) taxonomy The landing page for a taxonomy tags taxonomy (/tags/index.html) term The landing page for one taxonomy’s term term awesome in tags taxonomy (/tags/awesome/index.html) Four other page kinds unrelated to content are robotsTXT, RSS, sitemap, and 404. Although primarily for internal use, you can specify the name when disabling one or more page kinds on your site. For example:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdisableKinds: - robotsTXT - \"404\" disableKinds = ['robotsTXT', '404'] { \"disableKinds\": [ \"robotsTXT\", \"404\" ] } .Site.GetPage with sections Kind can easily be combined with the where function in your templates to create kind-specific lists of content. This method is ideal for creating lists, but there are times where you may want to fetch just the index page of a single section via the section’s path.\nThe .GetPage function looks up an index page of a given Kind and path.\nYou can call .Site.GetPage with two arguments: kind (one of the valid values of Kind from above) and kind value.\nExamples:\n{{ .Site.GetPage \"section\" \"posts\" }} {{ .Site.GetPage \"page\" \"search\" }} Example: creating a default section template layouts/_default/section.html\r{{ define \"main\" }} \u003cmain\u003e {{ .Content }} \u003cul class=\"contents\"\u003e {{ range .Paginator.Pages }} \u003cli\u003e{{ .Title }} \u003cdiv\u003e {{ partial \"summary.html\" . }} \u003c/div\u003e \u003c/li\u003e {{ end }} \u003c/ul\u003e {{ partial \"pagination.html\" . }} \u003c/main\u003e {{ end }}\rExample: using .Site.GetPage The .Site.GetPage example that follows assumes the following project directory structure:\n. └── content ├── blog │ ├── _index.md # \"title: My Hugo Blog\" in the front matter │ ├── post-1.md │ ├── post-2.md │ └── post-3.md └── events #Note there is no _index.md file in \"events\" ├── event-1.md └── event-2.md .Site.GetPage will return nil if no _index.md page is found. Therefore, if content/blog/_index.md does not exist, the template will output the section name:\n\u003ch1\u003e{{ with .Site.GetPage \"section\" \"blog\" }}{{ .Title }}{{ end }}\u003c/h1\u003e Since blog has a section index page with front matter at content/blog/_index.md, the above code will return the following result:\n\u003ch1\u003eMy Hugo Blog\u003c/h1\u003e If we try the same code with the events section, however, Hugo will default to the section title because there is no content/events/_index.md from which to pull content and front matter:\n\u003ch1\u003e{{ with .Site.GetPage \"section\" \"events\" }}{{ .Title }}{{ end }}\u003c/h1\u003e Which then returns the following:\n\u003ch1\u003eEvents\u003c/h1\u003e "},{"date":"0001-01-01","uri":"/variables/site/","title":"Site variables","content":"\rWe are making an effort to unify our terminology, and to use these terms consistently throughout the documentation.\nHistorically, we have inconsistently referred to the items on this page as functions, parameters, variables, or methods. They are not functions, parameters, or variables; they are methods.\nThis page will remain in place as readers become familiar with the unified terminology. See the methods section for a list of methods by object, or the methods quick reference guide.\nAll methods Use any of these methods in your templates.\n.Site.AllPages\rReturns a collection of all pages in all languages.\r.Site.BaseURL\rReturns the base URL as defined in the site configuration.\r.Site.BuildDrafts\rReports whether the current build includes draft pages.\r.Site.Config\rReturns a subset of the site configuration.\r.Site.Copyright\rReturns the copyright notice as defined in the site configuration.\r.Site.Data\rReturns a data structure composed from the files in the data directory.\r.Site.DisqusShortname\rReturns the Disqus shortname as defined in the site configuration.\r.Site.GetPage\rReturns a Page object from the given path.\r.Site.GoogleAnalytics\rReturns the Google Analytics tracking ID as defined in the site configuration.\r.Site.Home\rReturns the home Page object for the given site.\r.Site.IsDevelopment\rReports whether the current running environment is “development”.\r.Site.IsMultiLingual\rReports whether the site is multilingual.\r.Site.IsServer\rReports whether the built-in development server is running.\r.Site.Language\rReturns the language object for the given site.\r.Site.LanguagePrefix\rReturns the URL language prefix, if any, for the given site.\r.Site.Languages\rReturns a collection of language objects for all sites, ordered by language weight.\r.Site.LastChange\rReturns the last modification date of site content.\r.Site.MainSections\rReturns a slice of the main section names as defined in the site configuration, falling back to the top level section with the most pages.\r.Site.Menus\rReturns a collection of menu objects for the given site.\r.Site.Pages\rReturns a collection of all pages.\r.Site.Param\rReturns the site parameter with the given key.\r.Site.Params\rReturns a map of custom parameters as defined in the site configuration.\r.Site.RegularPages\rReturns a collection of all regular pages.\r.Site.Sections\rReturns a collection of first level section pages.\r.Site.Sites\rReturns a collection of all Site objects, one for each language, ordered by language weight.\r.Site.Taxonomies\rReturns a data structure containing the site’s taxonomy objects, the terms within each taxonomy object, and the pages to which the terms are assigned.\r.Site.Title\rReturns the title as defined in the site configuration.\rMultilingual Use these methods with your multilingual projects.\n.Site.IsMultiLingual\rReports whether the site is multilingual.\r.Site.Language\rReturns the language object for the given site.\r.Site.LanguagePrefix\rReturns the URL language prefix, if any, for the given site.\r.Site.Languages\rReturns a collection of language objects for all sites, ordered by language weight.\rPage collections Range through these collections when rendering lists on any page.\n.Site.Pages\rReturns a collection of all pages.\r.Site.RegularPages\rReturns a collection of all regular pages.\r.Site.Sections\rReturns a collection of first level section pages.\rGlobal site function Within a partial template, if you did not pass a Page or Site object in context, you cannot use this syntax:\n{{ .Site.SomeMethod }} Instead, use the global site function:\n{{ site.SomeMethod }} You can use the global site function in all templates to avoid context problems. Its usage is not limited to partial templates.\n"},{"date":"0001-01-01","uri":"/hugo-pipes/bundling/","title":"Concat","content":"Usage Asset files of the same MIME type can be bundled into one resource using resources.Concat which takes two arguments, the target path for the created resource bundle and a slice of resource objects to be concatenated.\n{{ $plugins := resources.Get \"js/plugins.js\" }} {{ $global := resources.Get \"js/global.js\" }} {{ $js := slice $plugins $global | resources.Concat \"js/bundle.js\" }} "},{"date":"0001-01-01","uri":"/content-management/image-processing/","title":"Image processing","content":"Image resources To process an image you must access the file as a page resource, global resource, or remote resource.\nPage resource A page resource is a file within a page bundle. A page bundle is a directory with an index.md or _index.md file at its root.\ncontent/ └── posts/ └── post-1/ \u003c-- page bundle ├── index.md └── sunset.jpg \u003c-- page resource To access an image as a page resource:\n{{ $image := .Resources.Get \"sunset.jpg\" }} Global resource A global resource is a file within the assets directory, or within any directory mounted to the assets directory.\nassets/ └── images/ └── sunset.jpg \u003c-- global resource To access an image as a global resource:\n{{ $image := resources.Get \"images/sunset.jpg\" }} Remote resource A remote resource is a file on a remote server, accessible via HTTP or HTTPS. To access an image as a remote resource:\n{{ $image := resources.GetRemote \"https://gohugo.io/img/hugo-logo.png\" }} Image rendering Once you have accessed an image as either a page resource or a global resource, render it in your templates using the Permalink, RelPermalink, Width, and Height properties.\nExample 1: Throws an error if the resource is not found.\n{{ $image := .Resources.GetMatch \"sunset.jpg\" }} \u003cimg src=\"{{ $image.RelPermalink }}\" width=\"{{ $image.Width }}\" height=\"{{ $image.Height }}\"\u003e Example 2: Skips image rendering if the resource is not found.\n{{ $image := .Resources.GetMatch \"sunset.jpg\" }} {{ with $image }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\"\u003e {{ end }} Example 3: A more concise way to skip image rendering if the resource is not found.\n{{ with .Resources.GetMatch \"sunset.jpg\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\"\u003e {{ end }} Example 4: Skips rendering if there’s problem accessing a remote resource.\n{{ $u := \"https://gohugo.io/img/hugo-logo.png\" }} {{ with resources.GetRemote $u }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\"\u003e {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $u }} {{ end }} Image processing methods The image resource implements the Process, Resize, Fit, Fill, Crop, Filter, Colors and Exif methods.\nMetadata (EXIF, IPTC, XMP, etc.) is not preserved during image transformation. Use the Exif method with the original image to extract EXIF metadata from JPEG or TIFF images.\nProcess New in v0.119.0\rThe Process method is also available as a filter, which is more effective if you need to apply multiple filters to an image. See Process filter.\nProcess processes the image with the given specification. The specification can contain an optional action, one of resize, crop, fit or fill. This means that you can use this method instead of Resize, Fit, Fill, or Crop.\nSee Options for available options.\nYou can also use this method apply image processing that does not need any scaling, e.g. format conversions:\n{{/* Convert the image from JPG to PNG. */}} {{ $png := $jpg.Process \"png\" }} Some more examples:\n{{/* Rotate the image 90 degrees counter-clockwise. */}} {{ $image := $image.Process \"r90\" }} {{/* Scaling actions. */}} {{ $image := $image.Process \"resize 600x\" }} {{ $image := $image.Process \"crop 600x400\" }} {{ $image := $image.Process \"fit 600x400\" }} {{ $image := $image.Process \"fill 600x400\" }} Resize Resize an image to the given width and/or height.\nIf you specify both width and height, the resulting image will be disproportionally scaled unless the original image has the same aspect ratio.\n{{/* Resize to a width of 600px and preserve aspect ratio */}} {{ $image := $image.Resize \"600x\" }} {{/* Resize to a height of 400px and preserve aspect ratio */}} {{ $image := $image.Resize \"x400\" }} {{/* Resize to a width of 600px and a height of 400px */}} {{ $image := $image.Resize \"600x400\" }} Fit Downscale an image to fit the given dimensions while maintaining aspect ratio. You must provide both width and height.\n{{ $image := $image.Fit \"600x400\" }} Fill Crop and resize an image to match the given dimensions. You must provide both width and height. Use the anchor option to change the crop box anchor point.\n{{ $image := $image.Fill \"600x400\" }} Crop Crop an image to match the given dimensions without resizing. You must provide both width and height. Use the anchor option to change the crop box anchor point.\n{{ $image := $image.Crop \"600x400\" }} Filter Apply one or more filters to an image.\n{{ $image := $image.Filter (images.GaussianBlur 6) (images.Pixelate 8) }} Write this in a more functional style using pipes. Hugo applies the filters in the order given.\n{{ $image := $image | images.Filter (images.GaussianBlur 6) (images.Pixelate 8) }} Sometimes it can be useful to create the filter chain once and then reuse it.\n{{ $filters := slice (images.GaussianBlur 6) (images.Pixelate 8) }} {{ $image1 := $image1.Filter $filters }} {{ $image2 := $image2.Filter $filters }} Colors New in v0.104.0\r.Colors returns a slice of hex strings with the dominant colors in the image using a simple histogram method.\n{{ $colors := $image.Colors }} This method is fast, but if you also scale down your images, it would be good for performance to extract the colors from the scaled down image.\nEXIF Provides an EXIF object containing image metadata.\nYou may access EXIF data in JPEG and TIFF images. To prevent errors when processing images without EXIF data, wrap the access in a with statement.\n{{ with $image.Exif }} Date: {{ .Date }} Lat/Long: {{ .Lat }}/{{ .Long }} Tags: {{ range $k, $v := .Tags }} TAG: {{ $k }}: {{ $v }} {{ end }} {{ end }} You may also access EXIF fields individually, using the lang.FormatNumber function to format the fields as needed.\n{{ with $image.Exif }} \u003cul\u003e {{ with .Date }}\u003cli\u003eDate: {{ .Format \"January 02, 2006\" }}\u003c/li\u003e{{ end }} {{ with .Tags.ApertureValue }}\u003cli\u003eAperture: {{ lang.FormatNumber 2 . }}\u003c/li\u003e{{ end }} {{ with .Tags.BrightnessValue }}\u003cli\u003eBrightness: {{ lang.FormatNumber 2 . }}\u003c/li\u003e{{ end }} {{ with .Tags.ExposureTime }}\u003cli\u003eExposure Time: {{ . }}\u003c/li\u003e{{ end }} {{ with .Tags.FNumber }}\u003cli\u003eF Number: {{ . }}\u003c/li\u003e{{ end }} {{ with .Tags.FocalLength }}\u003cli\u003eFocal Length: {{ . }}\u003c/li\u003e{{ end }} {{ with .Tags.ISOSpeedRatings }}\u003cli\u003eISO Speed Ratings: {{ . }}\u003c/li\u003e{{ end }} {{ with .Tags.LensModel }}\u003cli\u003eLens Model: {{ . }}\u003c/li\u003e{{ end }} \u003c/ul\u003e {{ end }} EXIF variables .Date Image creation date/time. Format with the time.Format function. .Lat GPS latitude in degrees. .Long GPS longitude in degrees. .Tags A collection of the available EXIF tags for this image. You may include or exclude specific tags from this collection in the site configuration. Image processing options The Resize, Fit, Fill, and Crop methods accept a space-delimited, case-insensitive list of options. The order of the options within the list is irrelevant.\nDimensions With the Resize method you must specify width, height, or both. The Fit, Fill, and Crop methods require both width and height. All dimensions are in pixels.\n{{ $image := $image.Resize \"600x\" }} {{ $image := $image.Resize \"x400\" }} {{ $image := $image.Resize \"600x400\" }} {{ $image := $image.Fit \"600x400\" }} {{ $image := $image.Fill \"600x400\" }} {{ $image := $image.Crop \"600x400\" }} Rotation Rotates an image counter-clockwise by the given angle. Hugo performs rotation before scaling. For example, if the original image is 600x400 and you wish to rotate the image 90 degrees counter-clockwise while scaling it by 50%:\n{{ $image = $image.Resize \"200x r90\" }} In the example above, the width represents the desired width after rotation.\nTo rotate an image without scaling, use the dimensions of the original image:\n{{ with .Resources.GetMatch \"sunset.jpg\" }} {{ with .Resize (printf \"%dx%d r90\" .Height .Width) }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\"\u003e {{ end }} {{ end }} In the example above, on the second line, we have reversed width and height to reflect the desired dimensions after rotation.\nAnchor When using the Crop or Fill method, the anchor determines the placement of the crop box. You may specify TopLeft, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight, or Smart.\nThe default value is Smart, which uses Smartcrop image analysis to determine the optimal placement of the crop box. You may override the default value in the site configuration.\nFor example, if you have a 400x200 image with a bird in the upper left quadrant, you can create a 200x100 thumbnail containing the bird:\n{{ $image.Crop \"200x100 TopLeft\" }} If you apply rotation when using the Crop or Fill method, specify the anchor relative to the rotated image.\nTarget format By default, Hugo encodes the image in the source format. You may convert the image to another format by specifying bmp, gif, jpeg, jpg, png, tif, tiff, or webp.\n{{ $image.Resize \"600x webp\" }} To convert an image without scaling, use the dimensions of the original image:\n{{ with .Resources.GetMatch \"sunset.jpg\" }} {{ with .Resize (printf \"%dx%d webp\" .Width .Height) }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\"\u003e {{ end }} {{ end }} Quality Applicable to JPEG and WebP images, the q value determines the quality of the converted image. Higher values produce better quality images, while lower values produce smaller files. Set this value to a whole number between 1 and 100, inclusive.\nThe default value is 75. You may override the default value in the site configuration.\n{{ $image.Resize \"600x webp q50\" }} Hint Applicable to WebP images, this option corresponds to a set of predefined encoding parameters, and is equivalent to the -preset flag for the cwebp encoder.\nValue Example drawing Hand or line drawing with high-contrast details icon Small colorful image photo Outdoor photograph with natural lighting picture Indoor photograph such as a portrait text Image that is primarily text The default value is photo. You may override the default value in the site configuration.\n{{ $image.Resize \"600x webp picture\" }} Background color When converting an image from a format that supports transparency (e.g., PNG) to a format that does not support transparency (e.g., JPEG), you may specify the background color of the resulting image.\nUse either a 3-digit or 6-digit hexadecimal color code (e.g., #00f or #0000ff).\nThe default value is #ffffff (white). You may override the default value in the site configuration.\n{{ $image.Resize \"600x jpg #b31280\" }} Resampling filter You may specify the resampling filter used when resizing an image. Commonly used resampling filters include:\nFilter Description Box Simple and fast averaging filter appropriate for downscaling Lanczos High-quality resampling filter for photographic images yielding sharp results CatmullRom Sharp cubic filter that is faster than the Lanczos filter while providing similar results MitchellNetravali Cubic filter that produces smoother results with less ringing artifacts than CatmullRom Linear Bilinear resampling filter, produces smooth output, faster than cubic filters NearestNeighbor Fastest resampling filter, no antialiasing The default value is Box. You may override the default value in the site configuration.\n{{ $image.Resize \"600x400 Lanczos\" }} See github.com/disintegration/imaging for the complete list of resampling filters. If you wish to improve image quality at the expense of performance, you may wish to experiment with the alternative filters.\nImage processing examples The photo of the sunset used in the examples below is Copyright Bjørn Erik Pedersen (Creative Commons Attribution-Share Alike 4.0 International license)\nresize 300x\rfill 90x120 left\rfill 90x120 right\rfit 90x90\rcrop 250x250 center\rresize 300x q10\rThis is the shortcode used to generate the examples above:\n{{- /* Renders the given image using the given process specification. @param {string} (positional parameter 0) The path to the image, relative to the current page. The image must be a page resource. @param {string}} (positional parameter 1) The image processing specification. @returns template.HTML @example {{\u003c imgproc \"sunset.jpg\" \"resize 300x\" /\u003e}} */}} {{- with $.Get 0 }} {{- with $i := $.Page.Resources.Get . }} {{- with $spec := $.Get 1 }} {{- with $i.Process . }} \u003cfigure style=\"padding: 0.25rem; margin: 2rem 0; background-color: #cccc\"\u003e \u003cimg style=\"max-width: 100%; width: auto; height: auto;\" src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e \u003cfigcaption\u003e \u003csmall\u003e {{- with $.Inner }} {{ . }} {{- else }} {{ $spec }} {{- end }} \u003c/small\u003e \u003c/figcaption\u003e \u003c/figure\u003e {{- end }} {{- else }} {{- errorf \"The %q shortcode requires a positional parameter (1) containing the image processing specification. See %s\" $.Name $.Position }} {{- end }} {{- else }} {{- errorf \"The %q shortcode was unable to find %q. See %s\" $.Name . $.Position }} {{- end }} {{- else }} {{- errorf \"The %q shortcode requires a positional parameter (0) indicating the image path, relative to the current page. See %s\" $.Name $.Position }} {{- end }}\rCall the shortcode from your Markdown like this:\n{{\u003c imgproc \"sunset.jpg\" \"resize 300x\" /\u003e}} Note the self-closing shortcode syntax above. You may call the imgproc shortcode with or without inner content.\nImaging configuration Processing options Define an imaging section in your site configuration to set the default image processing options.\nhugo.\ryaml\r \rtoml\r \rjson\r \rimaging: bgColor: '#ffffff' hint: photo quality: 75 resampleFilter: box [imaging] bgColor = '#ffffff' hint = 'photo' quality = 75 resampleFilter = 'box' { \"imaging\": { \"bgColor\": \"#ffffff\", \"hint\": \"photo\", \"quality\": 75, \"resampleFilter\": \"box\" } } anchor See image processing options: anchor. bgColor See image processing options: background color. hint See image processing options: hint. quality See image processing options: quality. resampleFilter See image processing options: resampling filter. EXIF data Define an imaging.exif section in your site configuration to control the availability of EXIF data.\nhugo.\ryaml\r \rtoml\r \rjson\r \rimaging: exif: disableDate: false disableLatLong: false excludeFields: \"\" includeFields: \"\" [imaging] [imaging.exif] disableDate = false disableLatLong = false excludeFields = '' includeFields = '' { \"imaging\": { \"exif\": { \"disableDate\": false, \"disableLatLong\": false, \"excludeFields\": \"\", \"includeFields\": \"\" } } } disableDate Hugo extracts the image creation date/time into .Date. Set this to true to disable. Default is false. disableLatLong Hugo extracts the GPS latitude and longitude into .Lat and .Long. Set this to true to disable. Default is false. excludeFields Regular expression matching the EXIF tags to exclude from the .Tags collection. Default is \"\". includeFields Regular expression matching the EXIF tags to include in the .Tags collection. Default is \"\". To include all available tags, set this value to \".*\". To improve performance and decrease cache size, Hugo excludes the following tags: ColorSpace, Contrast, Exif, Exposure[M|P|B], Flash, GPS, JPEG, Metering, Resolution, Saturation, Sensing, Sharp, and WhiteBalance.\nTo control tag availability, change the excludeFields or includeFields settings as described above.\nSmart cropping of images By default, Hugo uses the Smartcrop library when cropping images with the Crop orFill methods. You can set the anchor point manually, but in most cases the Smart option will make a good choice.\nExamples using the sunset image from above:\nfill 200x200 smart\rcrop 200x200 smart\rImage processing performance consideration Hugo caches processed images in the resources directory. If you include this directory in source control, Hugo will not have to regenerate the images in a CI/CD workflow (e.g., GitHub Pages, GitLab Pages, Netlify, etc.). This results in faster builds.\nIf you change image processing methods or options, or if you rename or remove images, the resources directory will contain unused images. To remove the unused images, perform garbage collection with:\nhugo --gc "},{"date":"0001-01-01","uri":"/templates/taxonomy-templates/","title":"Taxonomy templates","content":"Hugo includes support for user-defined groupings of content called taxonomies. Taxonomies are classifications that demonstrate logical relationships between content. See Taxonomies under Content Management if you are unfamiliar with how Hugo leverages this powerful feature.\nHugo provides multiple ways to use taxonomies throughout your project templates:\nOrder the way content associated with a taxonomy term is displayed in a taxonomy list template Order the way the terms for a taxonomy are displayed in a taxonomy terms template List a single content’s taxonomy terms within a single page template Taxonomy list templates Taxonomy list page templates are lists and therefore have all the variables and methods available to list pages.\nTaxonomy list template lookup order See Template Lookup.\nTaxonomy terms templates Taxonomy terms templates lookup order See Template Lookup.\nTaxonomy methods A Taxonomy is a map[string]WeightedPages.\n.Get TERM Returns the WeightedPages for a given term. For example: ; site.Taxonomies.tags.Get \"tag-a\". .Count TERM The number of pieces of content assigned to the given term. For example: site.Taxonomies.tags.Count \"tag-a\". .Alphabetical Returns an OrderedTaxonomy (slice) ordered by term. .ByCount Returns an OrderedTaxonomy (slice) ordered by number of entries. .Reverse Returns an OrderedTaxonomy (slice) in reverse order. Must be used with an OrderedTaxonomy. OrderedTaxonomy Since Maps are unordered, an OrderedTaxonomy is a special structure that has a defined order.\n[]struct { Name string WeightedPages WeightedPages } Each element of the slice has:\n.Term The Term used. .WeightedPages A slice of Weighted Pages. .Count The number of pieces of content assigned to this term. .Page Returns a page reference for this term. .Pages All Pages assigned to this term. All list methods are available to this. WeightedPages WeightedPages is simply a slice of WeightedPage.\ntype WeightedPages []WeightedPage .Count The number of pieces of content assigned to this term. .Page Returns a page reference for this term. .Pages Returns a slice of pages, which then can be ordered using any of the list methods. Displaying custom metadata in taxonomy terms templates If you need to display custom metadata for each taxonomy term, you will need to create a page for that term at /content/\u003cTAXONOMY\u003e/\u003cTERM\u003e/_index.md and add your metadata in its front matter, as explained in the taxonomies documentation. Based on the Actors taxonomy example shown there, within your taxonomy terms template, you may access your custom fields by iterating through the variable .Pages as such:\n\u003cul\u003e {{ range .Pages }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e {{ .Params.wikipedia }} \u003c/li\u003e {{ end }} \u003c/ul\u003e Order taxonomies Taxonomies can be ordered by either alphabetical key or by the number of content pieces assigned to that key.\nOrder alphabetically example \u003cul\u003e {{ range .Data.Terms.Alphabetical }} \u003cli\u003e\u003ca href=\"{{ .Page.Permalink }}\"\u003e{{ .Page.Title }}\u003c/a\u003e {{ .Count }}\u003c/li\u003e {{ end }} \u003c/ul\u003e Order content within taxonomies Hugo uses both date and weight to order content within taxonomies.\nEach piece of content in Hugo can optionally be assigned a date. It can also be assigned a weight for each taxonomy it is assigned to.\nWhen iterating over content within taxonomies, the default sort is the same as that used for section and list pages: first by weight, then by date. This means that if the weights for two pieces of content are the same, then the more recent content will be displayed first.\nThe default weight for any piece of content is 0. Zero means “does not have a weight”, not “has a weight of numerical value zero”.\nWeights of zero are thus treated specially: if two pages have unequal weights, and one of them is zero, then the zero-weighted page will always appear after the other one, regardless of the other’s weight. Zero weights should thus be used with care: for example, if both positive and negative weights are used to extend a sequence in both directions, a zero-weighted page will appear not in the middle of the list, but at the end.\nAssign weight Content can be assigned weight for each taxonomy that it’s assigned to.\ncontent/example.md\ryaml\r \rtoml\r \rjson\r \r--- categories: - d categories_weight: 44 tags: - a - b - c tags_weight: 22 title: Example ---\r+++ categories = ['d'] categories_weight = 44 tags = ['a', 'b', 'c'] tags_weight = 22 title = 'Example' +++\r{ \"categories\": [ \"d\" ], \"categories_weight\": 44, \"tags\": [ \"a\", \"b\", \"c\" ], \"tags_weight\": 22, \"title\": \"Example\" } The convention is taxonomyname_weight.\nIn the above example, this piece of content has a weight of 22 which applies to the sorting when rendering the pages assigned to the “a”, “b” and “c” values of the ’tag’ taxonomy.\nIt has also been assigned the weight of 44 when rendering the ’d’ category.\nWith this the same piece of content can appear in different positions in different taxonomies.\nCurrently taxonomies only support the default ordering of content which is weight -\u003e date.\nThere are two different templates that the use of taxonomies will require you to provide.\nBoth templates are covered in detail in the templates section.\nA list template is any template that will be used to render multiple pieces of content in a single html page. This template will be used to generate all the automatically created taxonomy pages.\nA taxonomy template is a template used to generate the list of terms for a given template.\nThere are four common ways you can display the data in your taxonomies in addition to the automatic taxonomy pages created by hugo using the list templates:\nFor a given piece of content, you can list the terms attached For a given piece of content, you can list other content with the same term You can list all terms for a taxonomy You can list all taxonomies (with their terms) List terms assigned to a page List the terms assigned to a page using the .Page.GetTerms method.\nTo render an unordered list:\n{{ $taxonomy := \"tags\" }} {{ with .GetTerms $taxonomy }} \u003cp\u003e{{ (site.GetPage $taxonomy).LinkTitle }}:\u003c/p\u003e \u003cul\u003e {{ range . }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} To render a comma-delimited list:\n{{ $taxonomy := \"tags\" }} {{ with .GetTerms $taxonomy }} \u003cp\u003e {{ (site.GetPage $taxonomy).LinkTitle }}: {{ range $k, $_ := . -}} {{ if $k }}, {{ end }} \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e {{- end }} \u003c/p\u003e {{ end }} List content with the same taxonomy term If you are using a taxonomy for something like a series of posts, you can list individual pages associated with the same taxonomy. This is also a quick and dirty method for showing related content:\nExample: showing content in same series \u003cul\u003e {{ range .Site.Taxonomies.series.golang }} \u003cli\u003e\u003ca href=\"{{ .Page.RelPermalink }}\"\u003e{{ .Page.Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e List all content in a given taxonomy This would be very useful in a sidebar as “featured content”. You could even have different sections of “featured content” by assigning different terms to the content.\nExample: grouping “featured” content \u003csection id=\"menu\"\u003e \u003cul\u003e {{ range $key, $taxonomy := .Site.Taxonomies.featured }} \u003cli\u003e{{ $key }}\u003c/li\u003e \u003cul\u003e {{ range $taxonomy.Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} \u003c/ul\u003e \u003c/section\u003e Render a site’s taxonomies If you wish to display the list of all keys for your site’s taxonomy, you can retrieve them from the .Site variable available on every page.\nThis may take the form of a tag cloud, a menu, or simply a list.\nThe following example displays all terms in a site’s tags taxonomy:\nExample: list all site tags \u003cul\u003e {{ range .Site.Taxonomies.tags }} \u003cli\u003e\u003ca href=\"{{ .Page.Permalink }}\"\u003e{{ .Page.Title }}\u003c/a\u003e {{ .Count }}\u003c/li\u003e {{ end }} \u003c/ul\u003e Example: list all taxonomies, terms, and assigned content This example will list all taxonomies and their terms, as well as all the content assigned to each of the terms.\nlayouts/partials/all-taxonomies.html\r\u003cul\u003e {{ range $taxonomy, $terms := site.Taxonomies }} \u003cli\u003e {{ with site.GetPage $taxonomy }} \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e {{ end }} \u003cul\u003e {{ range $term, $weightedPages := $terms }} \u003cli\u003e \u003ca href=\"{{ .Page.RelPermalink }}\"\u003e{{ .Page.LinkTitle }}\u003c/a\u003e \u003cul\u003e {{ range $weightedPages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e \u003c/li\u003e {{ end }} \u003c/ul\u003e \u003c/li\u003e {{ end }} \u003c/ul\u003e\r.Site.GetPage for taxonomies Because taxonomies are lists, the .GetPage function can be used to get all the pages associated with a particular taxonomy term using a terse syntax. The following ranges over the full list of tags on your site and links to each of the individual taxonomy pages for each term without having to use the more fragile URL construction of the “List All Site Tags” example above:\nlinks-to-all-tags.html\r{{ $taxo := \"tags\" }} \u003cul class=\"{{ $taxo }}\"\u003e {{ with ($.Site.GetPage (printf \"/%s\" $taxo)) }} {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} {{ end }} \u003c/ul\u003e\r"},{"date":"0001-01-01","uri":"/variables/taxonomy/","title":"Taxonomy variables","content":"\rWe are making an effort to unify our terminology, and to use these terms consistently throughout the documentation.\nHistorically, we have inconsistently referred to the items on this page as functions, parameters, variables, or methods. They are not functions, parameters, or variables; they are methods.\nThis page will remain in place as readers become familiar with the unified terminology. See the methods section for a list of methods by object, or the methods quick reference guide.\n.Alphabetical\rReturns an ordered taxonomy, sorted alphabetically by term.\r.ByCount\rReturns an ordered taxonomy, sorted by the number of pages associated with each term.\r.Count\rReturns the number of number of weighted pages to which the given term has been assigned.\r.Get\rReturns a slice of weighted pages to which the given term has been assigned.\rWithin a taxonomy or term template use the Data method to retrieve information specific to the taxonomy or term.\n"},{"date":"0001-01-01","uri":"/hugo-pipes/fingerprint/","title":"Fingerprint","content":"Usage Fingerprinting and SRI can be applied to any asset file using resources.Fingerprint which takes two arguments, the resource object and an optional hash algorithm.\nThe default hash algorithm is sha256. Other available algorithms are sha384 and (as of Hugo 0.55) sha512 and md5.\nAny so processed asset will bear a .Data.Integrity property containing an integrity string, which is made up of the name of the hash algorithm, one hyphen and the base64-encoded hash sum.\n{{ $js := resources.Get \"js/global.js\" }} {{ $secureJS := $js | resources.Fingerprint \"sha512\" }} \u003cscript src=\"{{ $secureJS.Permalink }}\" integrity=\"{{ $secureJS.Data.Integrity }}\"\u003e\u003c/script\u003e "},{"date":"0001-01-01","uri":"/templates/pagination/","title":"Pagination","content":"The real power of Hugo pagination shines when combined with the where function and its SQL-like operators: first, last, and after. You can even order the content the way you’ve become used to with Hugo.\nConfigure pagination Pagination can be configured in your site configuration:\npaginate default = 10. This setting can be overridden within the template. paginatePath default = page. Allows you to set a different path for your pagination pages. Setting paginate to a positive value will split the list pages for the homepage, sections and taxonomies into chunks of that size. But note that the generation of the pagination pages for sections, taxonomies and homepage is lazy — the pages will not be created if not referenced by a .Paginator (see below).\npaginatePath is used to adapt the URL to the pages in the paginator (the default setting will produce URLs on the form /page/1/.\nList paginator pages Paginate a page collection in list templates for these page kinds: home, section, taxonomy, or term. You cannot paginate a page collection in a template for the page page kind.\nThere are two ways to configure and use a .Paginator:\nThe simplest way is just to call .Paginator.Pages from a template. It will contain the pages for that page. Select another set of pages with the available template functions and ordering options, and pass the slice to .Paginate, e.g. {{ range (.Paginate ( first 50 .Pages.ByTitle )).Pages }} or {{ range (.Paginate .RegularPagesRecursive).Pages }}. For a given Page, it’s one of the options above. The .Paginator is static and cannot change once created.\nIf you call .Paginator or .Paginate multiple times on the same page, you should ensure all the calls are identical. Once either .Paginator or .Paginate is called while generating a page, its result is cached, and any subsequent similar call will reuse the cached result. This means that any such calls which do not match the first one will not behave as written.\n(Remember that function arguments are eagerly evaluated, so a call like $paginator := cond x .Paginator (.Paginate .RegularPagesRecursive) is an example of what you should not do. Use if/else instead to ensure exactly one evaluation.)\nThe global page size setting (Paginate) can be overridden by providing a positive integer as the last argument. The examples below will give five items per page:\n{{ range (.Paginator 5).Pages }} {{ $paginator := .Paginate (where .Pages \"Type\" \"posts\") 5 }} It is also possible to use the GroupBy functions in combination with pagination:\n{{ range (.Paginate (.Pages.GroupByDate \"2006\")).PageGroups }} Build the navigation The .Paginator contains enough information to build a paginator interface.\nThe easiest way to add this to your pages is to include the built-in template (with Bootstrap-compatible styles):\n{{ template \"_internal/pagination.html\" . }} If you use any filters or ordering functions to create your .Paginator and you want the navigation buttons to be shown before the page listing, you must create the .Paginator before it’s used.\nThe following example shows how to create .Paginator before its used:\n{{ $paginator := .Paginate (where .Pages \"Type\" \"posts\") }} {{ template \"_internal/pagination.html\" . }} {{ range $paginator.Pages }} {{ .Title }} {{ end }} Without the where filter, the above example is even simpler:\n{{ template \"_internal/pagination.html\" . }} {{ range .Paginator.Pages }} {{ .Title }} {{ end }} If you want to build custom navigation, you can do so using the .Paginator object, which includes the following properties:\nPageNumber The current page’s number in the pager sequence URL The relative URL to the current pager Pages The pages in the current pager NumberOfElements The number of elements on this page HasPrev Whether there are page(s) before the current Prev The pager for the previous page HasNext Whether there are page(s) after the current Next The pager for the next page First The pager for the first page Last The pager for the last page Pagers A list of pagers that can be used to build a pagination menu PageSize Size of each pager TotalPages The number of pages in the paginator TotalNumberOfElements The number of elements on all pages in this paginator Additional information The pages are built on the following form (BLANK means no value):\n[SECTION/TAXONOMY/BLANK]/index.html [SECTION/TAXONOMY/BLANK]/page/1/index.html =\u003e redirect to [SECTION/TAXONOMY/BLANK]/index.html [SECTION/TAXONOMY/BLANK]/page/2/index.html .... "},{"date":"0001-01-01","uri":"/content-management/shortcodes/","title":"Shortcodes","content":"What a shortcode is Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video \u003ciframe\u003e’s) to Markdown content. We think this contradicts the beautiful simplicity of Markdown’s syntax.\nHugo created shortcodes to circumvent these limitations.\nA shortcode is a simple snippet inside a content file that Hugo will render using a predefined template. Note that shortcodes will not work in template files. If you need the type of drop-in functionality that shortcodes provide but in a template, you most likely want a partial template instead.\nIn addition to cleaner Markdown, shortcodes can be updated any time to reflect new classes, techniques, or standards. At the point of site generation, Hugo shortcodes will easily merge in your changes. You avoid a possibly complicated search and replace operation.\nUse shortcodes In your content files, a shortcode can be called by calling {{% shortcodename parameters %}}. Shortcode parameters are space delimited, and parameters with internal spaces can be quoted.\nThe first word in the shortcode declaration is always the name of the shortcode. Parameters follow the name. Depending upon how the shortcode is defined, the parameters may be named, positional, or both, although you can’t mix parameter types in a single call. The format for named parameters models that of HTML with the format name=\"value\".\nSome shortcodes use or require closing shortcodes. Again like HTML, the opening and closing shortcodes match (name only) with the closing declaration, which is prepended with a slash.\nHere are two examples of paired shortcodes:\n{{% mdshortcode %}}Stuff to `process` in the *center*.{{% /mdshortcode %}} {{\u003c highlight go \u003e}} A bunch of code here {{\u003c /highlight \u003e}} The examples above use two different delimiters, the difference being the % character in the first and the \u003c\u003e characters in the second.\nShortcodes with raw string parameters You can pass multiple lines as parameters to a shortcode by using raw string literals:\n{{\u003c myshortcode `This is some \u003cb\u003eHTML\u003c/b\u003e, and a new line with a \"quoted string\".` \u003e}} Shortcodes with markdown Shortcodes using the % as the outer-most delimiter will be fully rendered when sent to the content renderer. This means that the rendered output from a shortcode can be part of the page’s table of contents, footnotes, etc.\nShortcodes without markdown The \u003c character indicates that the shortcode’s inner content does not need further rendering. Often shortcodes without Markdown include internal HTML:\n{{\u003c myshortcode \u003e}}\u003cp\u003eHello \u003cstrong\u003eWorld!\u003c/strong\u003e\u003c/p\u003e{{\u003c /myshortcode \u003e}} Nested shortcodes You can call shortcodes within other shortcodes by creating your own templates that leverage the .Parent variable. .Parent allows you to check the context in which the shortcode is being called. See Shortcode templates.\nUse Hugo’s built-in shortcodes Hugo ships with a set of predefined shortcodes that represent very common usage. These shortcodes are provided for author convenience and to keep your Markdown content clean.\nfigure figure is an extension of the image syntax in Markdown, which does not provide a shorthand for the more semantic HTML5 \u003cfigure\u003e element.\nThe figure shortcode can use the following named parameters:\nsrc URL of the image to be displayed. link If the image needs to be hyperlinked, URL of the destination. target Optional target attribute for the URL if link parameter is set. rel Optional rel attribute for the URL if link parameter is set. alt Alternate text for the image if the image cannot be displayed. title Image title. caption Image caption. Markdown within the value of caption will be rendered. class class attribute of the HTML figure tag. height height attribute of the image. width width attribute of the image. loading loading attribute of the image. attr Image attribution text. Markdown within the value of attr will be rendered. attrlink If the attribution text needs to be hyperlinked, URL of the destination. Example figure input figure-input-example.md\r{{\u003c figure src=\"elephant.jpg\" title=\"An elephant at sunset\" \u003e}}\rExample figure output \u003cfigure\u003e \u003cimg src=\"elephant.jpg\"\u003e \u003cfigcaption\u003e\u003ch4\u003eAn elephant at sunset\u003c/h4\u003e\u003c/figcaption\u003e \u003c/figure\u003e gist To display a GitHub gist with this URL:\nhttps://gist.github.com/user/50a7482715eac222e230d1e64dd9a89b Include this in your markdown:\n{{\u003c gist user 50a7482715eac222e230d1e64dd9a89b \u003e}} This will display all files in the gist alphabetically by file name.\nTo display a specific file within the gist:\n{{\u003c gist user 23932424365401ffa5e9d9810102a477 list.html \u003e}} Rendered:\nhighlight To display a highlighted code sample:\n{{\u003c highlight go-html-template \u003e}} {{ range .Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{\u003c /highlight \u003e}} Rendered:\n{{ range .Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To specify one or more highlighting options, include a quotation-encapsulated, comma-separated list:\n{{\u003c highlight go-html-template \"lineNos=inline, lineNoStart=42\" \u003e}} {{ range .Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{\u003c /highlight \u003e}} Rendered:\n42{{ range .Pages }} 43 \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e 44{{ end }} instagram The instagram shortcode uses Facebook’s oEmbed Read feature. The Facebook developer documentation states:\nThis permission or feature requires successful completion of the App Review process before your app can access live data. Learn More This permission or feature is only available with business verification. You may also need to sign additional contracts before your app can access data. Learn More Here You must obtain an Access Token to use the instagram shortcode.\nIf your site configuration is private:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: instagram: accessToken: xxx [services] [services.instagram] accessToken = 'xxx' { \"services\": { \"instagram\": { \"accessToken\": \"xxx\" } } } If your site configuration is not private, set the Access Token with an environment variable:\nHUGO_SERVICES_INSTAGRAM_ACCESSTOKEN=xxx hugo --gc --minify If you are using a Client Access Token, you must combine the Access Token with your App ID using a pipe symbol (APPID|ACCESSTOKEN).\nTo display an Instagram post with this URL:\nhttps://www.instagram.com/p/BWNjjyYFxVx/ Include this in your markdown:\n{{\u003c instagram BWNjjyYFxVx \u003e}} param Gets a value from the current Page's parameters set in front matter, with a fallback to the site parameter value. It will log an ERROR if the parameter with the given key could not be found in either.\n{{\u003c param testparam \u003e}} Since testparam is a parameter defined in front matter of this page with the value Hugo Rocks!, the above will print:\nHugo Rocks! To access deeply nested parameters, use “dot syntax”, e.g:\n{{\u003c param \"my.nested.param\" \u003e}} ref and relref These shortcodes will look up the pages by their relative path (e.g., blog/post.md) or their logical name (post.md) and return the permalink (ref) or relative permalink (relref) for the found page.\nref and relref also make it possible to make fragmentary links that work for the header links generated by Hugo.\nRead a more extensive description of ref and relref in the cross references documentation.\nref and relref take exactly one required parameter of reference, quoted and in position 0.\nExample ref and relref input [Neat]({{\u003c ref \"blog/neat.md\" \u003e}}) [Who]({{\u003c relref \"about.md#who\" \u003e}}) Example ref and relref output Assuming that standard Hugo pretty URLs are turned on.\n\u003ca href=\"https://example.org/blog/neat\"\u003eNeat\u003c/a\u003e \u003ca href=\"/about/#who\"\u003eWho\u003c/a\u003e tweet To display a Twitter post with this URL:\nhttps://twitter.com/SanDiegoZoo/status/1453110110599868418 Include this in your markdown:\n{{\u003c tweet user=\"SanDiegoZoo\" id=\"1453110110599868418\" \u003e}} Rendered:\nOwl bet you'll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC\n— San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 vimeo To display a Vimeo video with this URL:\nhttps://vimeo.com/channels/staffpicks/55073825 Include this in your markdown:\n{{\u003c vimeo 55073825 \u003e}} Rendered:\nIf you want to further customize the visual styling of the YouTube or Vimeo output, add a class named parameter when calling the shortcode. The new class will be added to the \u003cdiv\u003e that wraps the \u003ciframe\u003e and will remove the inline styles. Note that you will need to call the id as a named parameter as well. You can also give the vimeo video a descriptive title with title.\n{{\u003c vimeo id=\"146022717\" class=\"my-vimeo-wrapper-class\" title=\"My vimeo video\" \u003e}} youtube The youtube shortcode embeds a responsive video player for YouTube videos. Only the ID of the video is required, e.g.:\nhttps://www.youtube.com/watch?v=w7Ft2ymGmfc Example youtube input Copy the YouTube video ID that follows v= in the video’s URL and pass it to the youtube shortcode:\nexample-youtube-input.md\r{{\u003c youtube w7Ft2ymGmfc \u003e}}\rFurthermore, you can automatically start playback of the embedded video by setting the autoplay parameter to true. Remember that you can’t mix named and unnamed parameters, so you’ll need to assign the yet unnamed video ID to the parameter id:\nexample-youtube-input-with-autoplay.md\r{{\u003c youtube id=\"w7Ft2ymGmfc\" autoplay=\"true\" \u003e}}\rFor accessibility reasons, it’s best to provide a title for your YouTube video. You can do this using the shortcode by providing a title parameter. If no title is provided, a default of “YouTube Video” will be used.\nexample-youtube-input-with-title.md\r{{\u003c youtube id=\"w7Ft2ymGmfc\" title=\"A New Hugo Site in Under Two Minutes\" \u003e}}\rExample youtube output Using the preceding youtube example, the following HTML will be added to your rendered website’s markup:\nexample-youtube-output.html\r\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e \u003ciframe src=\"https://www.youtube.com/embed/w7Ft2ymGmfc?autoplay=1\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e \u003c/div\u003e\rExample youtube display Using the preceding youtube example (without autoplay=\"true\"), the following simulates the displayed experience for visitors to your website. Naturally, the final display will be contingent on your style sheets and surrounding markup. The video is also include in the Quick Start of the Hugo documentation.\nPrivacy configuration To learn how to configure your Hugo site to meet the new EU privacy regulation, see Hugo and the GDPR.\nCreate custom shortcodes To learn more about creating custom shortcodes, see the shortcode template documentation.\n"},{"date":"0001-01-01","uri":"/templates/views/","title":"Content view templates","content":"These alternative content views are especially useful in list templates.\nThe following are common use cases for content views:\nYou want content of every type to be shown on the homepage but only with limited summary views. You only want a bulleted list of your content on a taxonomy list page. Views make this very straightforward by delegating the rendering of each different type of content to the content itself. Create a content view To create a new view, create a template in each of your different content type directories with the view name. The following example contains an “li” view and a “summary” view for the posts and project content types. As you can see, these sit next to the single content view template, single.html. You can even provide a specific view for a given type and continue to use the _default/single.html for the primary view.\n▾ layouts/ ▾ posts/ li.html single.html summary.html ▾ project/ li.html single.html summary.html Hugo also has support for a default content template to be used in the event that a specific content view template has not been provided for that type. Content views can also be defined in the _default directory and will work the same as list and single templates who eventually trickle down to the _default directory as a matter of the lookup order.\n▾ layouts/ ▾ _default/ li.html single.html summary.html Which template will be rendered? The following is the lookup order for content views:\n/layouts/\u003cTYPE\u003e/\u003cVIEW\u003e.html /layouts/_default/\u003cVIEW\u003e.html /themes/\u003cTHEME\u003e/layouts/\u003cTYPE\u003e/\u003cVIEW\u003e.html /themes/\u003cTHEME\u003e/layouts/_default/\u003cVIEW\u003e.html Example: content view inside a list The following example demonstrates how to use content views inside your list templates.\nlist.html In this example, .Render is passed into the template to call the render function. .Render is a special function that instructs content to render itself with the view template provided as the first argument. In this case, the template is going to render the summary.html view that follows:\nlayouts/_default/list.html\r\u003cmain id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\" }} {{ end }} \u003c/div\u003e \u003c/main\u003e\rsummary.html Hugo will pass the entire page object to the following summary.html view template. (See Page Variables for a complete list.)\nlayouts/_default/summary.html\r\u003carticle class=\"post\"\u003e \u003cheader\u003e \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e \u003cdiv class=\"post-meta\"\u003e{{ .Date.Format \"Mon, Jan 2, 2006\" }} - {{ .FuzzyWordCount }} Words \u003c/div\u003e \u003c/header\u003e {{ .Summary }} \u003cfooter\u003e \u003ca href='{{ .RelPermalink }}'\u003eRead\u0026nbsp;more\u0026nbsp;\u0026raquo;\u003c/a\u003e \u003c/footer\u003e \u003c/article\u003e\rli.html Continuing on the previous example, we can change our render function to use a smaller li.html view by changing the argument in the call to the .Render function (i.e., {{ .Render \"li\" }}).\nlayouts/_default/li.html\r\u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e \u003cdiv class=\"meta\"\u003e{{ .Date.Format \"Mon, Jan 2, 2006\" }}\u003c/div\u003e \u003c/li\u003e\r"},{"date":"0001-01-01","uri":"/content-management/related/","title":"Related content","content":"Hugo uses a set of factors to identify a page’s related content based on front matter parameters. This can be tuned to the desired set of indices and parameters or left to Hugo’s default Related Content configuration.\nList related content To list up to 5 related pages (which share the same date or keyword parameters) is as simple as including something similar to this partial in your single page template:\nlayouts/partials/related.html\r{{ $related := .Site.RegularPages.Related . | first 5 }} {{ with $related }} \u003ch3\u003eSee Also\u003c/h3\u003e \u003cul\u003e {{ range . }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }}\rThe Related method takes one argument which may be a Page or a options map. The options map have these options:\nindices (slice) The indices to search within. document (page) The page for which to find related content. Required when specifying an options map. namedSlices (slice) The keywords to search for, expressed as a slice of KeyValues using the keyVals function. fragments (slice) A list of special keywords that is used for indices configured as type “fragments”. This will match the fragment identifiers of the documents. A fictional example using all of the above options:\n{{ $page := . }} {{ $opts := dict \"indices\" (slice \"tags\" \"keywords\") \"document\" $page \"namedSlices\" (slice (keyVals \"tags\" \"hugo\" \"rocks\") (keyVals \"date\" $page.Date)) \"fragments\" (slice \"heading-1\" \"heading-2\") }} We improved and simplified this feature in Hugo 0.111.0. Before this we had 3 different methods: Related, RelatedTo and RelatedIndices. Now we have only one method: Related. The old methods are still available but deprecated. Also see this blog article for a great explanation of more advanced usage of this feature.\nIndex content headings in related content New in v0.111.0\rHugo can index the headings in your content and use this to find related content. You can enable this by adding a index of type fragments to your related configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rrelated: includeNewer: true indices: - applyFilter: true name: fragmentrefs type: fragments weight: 80 threshold: 20 toLower: false [related] includeNewer = true threshold = 20 toLower = false [[related.indices]] applyFilter = true name = 'fragmentrefs' type = 'fragments' weight = 80 { \"related\": { \"includeNewer\": true, \"indices\": [ { \"applyFilter\": true, \"name\": \"fragmentrefs\", \"type\": \"fragments\", \"weight\": 80 } ], \"threshold\": 20, \"toLower\": false } } The name maps to a optional front matter slice attribute that can be used to link from the page level down to the fragment/heading level. If applyFilteris enabled, the .HeadingsFiltered on each page in the result will reflect the filtered headings. This is useful if you want to show the headings in the related content listing: {{ $related := .Site.RegularPages.Related . | first 5 }} {{ with $related }} \u003ch2\u003eSee Also\u003c/h2\u003e \u003cul\u003e {{ range $i, $p := . }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e {{ with .HeadingsFiltered }} \u003cul\u003e {{ range . }} {{ $link := printf \"%s#%s\" $p.RelPermalink .ID | safeURL }} \u003cli\u003e \u003ca href=\"{{ $link }}\"\u003e{{ .Title }}\u003c/a\u003e \u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} \u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Configure related content Hugo provides a sensible default configuration of Related Content, but you can fine-tune this in your configuration, on the global or language level if needed.\nDefault configuration Without any related configuration set on the project, Hugo’s Related Content methods will use the following.\nhugo.\ryaml\r \rtoml\r \rjson\r \rrelated: includeNewer: false indices: - applyFilter: false cardinalityThreshold: 0 name: keywords pattern: \"\" toLower: false type: basic weight: 100 - applyFilter: false cardinalityThreshold: 0 name: date pattern: \"\" toLower: false type: basic weight: 10 - applyFilter: false cardinalityThreshold: 0 name: tags pattern: \"\" toLower: false type: basic weight: 80 threshold: 80 toLower: false [related] includeNewer = false threshold = 80 toLower = false [[related.indices]] applyFilter = false cardinalityThreshold = 0 name = 'keywords' pattern = '' toLower = false type = 'basic' weight = 100 [[related.indices]] applyFilter = false cardinalityThreshold = 0 name = 'date' pattern = '' toLower = false type = 'basic' weight = 10 [[related.indices]] applyFilter = false cardinalityThreshold = 0 name = 'tags' pattern = '' toLower = false type = 'basic' weight = 80 { \"related\": { \"includeNewer\": false, \"indices\": [ { \"applyFilter\": false, \"cardinalityThreshold\": 0, \"name\": \"keywords\", \"pattern\": \"\", \"toLower\": false, \"type\": \"basic\", \"weight\": 100 }, { \"applyFilter\": false, \"cardinalityThreshold\": 0, \"name\": \"date\", \"pattern\": \"\", \"toLower\": false, \"type\": \"basic\", \"weight\": 10 }, { \"applyFilter\": false, \"cardinalityThreshold\": 0, \"name\": \"tags\", \"pattern\": \"\", \"toLower\": false, \"type\": \"basic\", \"weight\": 80 } ], \"threshold\": 80, \"toLower\": false } } Custom configuration should be set using the same syntax.\nIf you add a related configuration section, you need to add a complete configuration. It is not possible to just set, say, includeNewer and use the rest from the Hugo defaults.\nTop level configuration options threshold (int) A value between 0-100. Lower value will give more, but maybe not so relevant, matches. includeNewer (bool) Set to true to include pages newer than the current page in the related content listing. This will mean that the output for older posts may change as new related content gets added. toLower (bool) Set to true to lower case keywords in both the indexes and the queries. This may give more accurate results at a slight performance penalty. Note that this can also be set per index. Configuration options per index name (string) The index name. This value maps directly to a page parameter. Hugo supports string values (author in the example) and lists (tags, keywords etc.) and time and date objects. type New in v0.111.0\r(string) One of basic(default) or fragments. applyFilter New in v0.111.0\r(string) Apply a type specific filter to the result of a search. This is currently only used for the fragments type. weight (int) An integer weight that indicates how important this parameter is relative to the other parameters. It can be 0, which has the effect of turning this index off, or even negative. Test with different values to see what fits your content best. cardinalityThreshold New in v0.111.0\r(int) A percentage (0-100) used to remove common keywords from the index. As an example, setting this to 50 will remove all keywords that are used in more than 50% of the documents in the index. Default is 0. pattern (string) This is currently only relevant for dates. When listing related content, we may want to list content that is also close in time. Setting “2006” (default value for date indexes) as the pattern for a date index will add weight to pages published in the same year. For busier blogs, “200601” (year and month) may be a better default. toLower (bool) See above. Performance considerations Fast is Hugo’s middle name and we would not have released this feature had it not been blistering fast.\nThis feature has been in the back log and requested by many for a long time. The development got this recent kick start from this Twitter thread:\nHoly smokes! Build time dropped to 1.2 seconds!\n— Scott S. Lowe (@scott_lowe) August 18, 2017 Scott S. Lowe removed the “Related Content” section built using the intersect template function on tags, and the build time dropped from 30 seconds to less than 2 seconds on his 1700 content page sized blog.\nHe should now be able to add an improved version of that “Related Content” section without giving up the fast live-reloads. But it’s worth noting that:\nIf you don’t use any of the Related methods, you will not use the Relate Content feature, and performance will be the same as before. Calling .RegularPages.Related etc. will create one inverted index, also sometimes named posting list, that will be reused for any lookups in that same page collection. Doing that in addition to, as an example, calling .Pages.Related will work as expected, but will create one additional inverted index. This should still be very fast, but worth having in mind, especially for bigger sites. We currently do not index Page content. We thought we would release something that will make most people happy before we start solving Sherlock’s last case.\n"},{"date":"0001-01-01","uri":"/hugo-pipes/resource-from-string/","title":"FromString","content":"Usage It is possible to create a resource directly from the template using resources.FromString which takes two arguments, the target path for the created resource and the given content string.\nThe result is cached using the target path as the cache key.\nThe following example creates a resource file containing localized variables for every project’s languages.\n{{ $string := (printf \"var rootURL = '%s'; var apiURL = '%s';\" (absURL \"/\") (.Param \"API_URL\")) }} {{ $targetPath := \"js/vars.js\" }} {{ $vars := $string | resources.FromString $targetPath }} {{ $global := resources.Get \"js/global.js\" | resources.Minify }} \u003cscript src=\"{{ $vars.Permalink }}\"\u003e\u003c/script\u003e \u003cscript src=\"{{ $global.Permalink }}\"\u003e\u003c/script\u003e "},{"date":"0001-01-01","uri":"/templates/partials/","title":"Partial templates","content":" Partial template lookup order Partial templates—like single page templates and list page templates—have a specific lookup order. However, partials are simpler in that Hugo will only check in two places:\nlayouts/partials/\u003cPARTIALNAME\u003e.html themes/\u003cTHEME\u003e/layouts/partials/\u003cPARTIALNAME\u003e.html This allows a theme’s end user to copy a partial’s contents into a file of the same name for further customization.\nUse partials in your templates All partials for your Hugo project are located in a single layouts/partials directory. For better organization, you can create multiple subdirectories within partials as well:\nlayouts/ └── partials/ ├── footer/ │ ├── scripts.html │ └── site-footer.html ├── head/ │ ├── favicons.html │ ├── metadata.html │ ├── prerender.html │ └── twitter.html └── header/ ├── site-header.html └── site-nav.html All partials are called within your templates using the following pattern:\n{{ partial \"\u003cPATH\u003e/\u003cPARTIAL\u003e.html\" . }} One of the most common mistakes with new Hugo users is failing to pass a context to the partial call. In the pattern above, note how “the dot” (.) is required as the second argument to give the partial context. You can read more about “the dot” in the Hugo templating introduction.\n\u003cPARTIAL\u003e including baseof is reserved. (#5373)\nAs shown in the above example directory structure, you can nest your directories within partials for better source organization. You only need to call the nested partial’s path relative to the partials directory:\n{{ partial \"header/site-header.html\" . }} {{ partial \"footer/scripts.html\" . }} Variable scoping The second argument in a partial call is the variable being passed down. The above examples are passing the ., which tells the template receiving the partial to apply the current context.\nThis means the partial will only be able to access those variables. The partial is isolated and has no access to the outer scope. From within the partial, $.Var is equivalent to .Var.\nReturning a value from a partial In addition to outputting markup, partials can be used to return a value of any type. In order to return a value, a partial must include a lone return statement at the end of the partial.\nExample GetFeatured {{/* layouts/partials/GetFeatured.html */}} {{ return first . (where site.RegularPages \"Params.featured\" true) }} {{/* layouts/index.html */}} {{ range partial \"GetFeatured.html\" 5 }} [...] {{ end }} Example GetImage {{/* layouts/partials/GetImage.html */}} {{ $image := false }} {{ with .Params.gallery }} {{ $image = index . 0 }} {{ end }} {{ with .Params.image }} {{ $image = . }} {{ end }} {{ return $image }} {{/* layouts/_default/single.html */}} {{ with partial \"GetImage.html\" . }} [...] {{ end }} Only one return statement is allowed per partial file.\nInline partials You can also define partials inline in the template. But remember that template namespace is global, so you need to make sure that the names are unique to avoid conflicts.\nValue: {{ partial \"my-inline-partial.html\" . }} {{ define \"partials/my-inline-partial.html\" }} {{ $value := 32 }} {{ return $value }} {{ end }} Cached partials The partialCached template function provides significant performance gains for complex templates that don’t need to be re-rendered on every invocation. See details.\nExamples header.html The following header.html partial template is used for spf13.com:\nlayouts/partials/header.html\r\u003c!DOCTYPE html\u003e \u003chtml class=\"no-js\" lang=\"en-US\" prefix=\"og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e {{ partial \"meta.html\" . }} \u003cbase href=\"{{ .Site.BaseURL }}\"\u003e \u003ctitle\u003e {{ .Title }} : spf13.com \u003c/title\u003e \u003clink rel=\"canonical\" href=\"{{ .Permalink }}\"\u003e {{ if .RSSLink }}\u003clink href=\"{{ .RSSLink }}\" rel=\"alternate\" type=\"application/rss+xml\" title=\"{{ .Title }}\" /\u003e{{ end }} {{ partial \"head_includes.html\" . }} \u003c/head\u003e\rThe header.html example partial was built before the introduction of block templates to Hugo. Read more on base templates and blocks for defining the outer chrome or shell of your master templates (i.e., your site’s head, header, and footer). You can even combine blocks and partials for added flexibility.\nfooter.html The following footer.html partial template is used for spf13.com:\nlayouts/partials/footer.html\r\u003cfooter\u003e \u003cdiv\u003e \u003cp\u003e \u0026copy; 2013-14 Steve Francia. \u003ca href=\"https://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons Attribution\"\u003eSome rights reserved\u003c/a\u003e; please attribute properly and link back. \u003c/p\u003e \u003c/div\u003e \u003c/footer\u003e\r"},{"date":"0001-01-01","uri":"/hugo-pipes/resource-from-template/","title":"ExecuteAsTemplate","content":"Usage In order to use Hugo Pipes function on an asset file containing Go Template magic the function resources.ExecuteAsTemplate must be used.\nThe function takes three arguments: the target path for the created resource, the template context, and the resource object. The target path is used to cache the result.\n// assets/sass/template.scss $backgroundColor: {{ .Param \"backgroundColor\" }}; $textColor: {{ .Param \"textColor\" }}; body{ background-color:$backgroundColor; color: $textColor; } // [...] {{ $sassTemplate := resources.Get \"sass/template.scss\" }} {{ $style := $sassTemplate | resources.ExecuteAsTemplate \"main.scss\" . | resources.ToCSS }} "},{"date":"0001-01-01","uri":"/content-management/sections/","title":"Sections","content":"Overview A section is a top-level content directory, or any content directory with an _index.md file. A content directory with an _index.md file is also known as a branch bundle. Section templates receive one or more page collections in context.\nAlthough top-level directories without _index.md files are sections, we recommend creating _index.md files in all sections.\nA typical site consists of one or more sections. For example:\ncontent/ ├── articles/ \u003c-- section (top-level directory) │ ├── 2022/ │ │ ├── article-1/ │ │ │ ├── cover.jpg │ │ │ └── index.md │ │ └── article-2.md │ └── 2023/ │ ├── article-3.md │ └── article-4.md ├── products/ \u003c-- section (top-level directory) │ ├── product-1/ \u003c-- section (has _index.md file) │ │ ├── benefits/ \u003c-- section (has _index.md file) │ │ │ ├── _index.md │ │ │ ├── benefit-1.md │ │ │ └── benefit-2.md │ │ ├── features/ \u003c-- section (has _index.md file) │ │ │ ├── _index.md │ │ │ ├── feature-1.md │ │ │ └── feature-2.md │ │ └── _index.md │ └── product-2/ \u003c-- section (has _index.md file) │ ├── benefits/ \u003c-- section (has _index.md file) │ │ ├── _index.md │ │ ├── benefit-1.md │ │ └── benefit-2.md │ ├── features/ \u003c-- section (has _index.md file) │ │ ├── _index.md │ │ ├── feature-1.md │ │ └── feature-2.md │ └── _index.md ├── _index.md └── about.md The example above has two top-level sections: articles and products. None of the directories under articles are sections, while all of the directories under products are sections. A section within a section is a known as a nested section or subsection.\nExplanation Sections and non-sections behave differently.\nSections Non-sections Directory names become URL segments ✔️ ✔️ Have logical ancestors and descendants ✔️ ❌ Have list pages ✔️ ❌ With the file structure from the example above:\nThe list page for the articles section includes all articles, regardless of directory structure; none of the subdirectories are sections.\nThe articles/2022 and articles/2023 directories do not have list pages; they are not sections.\nThe list page for the products section, by default, includes product-1 and product-2, but not their descendant pages. To include descendant pages, use the .RegularPagesRecursive collection instead of the .Pages collection in the list template. See details.\nAll directories in the products section have list pages; each directory is a section.\nTemplate selection Hugo has a defined lookup order to determine which template to use when rendering a page. The lookup rules consider the top-level section name; subsection names are not considered when selecting a template.\nWith the file structure from the example above:\nContent directory List page template content/products layouts/products/list.html content/products/product-1 layouts/products/list.html content/products/product-1/benefits layouts/products/list.html Content directory Single page template content/products layouts/products/single.html content/products/product-1 layouts/products/single.html content/products/product-1/benefits layouts/products/single.html If you need to use a different template for a subsection, specify type and/or layout in front matter.\nAncestors and descendants A section has one or more ancestors (including the home page), and zero or more descendants. With the file structure from the example above:\ncontent/products/product-1/benefits/benefit-1.md The content file (benefit-1.md) has four ancestors: benefits, product-1, products, and the home page. This logical relationship allows us to use the .Parent and .Ancestors methods to traverse the site structure.\nFor example, use the .Ancestors method to render breadcrumb navigation.\nlayouts/partials/breadcrumb.html\r\u003cnav aria-label=\"breadcrumb\" class=\"breadcrumb\"\u003e \u003col\u003e {{ range .Ancestors.Reverse }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e \u003c/li\u003e {{ end }} \u003cli class=\"active\"\u003e \u003ca aria-current=\"page\" href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e \u003c/li\u003e \u003c/ol\u003e \u003c/nav\u003e\rWith this CSS:\n.breadcrumb ol { padding-left: 0; } .breadcrumb li { display: inline; } .breadcrumb li:not(:last-child)::after { content: \"»\"; } Hugo renders this, where each breadcrumb is a link to the corresponding page:\nHome » Products » Product 1 » Benefits » Benefit 1 "},{"date":"0001-01-01","uri":"/content-management/types/","title":"Content types","content":"A content type is a way to organize your content. Hugo resolves the content type from either the type in front matter or, if not set, the first directory in the file path. E.g. content/blog/my-first-event.md will be of type blog if no type is set.\nA content type is used to\nDetermine how the content is rendered. See Template Lookup Order and Content Views for more. Determine which archetype template to use for new content. "},{"date":"0001-01-01","uri":"/templates/shortcode-templates/","title":"Create your own shortcodes","content":"Shortcodes are a means to consolidate templating into small, reusable snippets that you can embed directly inside your content.\nHugo also ships with built-in shortcodes for common use cases. (See Content Management: Shortcodes.)\nCreate custom shortcodes Hugo’s built-in shortcodes cover many common, but not all, use cases. Luckily, Hugo provides the ability to easily create custom shortcodes to meet your website’s needs.\nFile location To create a shortcode, place an HTML template in the layouts/shortcodes directory of your source organization. Consider the file name carefully since the shortcode name will mirror that of the file but without the .html extension. For example, layouts/shortcodes/myshortcode.html will be called with either {{\u003c myshortcode /\u003e}} or {{% myshortcode /%}}.\nYou can organize your shortcodes in subdirectories, e.g. in layouts/shortcodes/boxes. These shortcodes would then be accessible with their relative path, e.g:\n{{\u003c boxes/square \u003e}} Note the forward slash.\nShortcode template lookup order Shortcode templates have a simple lookup order:\n/layouts/shortcodes/\u003cSHORTCODE\u003e.html /themes/\u003cTHEME\u003e/layouts/shortcodes/\u003cSHORTCODE\u003e.html Positional vs. named parameters You can create shortcodes using the following types of parameters:\nPositional parameters Named parameters Positional or named parameters (i.e, “flexible”) In shortcodes with positional parameters, the order of the parameters is important. If a shortcode has a single required value (e.g., the youtube shortcode below), positional parameters work very well and require less typing from content authors.\nFor more complex layouts with multiple or optional parameters, named parameters work best. While less terse, named parameters require less memorization from a content author and can be added in a shortcode declaration in any order.\nAllowing both types of parameters (i.e., a “flexible” shortcode) is useful for complex layouts where you want to set default values that can be easily overridden by users.\nAccess parameters All shortcode parameters can be accessed via the .Get method. Whether you pass a key (i.e., string) or a number to the .Get method depends on whether you are accessing a named or positional parameter, respectively.\nTo access a parameter by name, use the .Get method followed by the named parameter as a quoted string:\n{{ .Get \"class\" }} To access a parameter by position, use the .Get followed by a numeric position, keeping in mind that positional parameters are zero-indexed:\n{{ .Get 0 }} For the second position, you would just use:\n{{ .Get 1 }} with is great when the output depends on a parameter being set:\n{{ with .Get \"class\" }} class=\"{{ . }}\"{{ end }} .Get can also be used to check if a parameter has been provided. This is most helpful when the condition depends on either of the values, or both:\n{{ if or (.Get \"title\") (.Get \"alt\") }} alt=\"{{ with .Get \"alt\" }}{{ . }}{{ else }}{{ .Get \"title\" }}{{ end }}\"{{ end }} .Inner If a closing shortcode is used, the .Inner variable will be populated with the content between the opening and closing shortcodes. To check if .Inner contains anything other than white space:\n{{ if strings.ContainsNonSpace .Inner }} Inner is not empty {{ end }} A shortcode with content declared via the .Inner variable can also be declared without the content and without the closing tag by using the self-closing syntax:\n{{\u003c innershortcode /\u003e}} Any shortcode that refers to .Inner must be closed or self-closed.\n.Params The .Params variable in shortcodes contains the list parameters passed to shortcode for more complicated use cases. You can also access higher-scoped parameters with the following logic:\n$.Params these are the parameters passed directly into the shortcode declaration (e.g., a YouTube video ID) $.Page.Params refers to the page’s parameters; the “page” in this case refers to the content file in which the shortcode is declared (e.g., a shortcode_color field in a content’s front matter could be accessed via $.Page.Params.shortcode_color). $.Page.Site.Params refers to global variables as defined in your site’s configuration file. .IsNamedParams The .IsNamedParams variable checks whether the shortcode declaration uses named parameters and returns a boolean value.\nFor example, you could create an image shortcode that can take either a src named parameter or the first positional parameter, depending on the preference of the content’s author. Let’s assume the image shortcode is called as follows:\n{{\u003c image src=\"images/my-image.jpg\" \u003e}} You could then include the following as part of your shortcode templating:\n{{ if .IsNamedParams }} \u003cimg src=\"{{ .Get \"src\" }}\" alt=\"\"\u003e {{ else }} \u003cimg src=\"{{ .Get 0 }}\" alt=\"\"\u003e {{ end }} See the example Vimeo shortcode below for .IsNamedParams in action.\nWhile you can create shortcode templates that accept both positional and named parameters, you cannot declare shortcodes in content with a mix of parameter types. Therefore, a shortcode declared like {{\u003c image src=\"images/my-image.jpg\" \"This is my alt text\" \u003e}} will return an error.\nYou can also use the variable .Page to access all the normal page variables.\nShortcodes can also be nested. In a nested shortcode, you can access the parent shortcode context with the .Parent shortcode method. This can be very useful for inheritance of common shortcode parameters from the root.\nChecking for existence You can check if a specific shortcode is used on a page by calling .HasShortcode in that page template, providing the name of the shortcode. This is sometimes useful when you want to include specific scripts or styles in the header that are only used by that shortcode.\nCustom shortcode examples The following are examples of the different types of shortcodes you can create via shortcode template files in /layouts/shortcodes.\nSingle-word example: year Let’s assume you would like to keep mentions of your copyright year current in your content files without having to continually review your Markdown. Your goal is to be able to call the shortcode as follows:\n{{\u003c year \u003e}} layouts/shortcodes/year.html\r{{ now.Format \"2006\" }}\rSingle positional example: youtube Embedded videos are a common addition to Markdown content that can quickly become unsightly. The following is the code used by Hugo’s built-in YouTube shortcode:\n{{\u003c youtube 09jf3ow9jfw \u003e}} Would load the template at /layouts/shortcodes/youtube.html:\nlayouts/shortcodes/youtube.html\r\u003cdiv class=\"embed video-player\"\u003e \u003ciframe class=\"youtube-player\" type=\"text/html\" width=\"640\" height=\"385\" src=\"https://www.youtube.com/embed/{{ index .Params 0 }}\" allowfullscreen frameborder=\"0\"\u003e \u003c/iframe\u003e \u003c/div\u003e\ryoutube-embed.html\r\u003cdiv class=\"embed video-player\"\u003e \u003ciframe class=\"youtube-player\" type=\"text/html\" width=\"640\" height=\"385\" src=\"https://www.youtube.com/embed/09jf3ow9jfw\" allowfullscreen frameborder=\"0\"\u003e \u003c/iframe\u003e \u003c/div\u003e\rSingle named example: image Let’s say you want to create your own img shortcode rather than use Hugo’s built-in figure shortcode. Your goal is to be able to call the shortcode as follows in your content files:\ncontent-image.md\r{{\u003c img src=\"/media/spf13.jpg\" title=\"Steve Francia\" \u003e}}\rYou have created the shortcode at /layouts/shortcodes/img.html, which loads the following shortcode template:\nlayouts/shortcodes/img.html\r\u003c!-- image --\u003e \u003cfigure {{ with .Get \"class\" }}class=\"{{ . }}\"{{ end }}\u003e {{ with .Get \"link\" }}\u003ca href=\"{{ . }}\"\u003e{{ end }} \u003cimg src=\"{{ .Get \"src\" }}\" {{ if or (.Get \"alt\") (.Get \"caption\") }}alt=\"{{ with .Get \"alt\" }}{{ . }}{{ else }}{{ .Get \"caption\" }}{{ end }}\"{{ end }} /\u003e {{ if .Get \"link\" }}\u003c/a\u003e{{ end }} {{ if or (or (.Get \"title\") (.Get \"caption\")) (.Get \"attr\") }} \u003cfigcaption\u003e{{ if isset .Params \"title\" }} \u003ch4\u003e{{ .Get \"title\" }}\u003c/h4\u003e{{ end }} {{ if or (.Get \"caption\") (.Get \"attr\") }}\u003cp\u003e {{ .Get \"caption\" }} {{ with .Get \"attrlink\" }}\u003ca href=\"{{ . }}\"\u003e {{ end }} {{ .Get \"attr\" }} {{ if .Get \"attrlink\" }}\u003c/a\u003e {{ end }} \u003c/p\u003e {{ end }} \u003c/figcaption\u003e {{ end }} \u003c/figure\u003e \u003c!-- image --\u003e\rWould be rendered as:\nimg-output.html\r\u003cfigure\u003e \u003cimg src=\"/media/spf13.jpg\" /\u003e \u003cfigcaption\u003e \u003ch4\u003eSteve Francia\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e\rSingle flexible example: vimeo {{\u003c vimeo 49718712 \u003e}} {{\u003c vimeo id=\"49718712\" class=\"flex-video\" \u003e}} Would load the template found at /layouts/shortcodes/vimeo.html:\nlayouts/shortcodes/vimeo.html\r{{ if .IsNamedParams }} \u003cdiv class=\"{{ if .Get \"class\" }}{{ .Get \"class\" }}{{ else }}vimeo-container{{ end }}\"\u003e \u003ciframe src=\"https://player.vimeo.com/video/{{ .Get \"id\" }}\" allowfullscreen\u003e\u003c/iframe\u003e \u003c/div\u003e {{ else }} \u003cdiv class=\"{{ if len .Params | eq 2 }}{{ .Get 1 }}{{ else }}vimeo-container{{ end }}\"\u003e \u003ciframe src=\"https://player.vimeo.com/video/{{ .Get 0 }}\" allowfullscreen\u003e\u003c/iframe\u003e \u003c/div\u003e {{ end }}\rWould be rendered as:\nvimeo-iframes.html\r\u003cdiv class=\"vimeo-container\"\u003e \u003ciframe src=\"https://player.vimeo.com/video/49718712\" allowfullscreen\u003e\u003c/iframe\u003e \u003c/div\u003e \u003cdiv class=\"flex-video\"\u003e \u003ciframe src=\"https://player.vimeo.com/video/49718712\" allowfullscreen\u003e\u003c/iframe\u003e \u003c/div\u003e\rPaired example: highlight The following is taken from highlight, which is a built-in shortcode that ships with Hugo.\nhighlight-example.md\r{{\u003c highlight html \u003e}} \u003chtml\u003e \u003cbody\u003e This HTML \u003c/body\u003e \u003c/html\u003e {{\u003c /highlight \u003e}}\rThe template for the highlight shortcode uses the following code, which is already included in Hugo:\n{{ .Get 0 | highlight .Inner }} The rendered output of the HTML example code block will be as follows:\nsyntax-highlighted.html\r\u003cdiv class=\"highlight\" style=\"background: #272822\"\u003e\u003cpre style=\"line-height: 125%\"\u003e\u003cspan style=\"color: #f92672\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e This HTML \u003cspan style=\"color: #f92672\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e \u003cspan style=\"color: #f92672\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e \u003c/pre\u003e\u003c/div\u003e\rNested shortcode: image gallery Hugo’s .Parent shortcode method provides access to the parent shortcode context when the shortcode in question is called within the context of a parent shortcode. This provides an inheritance model for common shortcode parameters.\nThe following example is contrived but demonstrates the concept. Assume you have a gallery shortcode that expects one named class parameter:\nlayouts/shortcodes/gallery.html\r\u003cdiv class=\"{{ .Get \"class\" }}\"\u003e {{ .Inner }} \u003c/div\u003e\rYou also have an img shortcode with a single named src parameter that you want to call inside of gallery and other shortcodes, so that the parent defines the context of each img:\nlayouts/shortcodes/img.html\r{{- $src := .Get \"src\" -}} {{- with .Parent -}} \u003cimg src=\"{{ $src }}\" class=\"{{ .Get \"class\" }}-image\"\u003e {{- else -}} \u003cimg src=\"{{ $src }}\"\u003e {{- end -}}\rYou can then call your shortcode in your content as follows:\n{{\u003c gallery class=\"content-gallery\" \u003e}} {{\u003c img src=\"/images/one.jpg\" \u003e}} {{\u003c img src=\"/images/two.jpg\" \u003e}} {{\u003c /gallery \u003e}} {{\u003c img src=\"/images/three.jpg\" \u003e}} This will output the following HTML. Note how the first two img shortcodes inherit the class value of content-gallery set with the call to the parent gallery, whereas the third img only uses src:\n\u003cdiv class=\"content-gallery\"\u003e \u003cimg src=\"/images/one.jpg\" class=\"content-gallery-image\"\u003e \u003cimg src=\"/images/two.jpg\" class=\"content-gallery-image\"\u003e \u003c/div\u003e \u003cimg src=\"/images/three.jpg\"\u003e Error handling in shortcodes Use the errorf template function and .Position shortcode method to get useful error messages in shortcodes:\n{{ with .Get \"name\" }} {{ else }} {{ errorf \"missing value for parameter 'name': %s\" .Position }} {{ end }} When the above fails, you will see an ERROR log similar to the below:\nERROR 2018/11/07 10:05:55 missing value for parameter name: \"/Users/bep/dev/go/gohugoio/hugo/docs/content/en/variables/shortcodes.md:32:1\" Inline shortcodes You can also implement your shortcodes inline – e.g. where you use them in the content file. This can be useful for scripting that you only need in one place.\nThis feature is disabled by default, but can be enabled in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rsecurity: enableInlineShortcodes: true [security] enableInlineShortcodes = true { \"security\": { \"enableInlineShortcodes\": true } } It is disabled by default for security reasons. The security model used by Hugo’s template handling assumes that template authors are trusted, but that the content files are not, so the templates are injection-safe from malformed input data. But in most situations you have full control over the content, too, and then enableInlineShortcodes = true would be considered safe. But it’s something to be aware of: It allows ad-hoc Go Text templates to be executed from the content files.\nAnd once enabled, you can do this in your content files:\n{{\u003c time.inline \u003e}}{{ now }}{{\u003c /time.inline \u003e}} The above will print the current date and time.\nNote that an inline shortcode’s inner content is parsed and executed as a Go text template with the same context as a regular shortcode template.\nThis means that the current page can be accessed via .Page.Title etc. This also means that there are no concept of “nested inline shortcodes”.\nThe same inline shortcode can be reused later in the same content file, with different parameters if needed, using the self-closing syntax:\n{{\u003c time.inline /\u003e}} "},{"date":"0001-01-01","uri":"/content-management/archetypes/","title":"Archetypes","content":"Overview A content file consists of front matter and markup. The markup is typically markdown, but Hugo also supports other content formats. Front matter can be TOML, YAML, or JSON.\nThe hugo new content command creates a new file in the content directory, using an archetype as a template. This is the default archetype:\narchetypes/default.md\ryaml\r \rtoml\r \rjson\r \r--- date: '{{ .Date }}' draft: true title: '{{ replace .File.ContentBaseName `-` ` ` | title }}' ---\r+++ date = '{{ .Date }}' draft = true title = '{{ replace .File.ContentBaseName `-` ` ` | title }}' +++\r{ \"date\": \"{{ .Date }}\", \"draft\": true, \"title\": \"{{ replace .File.ContentBaseName `-` ` ` | title }}\" } When you create new content, Hugo evaluates the template actions within the archetype. For example:\nhugo new content posts/my-first-post.md With the default archetype shown above, Hugo creates this content file:\ncontent/posts/my-first-post.md\ryaml\r \rtoml\r \rjson\r \r--- date: \"2023-08-24T11:49:46-07:00\" draft: true title: My First Post ---\r+++ date = '2023-08-24T11:49:46-07:00' draft = true title = 'My First Post' +++\r{ \"date\": \"2023-08-24T11:49:46-07:00\", \"draft\": true, \"title\": \"My First Post\" } You can create an archetype for one or more content types. For example, use one archetype for posts, and use the default archetype for everything else:\narchetypes/ ├── default.md └── posts.md Lookup order Hugo looks for archetypes in the archetypes directory in the root of your project, falling back to the archetypes directory in themes or installed modules. An archetype for a specific content type takes precedence over the default archetype.\nFor example, with this command:\nhugo new content posts/my-first-post.md The archetype lookup order is:\narchetypes/posts.md archetypes/default.md themes/my-theme/archetypes/posts.md themes/my-theme/archetypes/default.md If none of these exists, Hugo uses a built-in default archetype.\nFunctions and context You can use any template function within an archetype. As shown above, the default archetype uses the replace function to replace hyphens with spaces when populating the title in front matter.\nArchetypes receive the following objects and values in context:\n.Date .Type .Site (see details) .File (see details) As shown above, the default archetype passes .File.ContentBaseName as the argument to the replace function when populating the title in front matter.\nInclude content Although typically used as a front matter template, you can also use an archetype to populate content.\nFor example, in a documentation site you might have a section (content type) for functions. Every page within this section should follow the same format: a brief description, the function signature, examples, and notes. We can pre-populate the page to remind content authors of the standard format.\narchetypes/functions.md\r--- date: '{{ .Date }}' draft: true title: '{{ replace .File.ContentBaseName `-` ` ` | title }}' --- A brief description of what the function does, using simple present tense in the third person singular form. For example: `someFunction` returns the string `s` repeated `n` times. ## Signature ```text func someFunction(s string, n int) string ``` ## Examples One or more practical examples, each within a fenced code block. ## Notes Additional information to clarify as needed.\rAlthough you can include template actions within the content body, remember that Hugo evaluates these once—at the time of content creation. In most cases, place template actions in a template where Hugo evaluates the actions every time you build the site.\nLeaf bundles You can also create archetypes for leaf bundles.\nFor example, in a photography site you might have a section (content type) for galleries. Each gallery is leaf bundle with content and images.\nCreate an archetype for galleries:\narchetypes/ ├── galleries/ │ ├── images/ │ │ └── .gitkeep │ └── index.md \u003c-- same format as default.md └── default.md Subdirectories within an archetype must contain at least one file. Without a file, Hugo will not create the subdirectory when you create new content. The name and size of the file are irrelevant. The example above includes a .gitkeep file, an empty file commonly used to preserve otherwise empty directories in a Git repository.\nTo create a new gallery:\nhugo new galleries/bryce-canyon This produces:\ncontent/ ├── galleries/ │ └── bryce-canyon/ │ ├── images/ │ │ └── .gitkeep │ └── index.md └── _index.md Use alternate archetype Use the --kind command line flag to specify an alternate archetype when creating content.\nFor example, let’s say your site has two sections: articles and tutorials. Create an archetype for each content type:\narchetypes/ ├── articles.md ├── default.md └── tutorials.md To create an article using the articles archetype:\nhugo new content articles/something.md To create an article using the tutorials archetype:\nhugo new content --kind tutorials articles/something.md "},{"date":"0001-01-01","uri":"/templates/menu-templates/","title":"Menu templates","content":"Overview After defining menu entries, use menu variables and methods to render a menu.\nThree factors determine how to render a menu:\nThe method used to define the menu entries: automatic, in front matter, or in site configuration The menu structure: flat or nested The method used to localize the menu entries: site configuration or translation tables The example below handles every combination.\nExample This partial template recursively “walks” a menu structure, rendering a localized, accessible nested list.\nlayouts/partials/menu.html\r{{- $page := .page }} {{- $menuID := .menuID }} {{- with index site.Menus $menuID }} \u003cnav\u003e \u003cul\u003e {{- partial \"inline/menu/walk.html\" (dict \"page\" $page \"menuEntries\" .) }} \u003c/ul\u003e \u003c/nav\u003e {{- end }} {{- define \"partials/inline/menu/walk.html\" }} {{- $page := .page }} {{- range .menuEntries }} {{- $attrs := dict \"href\" .URL }} {{- if $page.IsMenuCurrent .Menu . }} {{- $attrs = merge $attrs (dict \"class\" \"active\" \"aria-current\" \"page\") }} {{- else if $page.HasMenuCurrent .Menu .}} {{- $attrs = merge $attrs (dict \"class\" \"ancestor\" \"aria-current\" \"true\") }} {{- end }} {{- $name := .Name }} {{- with .Identifier }} {{- with T . }} {{- $name = . }} {{- end }} {{- end }} \u003cli\u003e \u003ca {{- range $k, $v := $attrs }} {{- with $v }} {{- printf \" %s=%q\" $k $v | safeHTMLAttr }} {{- end }} {{- end -}} \u003e{{ $name }}\u003c/a\u003e {{- with .Children }} \u003cul\u003e {{- partial \"inline/menu/walk.html\" (dict \"page\" $page \"menuEntries\" .) }} \u003c/ul\u003e {{- end }} \u003c/li\u003e {{- end }} {{- end }}\rCall the partial above, passing a menu ID and the current page in context.\nlayouts/_default/single.html\r{{ partial \"menu.html\" (dict \"menuID\" \"main\" \"page\" .) }} {{ partial \"menu.html\" (dict \"menuID\" \"footer\" \"page\" .) }}\rPage references Regardless of how you define menu entries, an entry associated with a page has access to page variables and methods.\nThis simplistic example renders a page parameter named version next to each entry’s name. Code defensively using with or if to handle entries where (a) the entry points to an external resource, or (b) the version parameter is not defined.\nlayouts/_default/single.html\r{{- range site.Menus.main }} \u003ca href=\"{{ .URL }}\"\u003e {{ .Name }} {{- with .Page }} {{- with .Params.version -}} ({{ . }}) {{- end }} {{- end }} \u003c/a\u003e {{- end }}\rMenu entry parameters When you define menu entries in site configuration or in front matter, you can include a params key as shown in these examples:\nMenu entry defined in site configuration Menu entry defined in front matter This simplistic example renders a class attribute for each anchor element. Code defensively using with or if to handle entries where params.class is not defined.\nlayouts/partials/menu.html\r{{- range site.Menus.main }} \u003ca {{ with .Params.class -}} class=\"{{ . }}\" {{ end -}} href=\"{{ .URL }}\"\u003e {{ .Name }} \u003c/a\u003e {{- end }}\rLocalize Hugo provides two methods to localize your menu entries. See multilingual.\n"},{"date":"0001-01-01","uri":"/templates/data-templates/","title":"Data templates","content":"Hugo supports loading data from YAML, JSON, XML, and TOML files located in the data directory at the root of your Hugo project.\nThe data directory The data directory should store additional data for Hugo to use when generating your site.\nData files are not for generating standalone pages. They should supplement content files by:\nExtending the content when the front matter fields grow out of control, or Showing a larger dataset in a template (see the example below). In both cases, it’s a good idea to outsource the data in their (own) files.\nThese files must be YAML, JSON, XML, or TOML files (using the .yml, .yaml, .json, .xml, or .toml extension). The data will be accessible as a map in the .Site.Data variable.\nTo access the data using the site.Data.filename notation, the file name must begin with an underscore or a Unicode letter, followed by zero or more underscores, Unicode letters, or Unicode digits. For example:\n123.json - Invalid x123.json - Valid _123.json - Valid To access the data using the index function, the file name is irrelevant. For example:\nData file Template code 123.json {{ index .Site.Data \"123\" }} x123.json {{ index .Site.Data \"x123\" }} _123.json {{ index .Site.Data \"_123\" }} x-123.json {{ index .Site.Data \"x-123\" }} Data files in themes Data Files can also be used in themes.\nHowever, note that the theme data files are merged with the project directory taking precedence. That is, Given two files with the same name and relative path, the data in the file in the root project data directory will override the data from the file in the themes/\u003cTHEME\u003e/data directory for keys that are duplicated).\nTherefore, theme authors should be careful not to include data files that could be easily overwritten by a user who decides to customize a theme. For theme-specific data items that shouldn’t be overridden, it can be wise to prefix the folder structure with a namespace; e.g. mytheme/data/\u003cTHEME\u003e/somekey/.... To check if any such duplicate exists, run hugo with the -v flag.\nThe keys in the map created with data templates from data files will be a dot-chained set of path, filename, and key in the file (if applicable).\nThis is best explained with an example:\nExamples Jaco Pastorius’ Solo Discography Jaco Pastorius was a great bass player, but his solo discography is short enough to use as an example. John Patitucci is another bass giant.\nThe example below is a bit contrived, but it illustrates the flexibility of data Files. This example uses TOML as its file format with the two following data files:\ndata/jazz/bass/jacopastorius.toml data/jazz/bass/johnpatitucci.toml jacopastorius.toml contains the content below. johnpatitucci.toml contains a similar list:\ndata/jazz/bass/jacopastorius.\ryaml\r \rtoml\r \rjson\r \rdiscography: - 1974 - Modern American Music … Period! The Criteria Sessions - 1974 - Jaco - 1976 - Jaco Pastorius - 1981 - Word of Mouth - 1981 - The Birthday Concert (released in 1995) - 1982 - Twins I \u0026 II (released in 1999) - 1983 - Invitation - 1986 - Broadway Blues (released in 1998) - 1986 - Honestly Solo Live (released in 1990) - 1986 - Live In Italy (released in 1991) - 1986 - Heavy'n Jazz (released in 1992) - 1991 - Live In New York City, Volumes 1-7. - 1999 - Rare Collection (compilation) - '2003 - Punk Jazz: The Jaco Pastorius Anthology (compilation)' - 2007 - The Essential Jaco Pastorius (compilation) discography = ['1974 - Modern American Music … Period! The Criteria Sessions', '1974 - Jaco', '1976 - Jaco Pastorius', '1981 - Word of Mouth', '1981 - The Birthday Concert (released in 1995)', '1982 - Twins I \u0026 II (released in 1999)', '1983 - Invitation', '1986 - Broadway Blues (released in 1998)', '1986 - Honestly Solo Live (released in 1990)', '1986 - Live In Italy (released in 1991)', \"1986 - Heavy'n Jazz (released in 1992)\", '1991 - Live In New York City, Volumes 1-7.', '1999 - Rare Collection (compilation)', '2003 - Punk Jazz: The Jaco Pastorius Anthology (compilation)', '2007 - The Essential Jaco Pastorius (compilation)'] { \"discography\": [ \"1974 - Modern American Music … Period! The Criteria Sessions\", \"1974 - Jaco\", \"1976 - Jaco Pastorius\", \"1981 - Word of Mouth\", \"1981 - The Birthday Concert (released in 1995)\", \"1982 - Twins I \\u0026 II (released in 1999)\", \"1983 - Invitation\", \"1986 - Broadway Blues (released in 1998)\", \"1986 - Honestly Solo Live (released in 1990)\", \"1986 - Live In Italy (released in 1991)\", \"1986 - Heavy'n Jazz (released in 1992)\", \"1991 - Live In New York City, Volumes 1-7.\", \"1999 - Rare Collection (compilation)\", \"2003 - Punk Jazz: The Jaco Pastorius Anthology (compilation)\", \"2007 - The Essential Jaco Pastorius (compilation)\" ] } The list of bass players can be accessed via .Site.Data.jazz.bass, a single bass player by adding the file name without the suffix, e.g. .Site.Data.jazz.bass.jacopastorius.\nYou can now render the list of recordings for all the bass players in a template:\n{{ range $.Site.Data.jazz.bass }} {{ partial \"artist.html\" . }} {{ end }} And then in the partials/artist.html:\n\u003cul\u003e {{ range .discography }} \u003cli\u003e{{ . }}\u003c/li\u003e {{ end }} \u003c/ul\u003e Discover a new favorite bass player? Just add another .toml file in the same directory.\nAccessing named values in a data file Assume you have the following data structure in your user0123 data file located directly in data/:\ndata/user0123.\ryaml\r \rtoml\r \rjson\r \rAchievements: - Can create a Key, Value list from Data File - Learns Hugo - Reads documentation Name: User0123 Short Description: He is a **jolly good** fellow. Achievements = ['Can create a Key, Value list from Data File', 'Learns Hugo', 'Reads documentation'] Name = 'User0123' 'Short Description' = 'He is a **jolly good** fellow.' { \"Achievements\": [ \"Can create a Key, Value list from Data File\", \"Learns Hugo\", \"Reads documentation\" ], \"Name\": \"User0123\", \"Short Description\": \"He is a **jolly good** fellow.\" } You can use the following code to render the Short Description in your layout:\n\u003cdiv\u003eShort Description of {{ .Site.Data.user0123.Name }}: \u003cp\u003e{{ index .Site.Data.user0123 \"Short Description\" | markdownify }}\u003c/p\u003e\u003c/div\u003e Note the use of the markdownify function. This will send the description through the Markdown rendering engine.\nRemote data Retrieve remote data using these template functions:\nresources.GetRemote (recommended) data.GetCSV data.GetJSON LiveReload with data files There is no chance to trigger a LiveReload when the content of a URL changes. However, when a local file changes (i.e., data/* and themes/\u003cTHEME\u003e/data/*), a LiveReload will be triggered. Symlinks are not supported. Note too that because downloading data takes a while, Hugo stops processing your Markdown files until the data download has been completed.\nIf you change any local file and the LiveReload is triggered, Hugo will read the data-driven (URL) content from the cache. If you have disabled the cache (i.e., by running the server with hugo server --ignoreCache), Hugo will re-download the content every time LiveReload triggers. This can create huge traffic. You may reach API limits quickly.\nExamples of data-driven content Photo gallery JSON powered: https://github.com/pcdummy/hugo-lightslider-example GitHub Starred Repositories in a post using data-driven content in a custom short code. Specs for data formats TOML Spec YAML Spec JSON Spec CSV Spec XML Spec "},{"date":"0001-01-01","uri":"/content-management/taxonomies/","title":"Taxonomies","content":"What is a taxonomy? Hugo includes support for user-defined groupings of content called taxonomies. Taxonomies are classifications of logical relationships between content.\nDefinitions Taxonomy a categorization that can be used to classify content Term a key within the taxonomy Value a piece of content assigned to a term Example taxonomy: movie website Let’s assume you are making a website about movies. You may want to include the following taxonomies:\nActors Directors Studios Genre Year Awards Then, in each of the movies, you would specify terms for each of these taxonomies (i.e., in the front matter of each of your movie content files). From these terms, Hugo would automatically create pages for each Actor, Director, Studio, Genre, Year, and Award, with each listing all of the Movies that matched that specific Actor, Director, Studio, Genre, Year, and Award.\nMovie taxonomy organization To continue with the example of a movie site, the following demonstrates content relationships from the perspective of the taxonomy:\nActor \u003c- Taxonomy Bruce Willis \u003c- Term The Sixth Sense \u003c- Value Unbreakable \u003c- Value Moonrise Kingdom \u003c- Value Samuel L. Jackson \u003c- Term Unbreakable \u003c- Value The Avengers \u003c- Value xXx \u003c- Value From the perspective of the content, the relationships would appear differently, although the data and labels used are the same:\nUnbreakable \u003c- Value Actors \u003c- Taxonomy Bruce Willis \u003c- Term Samuel L. Jackson \u003c- Term Director \u003c- Taxonomy M. Night Shyamalan \u003c- Term ... Moonrise Kingdom \u003c- Value Actors \u003c- Taxonomy Bruce Willis \u003c- Term Bill Murray \u003c- Term Director \u003c- Taxonomy Wes Anderson \u003c- Term ... Default taxonomies Hugo natively supports taxonomies.\nWithout adding a single line to your site configuration file, Hugo will automatically create taxonomies for tags and categories. That would be the same as manually configuring your taxonomies as below:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: category: categories tag: tags [taxonomies] category = 'categories' tag = 'tags' { \"taxonomies\": { \"category\": \"categories\", \"tag\": \"tags\" } } If you do not want Hugo to create any taxonomies, set disableKinds in your site configuration to the following:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdisableKinds: - taxonomy - term disableKinds = ['taxonomy', 'term'] { \"disableKinds\": [ \"taxonomy\", \"term\" ] } Kind Description Example home The landing page for the home page /index.html page The landing page for a given page my-post page (/posts/my-post/index.html) section The landing page of a given section posts section (/posts/index.html) taxonomy The landing page for a taxonomy tags taxonomy (/tags/index.html) term The landing page for one taxonomy’s term term awesome in tags taxonomy (/tags/awesome/index.html) Four other page kinds unrelated to content are robotsTXT, RSS, sitemap, and 404. Although primarily for internal use, you can specify the name when disabling one or more page kinds on your site. For example:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdisableKinds: - robotsTXT - \"404\" disableKinds = ['robotsTXT', '404'] { \"disableKinds\": [ \"robotsTXT\", \"404\" ] } Default destinations When taxonomies are used—and taxonomy templates are provided—Hugo will automatically create both a page listing all the taxonomy’s terms and individual pages with lists of content associated with each term. For example, a categories taxonomy declared in your configuration and used in your content front matter will create the following pages:\nA single page at example.com/categories/ that lists all the terms within the taxonomy Individual taxonomy list pages (e.g., /categories/development/) for each of the terms that shows a listing of all pages marked as part of that taxonomy within any content file’s front matter Configure taxonomies Custom taxonomies other than the defaults must be defined in your site configuration before they can be used throughout the site. You need to provide both the plural and singular labels for each taxonomy. For example, singular key = \"plural value\" for TOML and singular key: \"plural value\" for YAML.\nExample: adding a custom taxonomy named “series” While adding custom taxonomies, you need to put in the default taxonomies too, if you want to keep them.\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: category: categories series: series tag: tags [taxonomies] category = 'categories' series = 'series' tag = 'tags' { \"taxonomies\": { \"category\": \"categories\", \"series\": \"series\", \"tag\": \"tags\" } } Example: removing default taxonomies If you want to have just the default tags taxonomy, and remove the categories taxonomy for your site, you can do so by modifying the taxonomies value in your site configuration.\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: tag: tags [taxonomies] tag = 'tags' { \"taxonomies\": { \"tag\": \"tags\" } } If you want to disable all taxonomies altogether, see the use of disableKinds in Hugo Taxonomy Defaults.\nYou can add content and front matter to your taxonomy list and taxonomy terms pages. See Content Organization for more information on how to add an _index.md for this purpose.\nAdd taxonomies to content Once a taxonomy is defined at the site level, any piece of content can be assigned to it, regardless of content type or content section.\nAssigning content to a taxonomy is done in the front matter. Simply create a variable with the plural name of the taxonomy and assign all terms you want to apply to the instance of the content type.\nIf you would like the ability to quickly generate content files with preconfigured taxonomies or terms, read the docs on Hugo archetypes.\nExample: front matter with taxonomies content/example.md\ryaml\r \rtoml\r \rjson\r \r--- categories: - Development project_url: https://github.com/gohugoio/hugo series: - Go Web Dev slug: hugo tags: - Development - Go - fast - Blogging title: 'Hugo: A fast and flexible static site generator' ---\r+++ categories = ['Development'] project_url = 'https://github.com/gohugoio/hugo' series = ['Go Web Dev'] slug = 'hugo' tags = ['Development', 'Go', 'fast', 'Blogging'] title = 'Hugo: A fast and flexible static site generator' +++\r{ \"categories\": [ \"Development\" ], \"project_url\": \"https://github.com/gohugoio/hugo\", \"series\": [ \"Go Web Dev\" ], \"slug\": \"hugo\", \"tags\": [ \"Development\", \"Go\", \"fast\", \"Blogging\" ], \"title\": \"Hugo: A fast and flexible static site generator\" } Order taxonomies A content file can assign weight for each of its associate taxonomies. Taxonomic weight can be used for sorting or ordering content in taxonomy list templates and is declared in a content file’s front matter. The convention for declaring taxonomic weight is taxonomyname_weight.\nThe following show a piece of content that has a weight of 22, which can be used for ordering purposes when rendering the pages assigned to the “a”, “b” and “c” values of the tags taxonomy. It has also been assigned the weight of 44 when rendering the “d” category page.\nExample: taxonomic weight yaml\r \rtoml\r \rjson\r \rcategories: - d categories_weight: 44 tags: - a - b - c tags_weight: 22 title: foo categories = ['d'] categories_weight = 44 tags = ['a', 'b', 'c'] tags_weight = 22 title = 'foo' { \"categories\": [ \"d\" ], \"categories_weight\": 44, \"tags\": [ \"a\", \"b\", \"c\" ], \"tags_weight\": 22, \"title\": \"foo\" } By using taxonomic weight, the same piece of content can appear in different positions in different taxonomies.\nAdd custom metadata to a taxonomy or term If you need to add custom metadata to your taxonomy terms, you will need to create a page for that term at /content/\u003cTAXONOMY\u003e/\u003cTERM\u003e/_index.md and add your metadata in its front matter. Continuing with our ‘Actors’ example, let’s say you want to add a Wikipedia page link to each actor. Your terms pages would be something like this:\ncontent/actors/bruce-willis/_index.md\ryaml\r \rtoml\r \rjson\r \r--- title: Bruce Willis wikipedia: https://en.wikipedia.org/wiki/Bruce_Willis ---\r+++ title = 'Bruce Willis' wikipedia = 'https://en.wikipedia.org/wiki/Bruce_Willis' +++\r{ \"title\": \"Bruce Willis\", \"wikipedia\": \"https://en.wikipedia.org/wiki/Bruce_Willis\" } "},{"date":"0001-01-01","uri":"/templates/rss/","title":"RSS templates","content":"Configuration By default, when you build your site, Hugo generates RSS feeds for home, section, taxonomy, and term pages. Control feed generation in your site configuration. For example, to generate feeds for home and section pages, but not for taxonomy and term pages:\nhugo.\ryaml\r \rtoml\r \rjson\r \routputs: home: - html - rss section: - html - rss taxonomy: - html term: - html [outputs] home = ['html', 'rss'] section = ['html', 'rss'] taxonomy = ['html'] term = ['html'] { \"outputs\": { \"home\": [ \"html\", \"rss\" ], \"section\": [ \"html\", \"rss\" ], \"taxonomy\": [ \"html\" ], \"term\": [ \"html\" ] } } To disable feed generation for all page kinds:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdisableKinds: - rss disableKinds = ['rss'] { \"disableKinds\": [ \"rss\" ] } By default, the number of items in each feed is unlimited. Change this as needed in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: rss: limit: 42 [services] [services.rss] limit = 42 { \"services\": { \"rss\": { \"limit\": 42 } } } Set limit to -1 to generate an unlimited number of items per feed.\nThe built-in RSS template will render the following values, if present, from your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rcopyright: © 2023 ABC Widgets, Inc. params: author: email: jdoe@example.org name: John Doe copyright = '© 2023 ABC Widgets, Inc.' [params] [params.author] email = 'jdoe@example.org' name = 'John Doe' { \"copyright\": \"© 2023 ABC Widgets, Inc.\", \"params\": { \"author\": { \"email\": \"jdoe@example.org\", \"name\": \"John Doe\" } } } Include feed reference To include a feed reference in the head element of your rendered pages, place this within the head element of your templates:\n{{ with .OutputFormats.Get \"rss\" -}} {{ printf `\u003clink rel=%q type=%q href=%q title=%q\u003e` .Rel .MediaType.Type .Permalink site.Title | safeHTML }} {{ end }} Hugo will render this to:\n\u003clink rel=\"alternate\" type=\"application/rss+xml\" href=\"https://example.org/index.xml\" title=\"ABC Widgets\"\u003e Custom templates Override Hugo’s built-in RSS template by creating one or more of your own, following the naming conventions as shown in the template lookup order table.\nFor example, to use different templates for home, section, taxonomy, and term pages:\nlayouts/ └── _default/ ├── home.rss.xml ├── section.rss.xml ├── taxonomy.rss.xml └── term.rss.xml RSS templates receive the .Page and .Site objects in context.\nTemplate lookup order The table below shows the RSS template lookup order for the different page kinds. The first listing shows the lookup order when running with a theme (demoTheme).\nExample\rOutputFormat\rSuffix\rTemplate Lookup Order\rRSS home\rrss\rxml\rlayouts/index.rss.xmllayouts/home.rss.xmllayouts/rss.xmllayouts/list.rss.xmllayouts/index.xmllayouts/home.xmllayouts/list.xmllayouts/_default/index.rss.xmllayouts/_default/home.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/index.xmllayouts/_default/home.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml\rSection list for \"posts\"\rrss\rxml\rlayouts/posts/section.rss.xmllayouts/posts/rss.xmllayouts/posts/list.rss.xmllayouts/posts/section.xmllayouts/posts/list.xmllayouts/section/section.rss.xmllayouts/section/rss.xmllayouts/section/list.rss.xmllayouts/section/section.xmllayouts/section/list.xmllayouts/_default/section.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/section.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml\rTaxonomy list for \"categories\"\rrss\rxml\rlayouts/categories/category.terms.rss.xmllayouts/categories/terms.rss.xmllayouts/categories/taxonomy.rss.xmllayouts/categories/rss.xmllayouts/categories/list.rss.xmllayouts/categories/category.terms.xmllayouts/categories/terms.xmllayouts/categories/taxonomy.xmllayouts/categories/list.xmllayouts/category/category.terms.rss.xmllayouts/category/terms.rss.xmllayouts/category/taxonomy.rss.xmllayouts/category/rss.xmllayouts/category/list.rss.xmllayouts/category/category.terms.xmllayouts/category/terms.xmllayouts/category/taxonomy.xmllayouts/category/list.xmllayouts/taxonomy/category.terms.rss.xmllayouts/taxonomy/terms.rss.xmllayouts/taxonomy/taxonomy.rss.xmllayouts/taxonomy/rss.xmllayouts/taxonomy/list.rss.xmllayouts/taxonomy/category.terms.xmllayouts/taxonomy/terms.xmllayouts/taxonomy/taxonomy.xmllayouts/taxonomy/list.xmllayouts/_default/category.terms.rss.xmllayouts/_default/terms.rss.xmllayouts/_default/taxonomy.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/category.terms.xmllayouts/_default/terms.xmllayouts/_default/taxonomy.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml\rTerm list for \"categories\"\rrss\rxml\rlayouts/categories/term.rss.xmllayouts/categories/category.rss.xmllayouts/categories/taxonomy.rss.xmllayouts/categories/rss.xmllayouts/categories/list.rss.xmllayouts/categories/term.xmllayouts/categories/category.xmllayouts/categories/taxonomy.xmllayouts/categories/list.xmllayouts/term/term.rss.xmllayouts/term/category.rss.xmllayouts/term/taxonomy.rss.xmllayouts/term/rss.xmllayouts/term/list.rss.xmllayouts/term/term.xmllayouts/term/category.xmllayouts/term/taxonomy.xmllayouts/term/list.xmllayouts/taxonomy/term.rss.xmllayouts/taxonomy/category.rss.xmllayouts/taxonomy/taxonomy.rss.xmllayouts/taxonomy/rss.xmllayouts/taxonomy/list.rss.xmllayouts/taxonomy/term.xmllayouts/taxonomy/category.xmllayouts/taxonomy/taxonomy.xmllayouts/taxonomy/list.xmllayouts/category/term.rss.xmllayouts/category/category.rss.xmllayouts/category/taxonomy.rss.xmllayouts/category/rss.xmllayouts/category/list.rss.xmllayouts/category/term.xmllayouts/category/category.xmllayouts/category/taxonomy.xmllayouts/category/list.xmllayouts/_default/term.rss.xmllayouts/_default/category.rss.xmllayouts/_default/taxonomy.rss.xmllayouts/_default/rss.xmllayouts/_default/list.rss.xmllayouts/_default/term.xmllayouts/_default/category.xmllayouts/_default/taxonomy.xmllayouts/_default/list.xmllayouts/_internal/_default/rss.xml\r"},{"date":"0001-01-01","uri":"/content-management/summaries/","title":"Content summaries","content":"With the use of the .Summary page variable, Hugo generates summaries of content to use as a short version in summary views.\nSummary splitting options Automatic Summary Split Manual Summary Split Front Matter Summary It is natural to accompany the summary with links to the original content, and a common design pattern is to see this link in the form of a “Read More …” button. See the .RelPermalink, .Permalink, and .Truncated page variables.\nAutomatic summary splitting By default, Hugo automatically takes the first 70 words of your content as its summary and stores it into the .Summary page variable for use in your templates. You may customize the summary length by setting summaryLength in your site configuration.\nYou can customize how HTML tags in the summary are loaded using functions such as plainify and safeHTML.\nThe Hugo-defined summaries are set to use word count calculated by splitting the text by one or more consecutive whitespace characters. If you are creating content in a CJK language and want to use Hugo’s automatic summary splitting, set hasCJKLanguage to true in your site configuration.\nManual summary splitting Alternatively, you may add the \u003c!--more--\u003e summary divider where you want to split the article.\nFor Org mode content, use # more where you want to split the article.\nContent that comes before the summary divider will be used as that content’s summary and stored in the .Summary page variable with all HTML formatting intact.\nThe concept of a summary divider is not unique to Hugo. It is also called the “more tag” or “excerpt separator” in other literature.\nPros Freedom, precision, and improved rendering. All HTML tags and formatting are preserved. Cons Extra work for content authors, since they need to remember to type \u003c!--more--\u003e (or # more for org content) in each content file. This can be automated by adding the summary divider below the front matter of an archetype. Be careful to enter \u003c!--more--\u003e exactly; i.e., all lowercase and with no whitespace.\nFront matter summary You might want your summary to be something other than the text that starts the article. In this case you can provide a separate summary in the summary variable of the article front matter.\nPros Complete freedom of text independent of the content of the article. Markup can be used within the summary. Cons Extra work for content authors as they need to write an entirely separate piece of text as the summary of the article. Summary selection order Because there are multiple ways in which a summary can be specified it is useful to understand the order of selection Hugo follows when deciding on the text to be returned by .Summary. It is as follows:\nIf there is a \u003c!--more--\u003e summary divider present in the article, the text up to the divider will be provided as per the manual summary split method If there is a summary variable in the article front matter the value of the variable will be provided as per the front matter summary method The text at the start of the article will be provided as per the automatic summary split method Hugo uses the first of the above steps that returns text. So if, for example, your article has both summary variable in its front matter and a \u003c!--more--\u003e summary divider Hugo will use the manual summary split method.\nExample: first 10 articles with summaries You can show content summaries with the following code. You could use the following snippet, for example, in a section template.\npage-list-with-summaries.html\r{{ range first 10 .Pages }} \u003carticle\u003e \u003c!-- this \u003cdiv\u003e includes the title summary --\u003e \u003cdiv\u003e \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ .Summary }} \u003c/div\u003e {{ if .Truncated }} \u003c!-- This \u003cdiv\u003e includes a read more link, but only if the summary is truncated... --\u003e \u003cdiv\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003eRead More…\u003c/a\u003e \u003c/div\u003e {{ end }} \u003c/article\u003e {{ end }}\rNote how the .Truncated boolean variable value may be used to hide the “Read More…” link when the content is not truncated; i.e., when the summary contains the entire article.\n"},{"date":"0001-01-01","uri":"/content-management/cross-references/","title":"Links and cross references","content":"The ref and relref shortcodes display the absolute and relative permalinks to a document, respectively.\nUse of ref and relref The ref and relref shortcodes require a single parameter: the path to a content document, with or without a file extension, with or without an anchor. Paths without a leading / are first resolved relative to the current page, then to the remainder of the site.\n. └── content ├── about | ├── _index.md | └── credits.md ├── pages | ├── document1.md | └── document2.md // has anchor #anchor ├── products | └── index.md └── blog └── my-post.md The pages can be referenced as follows:\n{{\u003c ref \"document2\" \u003e}} // \u003c- From pages/document1.md, relative path {{\u003c ref \"document2#anchor\" \u003e}} {{\u003c ref \"document2.md\" \u003e}} {{\u003c ref \"document2.md#anchor\" \u003e}} {{\u003c ref \"#anchor\" \u003e}} // \u003c- From pages/document2.md {{\u003c ref \"/blog/my-post\" \u003e}} // \u003c- From anywhere, absolute path {{\u003c ref \"/blog/my-post.md\" \u003e}} {{\u003c relref \"document\" \u003e}} {{\u003c relref \"document.md\" \u003e}} {{\u003c relref \"#anchor\" \u003e}} {{\u003c relref \"/blog/my-post.md\" \u003e}} index.md can be reference either by its path or by its containing folder without the ending /. _index.md can be referenced only by its containing folder:\n{{\u003c ref \"/about\" \u003e}} // \u003c- References /about/_index.md {{\u003c ref \"/about/_index\" \u003e}} // Raises REF_NOT_FOUND error {{\u003c ref \"/about/credits.md\" \u003e}} // \u003c- References /about/credits.md {{\u003c ref \"/products\" \u003e}} // \u003c- References /products/index.md {{\u003c ref \"/products/index\" \u003e}} // \u003c- References /products/index.md To generate a hyperlink using ref or relref in markdown:\n[About]({{\u003c ref \"/about\" \u003e}} \"About Us\") Hugo emits an error or warning if a document cannot be uniquely resolved. The error behavior is configurable; see below.\nLink to another language version To link to another language version of a document, use this syntax:\n{{\u003c relref path=\"document.md\" lang=\"ja\" \u003e}} Get another output format To link to another Output Format of a document, use this syntax:\n{{\u003c relref path=\"document.md\" outputFormat=\"rss\" \u003e}} Heading IDs When using Markdown document types, Hugo generates element IDs for every heading on a page. For example:\n## Reference produces this HTML:\n\u003ch2 id=\"reference\"\u003eReference\u003c/h2\u003e Get the permalink to a heading by appending the ID to the path when using the ref or relref shortcodes:\n{{\u003c ref \"document.md#reference\" \u003e}} {{\u003c relref \"document.md#reference\" \u003e}} Generate a custom heading ID by including an attribute. For example:\n## Reference A {#foo} ## Reference B {id=\"bar\"} produces this HTML:\n\u003ch2 id=\"foo\"\u003eReference A\u003c/h2\u003e \u003ch2 id=\"bar\"\u003eReference B\u003c/h2\u003e Hugo will generate unique element IDs if the same heading appears more than once on a page. For example:\n## Reference ## Reference ## Reference produces this HTML:\n\u003ch2 id=\"reference\"\u003eReference\u003c/h2\u003e \u003ch2 id=\"reference-1\"\u003eReference\u003c/h2\u003e \u003ch2 id=\"reference-2\"\u003eReference\u003c/h2\u003e Ref and RelRef Configuration The behavior can be configured in hugo.toml:\nrefLinksErrorLevel (“ERROR”) When using ref or relref to resolve page links and a link cannot resolved, it will be logged with this log level. Valid values are ERROR (default) or WARNING. Any ERROR will fail the build (exit -1). refLinksNotFoundURL URL to be used as a placeholder when a page reference cannot be found in ref or relref. Is used as-is. "},{"date":"0001-01-01","uri":"/templates/sitemap-template/","title":"Sitemap templates","content":"Overview Hugo’s built-in sitemap templates conform to v0.9 of the sitemap protocol.\nWith a monolingual project, Hugo generates a sitemap.xml file in the root of the publishDir using the built-in sitemap.xml template.\nWith a multilingual project, Hugo generates:\nA sitemap.xml file in the root of each site (language) using the built-in sitemap.xml template A sitemap.xml file in the root of the publishDir using the built-in sitemapindex.xml template Configuration Set the default values for change frequency and priority, and the name of the generated file, in your site configuration.\nhugo.\ryaml\r \rtoml\r \rjson\r \rsitemap: changeFreq: \"\" filename: sitemap.xml priority: -1 [sitemap] changeFreq = '' filename = 'sitemap.xml' priority = -1 { \"sitemap\": { \"changeFreq\": \"\", \"filename\": \"sitemap.xml\", \"priority\": -1 } } changefreq How frequently a page is likely to change. Valid values are always, hourly, daily, weekly, monthly, yearly, and never. Default is \"\" (change frequency omitted from rendered sitemap). filename The name of the generated file. Default is sitemap.xml. priority The priority of a page relative to any other page on the site. Valid values range from 0.0 to 1.0. Default is -1 (priority omitted from rendered sitemap). Override default values Override the default values for a given page in front matter.\nnews.md\ryaml\r \rtoml\r \rjson\r \r--- sitemap: changefreq: weekly priority: 0.8 title: News ---\r+++ title = 'News' [sitemap] changefreq = 'weekly' priority = 0.8 +++\r{ \"sitemap\": { \"changefreq\": \"weekly\", \"priority\": 0.8 }, \"title\": \"News\" } Override built-in templates To override the built-in sitemap.xml template, create a new file in either of these locations:\nlayouts/sitemap.xml layouts/_default/sitemap.xml When ranging through the page collection, access the change frequency and priority with .Sitemap.ChangeFreq and .Sitemap.Priority respectively.\nTo override the built-in sitemapindex.xml template, create a new file in either of these locations:\nlayouts/sitemapindex.xml layouts/_default/sitemapindex.xml Disable sitemap generation You may disable sitemap generation in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdisableKinds: - sitemap disableKinds = ['sitemap'] { \"disableKinds\": [ \"sitemap\" ] } "},{"date":"0001-01-01","uri":"/content-management/urls/","title":"URL management","content":"Overview By default, when Hugo renders a page, the resulting URL matches the file path within the content directory. For example:\ncontent/posts/post-1.md → https://example.org/posts/post-1/ You can change the structure and appearance of URLs with front matter values and site configuration options.\nFront matter slug Set the slug in front matter to override the last segment of the path. The slug value does not affect section pages.\ncontent/posts/post-1.md\ryaml\r \rtoml\r \rjson\r \r--- slug: my-first-post title: My First Post ---\r+++ slug = 'my-first-post' title = 'My First Post' +++\r{ \"slug\": \"my-first-post\", \"title\": \"My First Post\" } The resulting URL will be:\nhttps://example.org/posts/my-first-post/ url Set the url in front matter to override the entire path. Use this with either regular pages or section pages.\nWith this front matter:\ncontent/posts/post-1.md\ryaml\r \rtoml\r \rjson\r \r--- title: My First Article url: /articles/my-first-article ---\r+++ title = 'My First Article' url = '/articles/my-first-article' +++\r{ \"title\": \"My First Article\", \"url\": \"/articles/my-first-article\" } The resulting URL will be:\nhttps://example.org/articles/my-first-article/ If you include a file extension:\ncontent/posts/post-1.md\ryaml\r \rtoml\r \rjson\r \r--- title: My First Article url: /articles/my-first-article.html ---\r+++ title = 'My First Article' url = '/articles/my-first-article.html' +++\r{ \"title\": \"My First Article\", \"url\": \"/articles/my-first-article.html\" } The resulting URL will be:\nhttps://example.org/articles/my-first-article.html In a monolingual site, a url value with or without a leading slash is relative to the baseURL.\nIn a multilingual site:\nA url value with a leading slash is relative to the baseURL. A url value without a leading slash is relative to the baseURL plus the language prefix. Site type Front matter url Resulting URL monolingual /about https://example.org/about/ monolingual about https://example.org/about/ multilingual /about https://example.org/about/ multilingual about https://example.org/de/about/ If you set both slug and url in front matter, the url value takes precedence.\nSite configuration Permalinks In your site configuration, define a URL pattern for each top-level section. Each URL pattern can target a given language and/or page kind.\nFront matter url values override the URL patterns defined in the permalinks section of your site configuration.\nMonolingual examples With this content structure:\ncontent/ ├── posts/ │ ├── bash-in-slow-motion.md │ └── tls-in-a-nutshell.md ├── tutorials/ │ ├── git-for-beginners.md │ └── javascript-bundling-with-hugo.md └── _index.md Render tutorials under “training”, and render the posts under “articles” with a date-base hierarchy:\nhugo.\ryaml\r \rtoml\r \rjson\r \rpermalinks: page: posts: /articles/:year/:month/:slug/ tutorials: /training/:slug/ section: posts: /articles/ tutorials: /training/ [permalinks] [permalinks.page] posts = '/articles/:year/:month/:slug/' tutorials = '/training/:slug/' [permalinks.section] posts = '/articles/' tutorials = '/training/' { \"permalinks\": { \"page\": { \"posts\": \"/articles/:year/:month/:slug/\", \"tutorials\": \"/training/:slug/\" }, \"section\": { \"posts\": \"/articles/\", \"tutorials\": \"/training/\" } } } The structure of the published site will be:\npublic/ ├── articles/ │ ├── 2023/ │ │ ├── 04/ │ │ │ └── bash-in-slow-motion/ │ │ │ └── index.html │ │ └── 06/ │ │ └── tls-in-a-nutshell/ │ │ └── index.html │ └── index.html ├── training/ │ ├── git-for-beginners/ │ │ └── index.html │ ├── javascript-bundling-with-hugo/ │ │ └── index.html │ └── index.html └── index.html To create a date-based hierarchy for regular pages in the content root:\nhugo.\ryaml\r \rtoml\r \rjson\r \rpermalinks: page: /: /:year/:month/:slug/ [permalinks] [permalinks.page] '/' = '/:year/:month/:slug/' { \"permalinks\": { \"page\": { \"/\": \"/:year/:month/:slug/\" } } } Use the same approach with taxonomy terms. For example, to omit the taxonomy segment of the URL:\nhugo.\ryaml\r \rtoml\r \rjson\r \rpermalinks: term: tags: /:slug/ [permalinks] [permalinks.term] tags = '/:slug/' { \"permalinks\": { \"term\": { \"tags\": \"/:slug/\" } } } Multilingual example Use the permalinks configuration as a component of your localization strategy.\nWith this content structure:\ncontent/ ├── en/ │ ├── books/ │ │ ├── les-miserables.md │ │ └── the-hunchback-of-notre-dame.md │ └── _index.md └── es/ ├── books/ │ ├── les-miserables.md │ └── the-hunchback-of-notre-dame.md └── _index.md And this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: en defaultContentLanguageInSubdir: true languages: en: contentDir: content/en languageCode: en-US languageDirection: ltr languageName: English permalinks: page: books: /books/:slug/ section: books: /books/ weight: 1 es: contentDir: content/es languageCode: es-ES languageDirection: ltr languageName: Español permalinks: page: books: /libros/:slug/ section: books: /libros/ weight: 2 defaultContentLanguage = 'en' defaultContentLanguageInSubdir = true [languages] [languages.en] contentDir = 'content/en' languageCode = 'en-US' languageDirection = 'ltr' languageName = 'English' weight = 1 [languages.en.permalinks] [languages.en.permalinks.page] books = '/books/:slug/' [languages.en.permalinks.section] books = '/books/' [languages.es] contentDir = 'content/es' languageCode = 'es-ES' languageDirection = 'ltr' languageName = 'Español' weight = 2 [languages.es.permalinks] [languages.es.permalinks.page] books = '/libros/:slug/' [languages.es.permalinks.section] books = '/libros/' { \"defaultContentLanguage\": \"en\", \"defaultContentLanguageInSubdir\": true, \"languages\": { \"en\": { \"contentDir\": \"content/en\", \"languageCode\": \"en-US\", \"languageDirection\": \"ltr\", \"languageName\": \"English\", \"permalinks\": { \"page\": { \"books\": \"/books/:slug/\" }, \"section\": { \"books\": \"/books/\" } }, \"weight\": 1 }, \"es\": { \"contentDir\": \"content/es\", \"languageCode\": \"es-ES\", \"languageDirection\": \"ltr\", \"languageName\": \"Español\", \"permalinks\": { \"page\": { \"books\": \"/libros/:slug/\" }, \"section\": { \"books\": \"/libros/\" } }, \"weight\": 2 } } } The structure of the published site will be:\npublic/ ├── en/ │ ├── books/ │ │ ├── les-miserables/ │ │ │ └── index.html │ │ ├── the-hunchback-of-notre-dame/ │ │ │ └── index.html │ │ └── index.html │ └── index.html ├── es/ │ ├── libros/ │ │ ├── les-miserables/ │ │ │ └── index.html │ │ ├── the-hunchback-of-notre-dame/ │ │ │ └── index.html │ │ └── index.html │ └── index.html └── index.html Tokens Use these tokens when defining the URL pattern. The date field in front matter determines the value of time-related tokens.\n:year the 4-digit year :month the 2-digit month :monthname the name of the month :day the 2-digit day :weekday the 1-digit day of the week (Sunday = 0) :weekdayname the name of the day of the week :yearday the 1- to 3-digit day of the year :section the content’s section :sections the content’s sections hierarchy. You can use a selection of the sections using slice syntax: :sections[1:] includes all but the first, :sections[:last] includes all but the last, :sections[last] includes only the last, :sections[1:2] includes section 2 and 3. Note that this slice access will not throw any out-of-bounds errors, so you don’t have to be exact. :title the content’s title :slug the content’s slug (or title if no slug is provided in the front matter) :slugorfilename the content’s slug (or file name if no slug is provided in the front matter) :filename the content’s file name (without extension) For time-related values, you can also use the layout string components defined in Go’s time package. For example:\nhugo.\ryaml\r \rtoml\r \rjson\r \rpermalinks: posts: /:06/:1/:2/:title/ [permalinks] posts = '/:06/:1/:2/:title/' { \"permalinks\": { \"posts\": \"/:06/:1/:2/:title/\" } } Appearance The appearance of a URL is either ugly or pretty.\nType Path URL ugly content/about.md https://example.org/about.html pretty content/about.md https://example.org/about/ By default, Hugo produces pretty URLs. To generate ugly URLs, change your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \ruglyURLs: true uglyURLs = true { \"uglyURLs\": true } Post-processing Hugo provides two mutually exclusive configuration options to alter URLs after it renders a page.\nCanonical URLs This is a legacy configuration option, superseded by template functions and markdown render hooks, and will likely be removed in a future release.\nIf enabled, Hugo performs a search and replace after it renders the page. It searches for site-relative URLs (those with a leading slash) associated with action, href, src, srcset, and url attributes. It then prepends the baseURL to create absolute URLs.\n\u003ca href=\"/about\"\u003e → \u003ca href=\"https://example.org/about/\"\u003e \u003cimg src=\"/a.gif\"\u003e → \u003cimg src=\"https://example.org/a.gif\"\u003e This is an imperfect, brute force approach that can affect content as well as HTML attributes. As noted above, this is a legacy configuration option that will likely be removed in a future release.\nTo enable:\nhugo.\ryaml\r \rtoml\r \rjson\r \rcanonifyURLs: true canonifyURLs = true { \"canonifyURLs\": true } Relative URLs Do not enable this option unless you are creating a serverless site, navigable via the file system.\nIf enabled, Hugo performs a search and replace after it renders the page. It searches for site-relative URLs (those with a leading slash) associated with action, href, src, srcset, and url attributes. It then transforms the URL to be relative to the current page.\nFor example, when rendering content/posts/post-1:\n\u003ca href=\"/about\"\u003e → \u003ca href=\"../../about\"\u003e \u003cimg src=\"/a.gif\"\u003e → \u003cimg src=\"../../a.gif\"\u003e This is an imperfect, brute force approach that can affect content as well as HTML attributes. As noted above, do not enable this option unless you are creating a serverless site.\nTo enable:\nhugo.\ryaml\r \rtoml\r \rjson\r \rrelativeURLs: true relativeURLs = true { \"relativeURLs\": true } Aliases Create redirects from old URLs to new URLs with aliases:\nAn alias with a leading slash is relative to the baseURL An alias without a leading slash is relative to the current directory Examples Change the file name of an existing page, and create an alias from the previous URL to the new URL:\ncontent/posts/new-file-name.md.\ryaml\r \rtoml\r \rjson\r \raliases: - /posts/previous-file-name aliases = ['/posts/previous-file-name'] { \"aliases\": [ \"/posts/previous-file-name\" ] } Each of these directory-relative aliases is equivalent to the site-relative alias above:\nprevious-file-name ./previous-file-name ../posts/previous-file-name You can create more than one alias to the current page:\ncontent/posts/new-file-name.md.\ryaml\r \rtoml\r \rjson\r \raliases: - previous-file-name - original-file-name aliases = ['previous-file-name', 'original-file-name'] { \"aliases\": [ \"previous-file-name\", \"original-file-name\" ] } In a multilingual site, use a directory-relative alias, or include the language prefix with a site-relative alias:\ncontent/posts/new-file-name.de.md.\ryaml\r \rtoml\r \rjson\r \raliases: - /de/posts/previous-file-name aliases = ['/de/posts/previous-file-name'] { \"aliases\": [ \"/de/posts/previous-file-name\" ] } How aliases work Using the first example above, Hugo generates the following site structure:\npublic/ ├── posts/ │ ├── new-file-name/ │ │ └── index.html │ ├── previous-file-name/ │ │ └── index.html │ └── index.html └── index.html The alias from the previous URL to the new URL is a client-side redirect:\nposts/previous-file-name/index.html\r\u003c!DOCTYPE html\u003e \u003chtml lang=\"en-us\"\u003e \u003chead\u003e \u003ctitle\u003ehttps://example.org/posts/new-file-name/\u003c/title\u003e \u003clink rel=\"canonical\" href=\"https://example.org/posts/new-file-name/\"\u003e \u003cmeta name=\"robots\" content=\"noindex\"\u003e \u003cmeta charset=\"utf-8\"\u003e \u003cmeta http-equiv=\"refresh\" content=\"0; url=https://example.org/posts/new-file-name/\"\u003e \u003c/head\u003e \u003c/html\u003e\rCollectively, the elements in the head section:\nTell search engines that the new URL is canonical Tell search engines not to index the previous URL Tell the browser to redirect to the new URL Hugo renders alias files before rendering pages. A new page with the previous file name will overwrite the alias, as expected.\nCustomize Create a new template (layouts/alias.html) to customize the content of the alias files. The template receives the following context:\nPermalink the link to the page being aliased Page the Page data for the page being aliased "},{"date":"0001-01-01","uri":"/templates/internal/","title":"Internal templates","content":"\rWhile the following internal templates are called similar to partials, they do not observe the partial template lookup order.\nGoogle Analytics Hugo ships with an internal template supporting Google Analytics 4.\nConfigure Google Analytics Provide your tracking ID in your configuration file:\nGoogle Analytics 4 (gtag.js) hugo.\ryaml\r \rtoml\r \rjson\r \rservices: googleAnalytics: ID: G-MEASUREMENT_ID [services] [services.googleAnalytics] ID = 'G-MEASUREMENT_ID' { \"services\": { \"googleAnalytics\": { \"ID\": \"G-MEASUREMENT_ID\" } } } Use the Google Analytics template Include the Google Analytics internal template in your templates where you want the code to appear:\n{{ template \"_internal/google_analytics.html\" . }} To create your own template, access the configured ID with {{ site.Config.Services.GoogleAnalytics.ID }}.\nDisqus Hugo also ships with an internal template for Disqus comments, a popular commenting system for both static and dynamic websites. To effectively use Disqus, secure a Disqus “shortname” by signing up for the free service.\nConfigure Disqus To use Hugo’s Disqus template, first set up a single configuration value:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: disqus: shortname: your-disqus-shortname [services] [services.disqus] shortname = 'your-disqus-shortname' { \"services\": { \"disqus\": { \"shortname\": \"your-disqus-shortname\" } } } Hugo’s Disqus template accesses this value with:\n{{ .Site.Config.Services.Disqus.Shortname }} You can also set the following in the front matter for a given piece of content:\ndisqus_identifier disqus_title disqus_url Use the Disqus template To add Disqus, include the following line in the templates where you want your comments to appear:\n{{ template \"_internal/disqus.html\" . }} Conditional loading of Disqus comments Users have noticed that enabling Disqus comments when running the Hugo web server on localhost (i.e. via hugo server) causes the creation of unwanted discussions on the associated Disqus account.\nYou can create the following layouts/partials/disqus.html:\nlayouts/partials/disqus.html\r\u003cdiv id=\"disqus_thread\"\u003e\u003c/div\u003e \u003cscript type=\"text/javascript\"\u003e (function() { // Don't ever inject Disqus on localhost--it creates unwanted // discussions from 'localhost:1313' on your Disqus account... if (window.location.hostname == \"localhost\") return; var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; var disqus_shortname = '{{ .Site.Config.Services.Disqus.Shortname }}'; dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })(); \u003c/script\u003e \u003cnoscript\u003ePlease enable JavaScript to view the \u003ca href=\"https://disqus.com/?ref_noscript\"\u003ecomments powered by Disqus.\u003c/a\u003e\u003c/noscript\u003e \u003ca href=\"https://disqus.com/\" class=\"dsq-brlink\"\u003ecomments powered by \u003cspan class=\"logo-disqus\"\u003eDisqus\u003c/span\u003e\u003c/a\u003e\rThe if statement skips the initialization of the Disqus comment injection when you are running on localhost.\nYou can then render your custom Disqus partial template as follows:\n{{ partial \"disqus.html\" . }} Open Graph An internal template for the Open Graph protocol, metadata that enables a page to become a rich object in a social graph. This format is used for Facebook and some other sites.\nConfigure Open Graph Hugo’s Open Graph template is configured using a mix of configuration variables and front-matter on individual pages.\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: description: Text about my cool site images: - site-feature-image.jpg title: My cool site taxonomies: series: series [params] description = 'Text about my cool site' images = ['site-feature-image.jpg'] title = 'My cool site' [taxonomies] series = 'series' { \"params\": { \"description\": \"Text about my cool site\", \"images\": [ \"site-feature-image.jpg\" ], \"title\": \"My cool site\" }, \"taxonomies\": { \"series\": \"series\" } } content/blog/my-post.md.\ryaml\r \rtoml\r \rjson\r \raudio: [] date: \"2006-01-02\" description: Text about this post images: - post-cover.png series: [] tags: [] title: Post title videos: [] audio = [] date = '2006-01-02' description = 'Text about this post' images = ['post-cover.png'] series = [] tags = [] title = 'Post title' videos = [] { \"audio\": [], \"date\": \"2006-01-02\", \"description\": \"Text about this post\", \"images\": [ \"post-cover.png\" ], \"series\": [], \"tags\": [], \"title\": \"Post title\", \"videos\": [] } Hugo uses the page title and description for the title and description metadata. The first 6 URLs from the images array are used for image metadata. If page bundles are used and the images array is empty or undefined, images with file names matching *feature* or *cover*,*thumbnail* are used for image metadata.\nVarious optional metadata can also be set:\nDate, published date, and last modified data are used to set the published time metadata if specified. audio and videos are URL arrays like images for the audio and video metadata tags, respectively. The first 6 tags on the page are used for the tags metadata. The series taxonomy is used to specify related “see also” pages by placing them in the same series. If using YouTube this will produce a og:video tag like \u003cmeta property=\"og:video\" content=\"url\"\u003e. Use the https://youtu.be/\u003cid\u003e format with YouTube videos (example: https://youtu.be/qtIqKaDlqXo).\nUse the Open Graph template To add Open Graph metadata, include the following line between the \u003chead\u003e tags in your templates:\n{{ template \"_internal/opengraph.html\" . }} Twitter Cards An internal template for Twitter Cards, metadata used to attach rich media to Tweets linking to your site.\nConfigure Twitter Cards Hugo’s Twitter Card template is configured using a mix of configuration variables and front-matter on individual pages.\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: description: Text about my cool site images: - site-feature-image.jpg [params] description = 'Text about my cool site' images = ['site-feature-image.jpg'] { \"params\": { \"description\": \"Text about my cool site\", \"images\": [ \"site-feature-image.jpg\" ] } } content/blog/my-post.md.\ryaml\r \rtoml\r \rjson\r \rdescription: Text about this post images: - post-cover.png title: Post title description = 'Text about this post' images = ['post-cover.png'] title = 'Post title' { \"description\": \"Text about this post\", \"images\": [ \"post-cover.png\" ], \"title\": \"Post title\" } If images aren’t specified in the page front-matter, then hugo searches for image page resources with feature, cover, or thumbnail in their name. If no image resources with those names are found, the images defined in the site config are used instead. If no images are found at all, then an image-less Twitter summary card is used instead of summary_large_image.\nHugo uses the page title and description for the card’s title and description fields. The page summary is used if no description is given.\nSet the value of twitter:site in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: social: twitter: GoHugoIO [params] [params.social] twitter = 'GoHugoIO' { \"params\": { \"social\": { \"twitter\": \"GoHugoIO\" } } } NOTE: The @ will be added for you\n\u003cmeta name=\"twitter:site\" content=\"@GoHugoIO\"/\u003e Use the Twitter Cards template To add Twitter card metadata, include the following line immediately after the \u003chead\u003e element in your templates:\n{{ template \"_internal/twitter_cards.html\" . }} The internal templates The code for these templates is located here.\n_internal/disqus.html _internal/google_analytics.html _internal/opengraph.html _internal/pagination.html _internal/schema.html _internal/twitter_cards.html "},{"date":"0001-01-01","uri":"/content-management/menus/","title":"Menus","content":"Overview To create a menu for your site:\nDefine the menu entries Localize each entry Render the menu with a template Create multiple menus, either flat or nested. For example, create a main menu for the header, and a separate menu for the footer.\nThere are three ways to define menu entries:\nAutomatically In front matter In site configuration Although you can use these methods in combination when defining a menu, the menu will be easier to conceptualize and maintain if you use one method throughout the site.\nDefine automatically To automatically define menu entries for each top-level section of your site, enable the section pages menu in your site configuration.\nhugo.\ryaml\r \rtoml\r \rjson\r \rsectionPagesMenu: main sectionPagesMenu = 'main' { \"sectionPagesMenu\": \"main\" } This creates a menu structure that you can access with site.Menus.main in your templates. See menu templates for details.\nDefine in front matter To add a page to the “main” menu:\ncontent/about.md\ryaml\r \rtoml\r \rjson\r \r--- menus: main title: About ---\r+++ menus = 'main' title = 'About' +++\r{ \"menus\": \"main\", \"title\": \"About\" } Access the entry with site.Menus.main in your templates. See menu templates for details.\nTo add a page to the “main” and “footer” menus:\ncontent/contact.md\ryaml\r \rtoml\r \rjson\r \r--- menus: - main - footer title: Contact ---\r+++ menus = ['main', 'footer'] title = 'Contact' +++\r{ \"menus\": [ \"main\", \"footer\" ], \"title\": \"Contact\" } Access the entry with site.Menus.main and site.Menus.footer in your templates. See menu templates for details.\nThe configuration key in the examples above is menus. The menu (singular) configuration key is an alias for menus.\nProperties Use these properties when defining menu entries in front matter:\nidentifier (string) Required when two or more menu entries have the same name, or when localizing the name using translation tables. Must start with a letter, followed by letters, digits, or underscores. name (string) The text to display when rendering the menu entry. params (map) User-defined properties for the menu entry. parent (string) The identifier of the parent menu entry. If identifier is not defined, use name. Required for child entries in a nested menu. post (string) The HTML to append when rendering the menu entry. pre (string) The HTML to prepend when rendering the menu entry. title (string) The HTML title attribute of the rendered menu entry. weight (int) A non-zero integer indicating the entry’s position relative the root of the menu, or to its parent for a child entry. Lighter entries float to the top, while heavier entries sink to the bottom. Example This front matter menu entry demonstrates some of the available properties:\ncontent/products/software.md\ryaml\r \rtoml\r \rjson\r \r--- menus: main: - params: class: center parent: Products pre: \u003ci class=\"fa-solid fa-code\"\u003e\u003c/i\u003e weight: 20 title: Software ---\r+++ title = 'Software' [menus] [[menus.main]] parent = 'Products' pre = '\u003ci class=\"fa-solid fa-code\"\u003e\u003c/i\u003e' weight = 20 [menus.main.params] class = 'center' +++\r{ \"menus\": { \"main\": [ { \"params\": { \"class\": \"center\" }, \"parent\": \"Products\", \"pre\": \"\\u003ci class=\\\"fa-solid fa-code\\\"\\u003e\\u003c/i\\u003e\", \"weight\": 20 } ] }, \"title\": \"Software\" } Access the entry with site.Menus.main in your templates. See menu templates for details.\nDefine in site configuration To define entries for the “main” menu:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: Home pageRef: / weight: 10 - name: Products pageRef: /products weight: 20 - name: Services pageRef: /services weight: 30 [menus] [[menus.main]] name = 'Home' pageRef = '/' weight = 10 [[menus.main]] name = 'Products' pageRef = '/products' weight = 20 [[menus.main]] name = 'Services' pageRef = '/services' weight = 30 { \"menus\": { \"main\": [ { \"name\": \"Home\", \"pageRef\": \"/\", \"weight\": 10 }, { \"name\": \"Products\", \"pageRef\": \"/products\", \"weight\": 20 }, { \"name\": \"Services\", \"pageRef\": \"/services\", \"weight\": 30 } ] } } This creates a menu structure that you can access with site.Menus.main in your templates. See menu templates for details.\nTo define entries for the “footer” menu:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: footer: - name: Terms pageRef: /terms weight: 10 - name: Privacy pageRef: /privacy weight: 20 [menus] [[menus.footer]] name = 'Terms' pageRef = '/terms' weight = 10 [[menus.footer]] name = 'Privacy' pageRef = '/privacy' weight = 20 { \"menus\": { \"footer\": [ { \"name\": \"Terms\", \"pageRef\": \"/terms\", \"weight\": 10 }, { \"name\": \"Privacy\", \"pageRef\": \"/privacy\", \"weight\": 20 } ] } } This creates a menu structure that you can access with site.Menus.footer in your templates. See menu templates for details.\nThe configuration key in the examples above is menus. The menu (singular) configuration key is an alias for menus.\nProperties The properties available to entries defined in front matter are also available to entries defined in site configuration.\nEach menu entry defined in site configuration requires two or more properties:\nSpecify name and pageRef for internal links Specify name and url for external links pageRef (string) The file path of the target page, relative to the content directory. Omit language code and file extension. Required for internal links. Kind pageRef home / page /books/book-1 section /books taxonomy /tags term /tags/foo url (string) Required for external links. Example This nested menu demonstrates some of the available properties:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: Products pageRef: /products weight: 10 - name: Hardware pageRef: /products/hardware parent: Products weight: 1 - name: Software pageRef: /products/software parent: Products weight: 2 - name: Services pageRef: /services weight: 20 - name: Hugo params: rel: external pre: \u003ci class=\"fa fa-heart\"\u003e\u003c/i\u003e url: https://gohugo.io/ weight: 30 [menus] [[menus.main]] name = 'Products' pageRef = '/products' weight = 10 [[menus.main]] name = 'Hardware' pageRef = '/products/hardware' parent = 'Products' weight = 1 [[menus.main]] name = 'Software' pageRef = '/products/software' parent = 'Products' weight = 2 [[menus.main]] name = 'Services' pageRef = '/services' weight = 20 [[menus.main]] name = 'Hugo' pre = '\u003ci class=\"fa fa-heart\"\u003e\u003c/i\u003e' url = 'https://gohugo.io/' weight = 30 [menus.main.params] rel = 'external' { \"menus\": { \"main\": [ { \"name\": \"Products\", \"pageRef\": \"/products\", \"weight\": 10 }, { \"name\": \"Hardware\", \"pageRef\": \"/products/hardware\", \"parent\": \"Products\", \"weight\": 1 }, { \"name\": \"Software\", \"pageRef\": \"/products/software\", \"parent\": \"Products\", \"weight\": 2 }, { \"name\": \"Services\", \"pageRef\": \"/services\", \"weight\": 20 }, { \"name\": \"Hugo\", \"params\": { \"rel\": \"external\" }, \"pre\": \"\\u003ci class=\\\"fa fa-heart\\\"\\u003e\\u003c/i\\u003e\", \"url\": \"https://gohugo.io/\", \"weight\": 30 } ] } } This creates a menu structure that you can access with site.Menus.main in your templates. See menu templates for details.\nLocalize Hugo provides two methods to localize your menu entries. See multilingual.\nRender See menu templates.\n"},{"date":"0001-01-01","uri":"/templates/render-hooks/","title":"Markdown render hooks","content":"Note that this is only supported with the Goldmark renderer.\nYou can override certain parts of the default Markdown rendering to HTML by creating templates with base names render-{kind} in layouts/_default/_markup.\nYou can also create type/section specific hooks in layouts/[type/section]/_markup, e.g.: layouts/blog/_markup.\nThe hook kinds currently supported are:\nimage link heading codeblock\rNew in v0.93.0\rYou can define Output-Format- and language-specific templates if needed. Your layouts folder may look like this:\nlayouts/ └── _default/ └── _markup/ ├── render-codeblock-bash.html ├── render-codeblock.html ├── render-heading.html ├── render-image.html ├── render-image.rss.xml └── render-link.html Some use cases for the above:\nResolve link references using .GetPage. This would make links portable as you could translate ./my-post.md (and similar constructs that would work on GitHub) into /blog/2019/01/01/my-post/ etc. Add target=_blank to external links. Resolve and process images. Add header links. Render hooks for headings, links and images Context passed to render-link and render-image The render-link and render-image templates will receive this context:\nPage The Page being rendered. Destination The URL. Title The title attribute. Text The rendered (HTML) link text. PlainText The plain variant of the above. Context passed to render-heading The render-heading template will receive this context:\nPage The Page being rendered. Level The header level (1–6) Anchor An auto-generated html id unique to the header within the page Text The rendered (HTML) text. PlainText The plain variant of the above. Attributes (map) A map of attributes (e.g. id, class). Note that this will currently always be empty for links. The render-image templates will also receive:\nIsBlock New in v0.108.0\rReturns true if this is a standalone image and the configuration option markup.goldmark.parser.wrapStandAloneImageWithinParagraph is disabled. Ordinal New in v0.108.0\rZero-based ordinal for all the images in the current document. Link with title markdown example [Text](https://www.gohugo.io \"Title\") Here is a code example for how the render-link.html template could look:\nlayouts/_default/_markup/render-link.html\r\u003ca href=\"{{ .Destination | safeURL }}\"{{ with .Title }} title=\"{{ . }}\"{{ end }}{{ if strings.HasPrefix .Destination \"http\" }} target=\"_blank\" rel=\"noopener\"{{ end }}\u003e{{ .Text | safeHTML }}\u003c/a\u003e\rImage markdown example ![Text](https://gohugo.io/images/hugo-logo-wide.svg \"Title\") Here is a code example for how the render-image.html template could look:\nlayouts/_default/_markup/render-image.html\r\u003cp class=\"md__image\"\u003e \u003cimg src=\"{{ .Destination | safeURL }}\" alt=\"{{ .Text }}\" {{ with .Title }} title=\"{{ . }}\"{{ end }} /\u003e \u003c/p\u003e\rHeading link example Given this template file\nlayouts/_default/_markup/render-heading.html\r\u003ch{{ .Level }} id=\"{{ .Anchor }}\"\u003e{{ .Text | safeHTML }} \u003ca href=\"#{{ .Anchor | safeURL }}\"\u003e¶\u003c/a\u003e\u003c/h{{ .Level }}\u003e\rAnd this markdown\n### Section A The rendered html will be\n\u003ch3 id=\"section-a\"\u003eSection A \u003ca href=\"#section-a\"\u003e¶\u003c/a\u003e\u003c/h3\u003e Render hooks for code blocks New in v0.93.0\rYou can add a hook template for either all code blocks or for a specific type/language (bash in the example below):\nl └ a ─ y ─ o u _ └ t d ─ s e ─ f a _ └ └ u m ─ ─ l a ─ ─ t r k r r u e e p n n d d e e r r - - c c o o d d e e b b l l o o c c k k . - h b t a m s l h . h t m l The default behavior for these code blocks is to do Code Highlighting, but since you can pass attributes to these code blocks, they can be used for almost anything. One example would be the built-in GoAT Diagrams or this Mermaid Diagram Code Block Hook example.\nThe context (the “.”) you receive in a code block template contains:\nType (string) The type of code block. This will be the programming language, e.g. bash, when doing code highlighting. Attributes (map) Attributes passed in from Markdown (e.g. { attrName1=attrValue1 attrName2=\"attr Value 2\" }). Options (map) Chroma highlighting processing options. This will only be filled if Type is a known Chroma Lexer. Inner (string) The text between the code fences. Ordinal (integer) Zero-based ordinal for all code blocks in the current document. Page The owning Page. Position Useful in error logging as it prints the file name and position (linenumber, column), e.g. {{ errorf \"error in code block: %s\" .Position }}. "},{"date":"0001-01-01","uri":"/content-management/static-files/","title":"Static files","content":"By default, the static/ directory in the site project is used for all static files (e.g. stylesheets, JavaScript, images). The static files are served on the site root path (eg. if you have the file static/image.png you can access it using http://{server-url}/image.png, to include it in a document you can use ![Example image](/image.png) ).\nHugo can be configured to look into a different directory, or even multiple directories for such static files by configuring the staticDir parameter in the site configuration. All the files in all the static directories will form a union filesystem.\nThis union filesystem will be served from your site root. So a file \u003cSITE PROJECT\u003e/static/me.png will be accessible as \u003cMY_BASEURL\u003e/me.png.\nHere’s an example of setting staticDir and staticDir2 for a multi-language site:\nhugo.\ryaml\r \rtoml\r \rjson\r \rlanguages: en: baseURL: https://example.org/ languageName: English staticDir2: static_en title: In English weight: 2 \"no\": baseURL: https://example.no languageName: Norsk staticDir: - staticDir_override - static_no title: På norsk weight: 1 staticDir: - static1 - static2 staticDir = ['static1', 'static2'] [languages] [languages.en] baseURL = 'https://example.org/' languageName = 'English' staticDir2 = 'static_en' title = 'In English' weight = 2 [languages.no] baseURL = 'https://example.no' languageName = 'Norsk' staticDir = ['staticDir_override', 'static_no'] title = 'På norsk' weight = 1 { \"languages\": { \"en\": { \"baseURL\": \"https://example.org/\", \"languageName\": \"English\", \"staticDir2\": \"static_en\", \"title\": \"In English\", \"weight\": 2 }, \"no\": { \"baseURL\": \"https://example.no\", \"languageName\": \"Norsk\", \"staticDir\": [ \"staticDir_override\", \"static_no\" ], \"title\": \"På norsk\", \"weight\": 1 } }, \"staticDir\": [ \"static1\", \"static2\" ] } In the above, with no theme used:\nThe English site will get its static files as a union of “static1”, “static2” and “static_en”. On file duplicates, the right-most version will win. The Norwegian site will get its static files as a union of “staticDir_override” and “static_no”. Note 1 The 2 (can be a number between 0 and 10) in staticDir2 is added to tell Hugo that you want to add this directory to the global set of static directories defined using staticDir. Using staticDir on the language level would replace the global value (as can be seen in the Norwegian site case). Note 2 The example above is a multihost setup. In a regular setup, all the static directories will be available to all sites. "},{"date":"0001-01-01","uri":"/templates/output-formats/","title":"Custom output formats","content":"This page describes how to properly configure your site with the media types and output formats, as well as where to create your templates for your custom outputs.\nMedia types A media type (formerly known as a MIME type) is a two-part identifier for file formats and format contents transmitted on the internet.\nThis is the full set of built-in media types in Hugo:\nType\rsuffixes\rapplication/json\r[json]\rapplication/manifest+json\r[webmanifest]\rapplication/octet-stream\r[webmanifest]\rapplication/pdf\r[pdf]\rapplication/rss+xml\r[xml rss]\rapplication/toml\r[toml]\rapplication/wasm\r[wasm]\rapplication/xml\r[xml]\rapplication/yaml\r[yaml yml]\rfont/otf\r[otf]\rfont/ttf\r[ttf]\rimage/bmp\r[bmp]\rimage/gif\r[gif]\rimage/jpeg\r[jpg jpeg jpe jif jfif]\rimage/png\r[png]\rimage/svg+xml\r[svg]\rimage/tiff\r[tif tiff]\rimage/webp\r[webp]\rtext/calendar\r[ics]\rtext/css\r[css]\rtext/csv\r[csv]\rtext/html\r[html]\rtext/javascript\r[js jsm mjs]\rtext/jsx\r[jsx]\rtext/markdown\r[md markdown]\rtext/plain\r[txt]\rtext/tsx\r[tsx]\rtext/typescript\r[ts]\rtext/x-sass\r[sass]\rtext/x-scss\r[scss]\rvideo/3gpp\r[3gpp 3gp]\rvideo/mp4\r[mp4]\rvideo/mpeg\r[mpg mpeg]\rvideo/ogg\r[ogv]\rvideo/webm\r[webm]\rvideo/x-msvideo\r[avi]\rNote:\nIt is possible to add custom media types or change the defaults; e.g., if you want to change the suffix for text/html to asp. Suffixes are the values that will be used for URLs and file names for that media type in Hugo. The Type is the identifier that must be used when defining new/custom Output Formats (see below). The full set of media types will be registered in Hugo’s built-in development server to make sure they are recognized by the browser. To add or modify a media type, define it in a mediaTypes section in your site configuration, either for all sites or for a given language.\nhugo.\ryaml\r \rtoml\r \rjson\r \rmediaTypes: text/enriched: suffixes: - enr text/html: suffixes: - asp [mediaTypes] [mediaTypes.'text/enriched'] suffixes = ['enr'] [mediaTypes.'text/html'] suffixes = ['asp'] { \"mediaTypes\": { \"text/enriched\": { \"suffixes\": [ \"enr\" ] }, \"text/html\": { \"suffixes\": [ \"asp\" ] } } } The above example adds one new media type, text/enriched, and changes the suffix for the built-in text/html media type.\nNote: these media types are configured for your output formats. If you want to redefine one of Hugo’s default output formats (e.g. HTML), you also need to redefine the media type. So, if you want to change the suffix of the HTML output format from html (default) to htm:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmediaTypes: text/html: suffixes: - htm outputFormats: html: mediaType: text/html [mediaTypes] [mediaTypes.'text/html'] suffixes = ['htm'] [outputFormats] [outputFormats.html] mediaType = 'text/html' { \"mediaTypes\": { \"text/html\": { \"suffixes\": [ \"htm\" ] } }, \"outputFormats\": { \"html\": { \"mediaType\": \"text/html\" } } } For the above to work, you also need to add an outputs definition in your site configuration.\nOutput format definitions Given a media type and some additional configuration, you get an Output Format.\nThis is the full set of Hugo’s built-in output formats:\nname\rmediaType\rpath\rbaseName\rrel\rprotocol\risPlainText\risHTML\rnoUgly\rpermalinkable\ramp\rtext/html\ramp\rindex\ramphtml\rfalse\rtrue\rfalse\rtrue\rcalendar\rtext/calendar\rindex\ralternate\rwebcal://\rtrue\rfalse\rfalse\rfalse\rcss\rtext/css\rstyles\rstylesheet\rtrue\rfalse\rfalse\rfalse\rcsv\rtext/csv\rindex\ralternate\rtrue\rfalse\rfalse\rfalse\rhtml\rtext/html\rindex\rcanonical\rfalse\rtrue\rfalse\rtrue\rjson\rapplication/json\rindex\ralternate\rtrue\rfalse\rfalse\rfalse\rmarkdown\rtext/markdown\rindex\ralternate\rtrue\rfalse\rfalse\rfalse\rrobots\rtext/plain\rrobots\ralternate\rtrue\rfalse\rfalse\rfalse\rrss\rapplication/rss+xml\rindex\ralternate\rfalse\rfalse\rtrue\rfalse\rsitemap\rapplication/xml\rsitemap\rsitemap\rfalse\rfalse\rtrue\rfalse\rwebappmanifest\rapplication/manifest+json\rmanifest\rmanifest\rtrue\rfalse\rfalse\rfalse\rA page can be output in as many output formats as you want, and you can have an infinite amount of output formats defined as long as they resolve to a unique path on the file system. In the above table, the best example of this is amp vs. html. amp has the value amp for path so it doesn’t overwrite the html version; e.g. we can now have both /index.html and /amp/index.html. The mediaType must match a defined media type. You can define new output formats or redefine built-in output formats; e.g., if you want to put amp pages in a different path. To add or modify an output format, define it in an outputFormats section in your site’s configuration file, either for all sites or for a given language.\nhugo.\ryaml\r \rtoml\r \rjson\r \routputFormats: MyEnrichedFormat: baseName: myindex isPlainText: true mediaType: text/enriched protocol: bep:// [outputFormats] [outputFormats.MyEnrichedFormat] baseName = 'myindex' isPlainText = true mediaType = 'text/enriched' protocol = 'bep://' { \"outputFormats\": { \"MyEnrichedFormat\": { \"baseName\": \"myindex\", \"isPlainText\": true, \"mediaType\": \"text/enriched\", \"protocol\": \"bep://\" } } } The above example is fictional, but if used for the homepage on a site with baseURL https://example.org, it will produce a plain text homepage with the URL bep://example.org/myindex.enr.\nConfigure output formats The following is the full list of configuration options for output formats and their default values:\nmediaType this must match the Type of a defined media type. path sub path to save the output files. baseName the base file name for the list file names (homepage, etc.). Default: index. rel can be used to create rel values in link tags. Default: alternate. protocol will replace the “http://” or “https://” in your baseURL for this output format. isPlainText use Go’s plain text templates parser for the templates. Default: false. isHTML used in situations only relevant for HTML-type formats; e.g., page aliases. Default: false. noUgly used to turn off ugly URLs If uglyURLs is set to true in your site. Default: false. notAlternative enable if it doesn’t make sense to include this format in an AlternativeOutputFormats format listing on Page (e.g., with CSS). Note that we use the term alternative and not alternate here, as it does not necessarily replace the other format. Default: false. permalinkable make .Permalink and .RelPermalink return the rendering Output Format rather than main (see below). This is enabled by default for HTML and AMP. Default: false. weight Setting this to a non-zero value will be used as the first sort criteria. Output formats for pages A Page in Hugo can be rendered to multiple output formats on the file system.\nDefault output formats Every Page has a Kind attribute, and the default Output Formats are set based on that.\nhugo.\ryaml\r \rtoml\r \rjson\r \routputs: home: - html - rss page: - html rss: - rss section: - html - rss taxonomy: - html - rss term: - html - rss [outputs] home = ['html', 'rss'] page = ['html'] rss = ['rss'] section = ['html', 'rss'] taxonomy = ['html', 'rss'] term = ['html', 'rss'] { \"outputs\": { \"home\": [ \"html\", \"rss\" ], \"page\": [ \"html\" ], \"rss\": [ \"rss\" ], \"section\": [ \"html\", \"rss\" ], \"taxonomy\": [ \"html\", \"rss\" ], \"term\": [ \"html\", \"rss\" ] } } Customizing output formats This can be changed by defining an outputs list of output formats in either the Page front matter or in the site configuration (either for all sites or per language).\nExample from site configuration file:\nhugo.\ryaml\r \rtoml\r \rjson\r \routputs: home: - html - amp - rss page: - html [outputs] home = ['html', 'amp', 'rss'] page = ['html'] { \"outputs\": { \"home\": [ \"html\", \"amp\", \"rss\" ], \"page\": [ \"html\" ] } } Note that in the above examples, the output formats for section, taxonomy and term will stay at their default value ['html','rss'].\nThe outputs definition is per page Kind. The names (e.g. html, amp) must match the name of a defined output format, and can be overridden per page in front matter. The following is an example of front matter in a content file that defines output formats for the rendered Page:\ncontent/example.md\ryaml\r \rtoml\r \rjson\r \r--- outputs: - html - amp - json title: Example ---\r+++ outputs = ['html', 'amp', 'json'] title = 'Example' +++\r{ \"outputs\": [ \"html\", \"amp\", \"json\" ], \"title\": \"Example\" } List output formats Each Page has both an .OutputFormats (all formats, including the current) and an .AlternativeOutputFormats variable, the latter of which is useful for creating a link rel list in your site’s \u003chead\u003e:\n{{ range .AlternativeOutputFormats -}} \u003clink rel=\"{{ .Rel }}\" type=\"{{ .MediaType.Type }}\" href=\"{{ .Permalink | safeURL }}\"\u003e {{ end }} Link to output formats .Permalink and .RelPermalink on Page will return the first output format defined for that page (usually HTML if nothing else is defined). This is regardless of the template file they are being called from.\nfrom single.json.json:\n{{ .RelPermalink }} → /that-page/ {{ with .OutputFormats.Get \"json\" }} {{ .RelPermalink }} → /that-page/index.json {{ end }} In order for them to return the output format of the current template file instead, the given output format should have its permalinkable setting set to true.\nSame template file as above with json output format’s permalinkable set to true:\n{{ .RelPermalink }} → /that-page/index.json {{ with .OutputFormats.Get \"html\" }} {{ .RelPermalink }} → /that-page/ {{ end }} From content files, you can use the ref or relref shortcodes:\n[Neat]({{\u003c ref \"blog/neat.md\" \"amp\" \u003e}}) [Who]({{\u003c relref \"about.md#who\" \"amp\" \u003e}}) Templates for your output formats Each output format requires a corresponding template conforming to the template lookup order. Hugo considers both output format and suffix when selecting a template.\nFor example, to generate a JSON file for the home page, the template with highest specificity is layouts/index.json.json.\nHugo will now also detect the media type and output format of partials, if possible, and use that information to decide if the partial should be parsed as a plain text template or not.\nHugo will look for the name given, so you can name it whatever you want. But if you want it treated as plain text, you should use the file suffix and, if needed, the name of the Output Format. The pattern is as follows:\n[partial name].[OutputFormat].[suffix] The partial below is a plain text template . The output format is csv, and since this is the only output format with the suffix csv, we don’t need to include the output format name):\n{{ partial \"mytextpartial.csv\" . }} "},{"date":"0001-01-01","uri":"/content-management/toc/","title":"Table of contents","content":"\rPreviously, there was no out-of-the-box way to specify which heading levels you want the TOC to render. See the related GitHub discussion (#1778). As such, the resulting \u003cnav id=\"TableOfContents\"\u003e\u003cul\u003e\u003c/ul\u003e\u003c/nav\u003e was going to start at \u003ch1\u003e when pulling from {{ .Content }}.\nHugo v0.60.0 made a switch to Goldmark as the default library for Markdown which has improved and configurable implementation of TOC. Take a look at how to configure TOC for Goldmark renderer.\nUsage Create your Markdown the way you normally would with the appropriate headings. Here is some example content:\n\u003c!-- Your front matter up here --\u003e ## Introduction One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. ## My Heading He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches into stiff sections. The bedding was hardly able to cover it and seemed ready to slide off any moment. ### My Subheading A collection of textile samples lay spread out on the table - Samsa was a traveling salesman - and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. Gregor then turned to look out the window at the dull weather. Drops Hugo will take this Markdown and create a table of contents from ## Introduction, ## My Heading, and ### My Subheading and then store it in the page variable.TableOfContents.\nThe built-in .TableOfContents variables outputs a \u003cnav id=\"TableOfContents\"\u003e element with a child \u003cul\u003e, whose child \u003cli\u003e elements begin with appropriate HTML headings. See the available settings to configure what heading levels you want to include in TOC.\nTemplate example: basic TOC The following is an example of a very basic single page template:\nlayout/_default/single.html\r{{ define \"main\" }} \u003cmain\u003e \u003carticle\u003e \u003cheader\u003e \u003ch1\u003e{{ .Title }}\u003c/h1\u003e \u003c/header\u003e {{ .Content }} \u003c/article\u003e \u003caside\u003e {{ .TableOfContents }} \u003c/aside\u003e \u003c/main\u003e {{ end }}\rTemplate example: TOC partial The following is a partial template that adds slightly more logic for page-level control over your table of contents. It assumes you are using a toc field in your content’s front matter that, unless specifically set to false, will add a TOC to any page with a .WordCount (see Page Variables) greater than 400. This example also demonstrates how to use conditionals in your templating:\nlayouts/partials/toc.html\r{{ if and (gt .WordCount 400 ) (.Params.toc) }} \u003caside\u003e \u003cheader\u003e \u003ch2\u003e{{ .Title }}\u003c/h2\u003e \u003c/header\u003e {{ .TableOfContents }} \u003c/aside\u003e {{ end }}\rWith the preceding example, even pages with \u003e 400 words and toc not set to false will not render a table of contents if there are no headings in the page for the {{ .TableOfContents }} variable to pull from.\nUsage with AsciiDoc Hugo supports table of contents with AsciiDoc content format.\nIn the header of your content file, specify the AsciiDoc TOC directives necessary to ensure that the table of contents is generated. Hugo will use the generated TOC to populate the page variable .TableOfContents in the same way as described for Markdown. See example below:\n// \u003c!-- Your front matter up here --\u003e\r:toc:\r// Set toclevels to be at least your hugo [markup.tableOfContents.endLevel] configuration key\r:toclevels: 4\r== Introduction\rOne morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin.\r== My Heading\rHe lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches into stiff sections. The bedding was hardly able to cover it and seemed ready to slide off any moment.\r=== My Subheading\rA collection of textile samples lay spread out on the table - Samsa was a traveling salesman - and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. Gregor then turned to look out the window at the dull weather. Drops Hugo will take this AsciiDoc and create a table of contents store it in the page variable .TableOfContents, in the same as described for Markdown.\n"},{"date":"0001-01-01","uri":"/templates/404/","title":"Custom 404 page","content":"When using Hugo with GitHub Pages, you can provide your own template for a custom 404 error page by creating a 404.html template file in the root of your layouts folder. When Hugo generates your site, the 404.html file will be placed in the root.\n404 pages will have all the regular page variables available to use in the templates.\nIn addition to the standard page variables, the 404 page has access to all site content accessible from .Pages.\n▾ layouts/ 404.html 404.html This is a basic example of a 404.html template:\nlayouts/404.html\r{{ define \"main\" }} \u003cmain id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e\u003ca href=\"{{ \"\" | relURL }}\"\u003eGo Home\u003c/a\u003e\u003c/h1\u003e \u003c/div\u003e \u003c/main\u003e {{ end }}\rAutomatic loading Your 404.html file can be set to load automatically when a visitor enters a mistaken URL path, dependent upon the web serving environment you are using. For example:\nGitHub Pages, GitLab Pages and Cloudflare Pages. The 404 page is automatic. Apache. You can specify ErrorDocument 404 /404.html in an .htaccess file in the root of your site. Nginx. You might specify error_page 404 /404.html; in your nginx.conf file. Details here. Amazon AWS S3. When setting a bucket up for static web serving, you can specify the error file from within the S3 GUI. Amazon CloudFront. You can specify the page in the Error Pages section in the CloudFront Console. Details here Caddy Server. Use the handle_errors directive to specify error pages for one or more status codes. Details here Netlify. Add /* /404.html 404 to content/_redirects. Details Here Azure Static Web App. set responseOverrides.404.rewrite and responseOverrides.404.statusCode in configfile staticwebapp.config.json. Details here Azure Storage as Static Web Site Hosting. You can specify the Error document path in the Static website configuration page of the Azure portal. Details here. DigitalOcean App Platform. You can specify error_document in your app specification file or use control panel to set up error document. Details here. Firebase Hosting: /404.html automatically gets used as the 404 page. "},{"date":"0001-01-01","uri":"/content-management/comments/","title":"Comments","content":"Hugo ships with support for Disqus, a third-party service that provides comment and community capabilities to websites via JavaScript.\nYour theme may already support Disqus, but if not, it is easy to add to your templates via Hugo’s built-in Disqus partial.\nAdd Disqus Hugo comes with all the code you need to load Disqus into your templates. Before adding Disqus to your site, you’ll need to set up an account.\nConfigure Disqus Disqus comments require you set a single value in your site’s configuration file like so:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: disqus: shortname: your-disqus-shortname [services] [services.disqus] shortname = 'your-disqus-shortname' { \"services\": { \"disqus\": { \"shortname\": \"your-disqus-shortname\" } } } For many websites, this is enough configuration. However, you also have the option to set the following in the front matter of a single content file:\ndisqus_identifier disqus_title disqus_url Render Hugo’s built-in Disqus partial template Disqus has its own internal template available, to render it add the following code where you want comments to appear:\n{{ template \"_internal/disqus.html\" . }} Alternatives These are some alternatives to Disqus:\nCactus Comments (Open Source, Matrix appservice, Docker install) Comentario (Open Source, self-hosted, Go/Angular, run locally, in Docker or Kubernetes) Commento (Open Source, available as a service, local install, or docker image) Giscus (Open source, comments system powered by GitHub Discussions) Graph Comment Hyvor Talk (Available as a service) IntenseDebate Isso (Self-hosted, Python) (tutorial) Muut Remark42 (Open source, Golang, Easy to run docker) ReplyBox Staticman Talkyard (Open source, \u0026 serverless hosting) Utterances (Open source, GitHub comments widget built on GitHub issues) "},{"date":"0001-01-01","uri":"/content-management/multilingual/","title":"Multilingual mode","content":"You should define the available languages in a languages section in your site configuration.\nAlso See Hugo Multilingual Part 1: Content translation.\nConfigure languages This is the default language configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rlanguages: en: disabled: false languageCode: \"\" languageDirection: \"\" languageName: \"\" title: \"\" weight: 0 [languages] [languages.en] disabled = false languageCode = '' languageDirection = '' languageName = '' title = '' weight = 0 { \"languages\": { \"en\": { \"disabled\": false, \"languageCode\": \"\", \"languageDirection\": \"\", \"languageName\": \"\", \"title\": \"\", \"weight\": 0 } } } This is an example of a site configuration for a multilingual project. Any key not defined in a languages object will fall back to the global value in the root of your site configuration.\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: de defaultContentLanguageInSubdir: true languages: de: contentDir: content/de disabled: false languageCode: de-DE languageDirection: ltr languageName: Deutsch params: subtitle: Referenz, Tutorials und Erklärungen title: Projekt Dokumentation weight: 1 en: contentDir: content/en disabled: false languageCode: en-US languageDirection: ltr languageName: English params: subtitle: Reference, Tutorials, and Explanations title: Project Documentation weight: 2 defaultContentLanguage = 'de' defaultContentLanguageInSubdir = true [languages] [languages.de] contentDir = 'content/de' disabled = false languageCode = 'de-DE' languageDirection = 'ltr' languageName = 'Deutsch' title = 'Projekt Dokumentation' weight = 1 [languages.de.params] subtitle = 'Referenz, Tutorials und Erklärungen' [languages.en] contentDir = 'content/en' disabled = false languageCode = 'en-US' languageDirection = 'ltr' languageName = 'English' title = 'Project Documentation' weight = 2 [languages.en.params] subtitle = 'Reference, Tutorials, and Explanations' { \"defaultContentLanguage\": \"de\", \"defaultContentLanguageInSubdir\": true, \"languages\": { \"de\": { \"contentDir\": \"content/de\", \"disabled\": false, \"languageCode\": \"de-DE\", \"languageDirection\": \"ltr\", \"languageName\": \"Deutsch\", \"params\": { \"subtitle\": \"Referenz, Tutorials und Erklärungen\" }, \"title\": \"Projekt Dokumentation\", \"weight\": 1 }, \"en\": { \"contentDir\": \"content/en\", \"disabled\": false, \"languageCode\": \"en-US\", \"languageDirection\": \"ltr\", \"languageName\": \"English\", \"params\": { \"subtitle\": \"Reference, Tutorials, and Explanations\" }, \"title\": \"Project Documentation\", \"weight\": 2 } } } defaultContentLanguage (string) The project’s default language tag as defined by RFC 5646. Must be lower case, and must match one of the defined language keys. Default is en. Examples: en en-gb pt-br defaultContentLanguageInSubdir (bool) If true, Hugo renders the default language site in a subdirectory matching the defaultContentLanguage. Default is false. contentDir (string) The content directory for this language. Omit if translating by file name. disabled (bool) If true, Hugo will not render content for this language. Default is false. languageCode (string) The language tag as defined by RFC 5646. This value may include upper and lower case characters, hyphens, or underscores, and does not affect localization or URLs. Hugo uses this value to populate the language element in the built-in RSS template, and the lang attribute of the html element in the built-in alias template. Examples: en en-GB pt-BR languageDirection (string) The language direction, either left-to-right (ltr) or right-to-left (rtl). Use this value in your templates with the global dir HTML attribute. languageName (string) The language name, typically used when rendering a language switcher. title (string) The language title. When set, this overrides the site title for this language. weight (int) The language weight. When set to a non-zero value, this is the primary sort criteria for this language. Changes in Hugo 0.112.0 New in v0.112.0\rIn Hugo v0.112.0 we consolidated all configuration options, and improved how the languages and their parameters are merged with the main configuration. But while testing this on Hugo sites out there, we received some error reports and reverted some of the changes in favor of deprecation warnings:\nsite.Language.Params is deprecated. Use site.Params directly. Adding custom parameters to the top level language configuration is deprecated. Define custom parameters within languages.xx.params. See color in the example below. hugo.\ryaml\r \rtoml\r \rjson\r \rlanguageCode: en-us languages: en: params: color: blue sv: languageCode: sv title: Min blogg title: My blog languageCode = 'en-us' title = 'My blog' [languages] [languages.en] [languages.en.params] color = 'blue' [languages.sv] languageCode = 'sv' title = 'Min blogg' { \"languageCode\": \"en-us\", \"languages\": { \"en\": { \"params\": { \"color\": \"blue\" } }, \"sv\": { \"languageCode\": \"sv\", \"title\": \"Min blogg\" } }, \"title\": \"My blog\" } In the example above, all settings except color below params map to predefined configuration options in Hugo for the site and its language, and should be accessed via the documented accessors:\n{{ site.Title }} {{ site.LanguageCode }} {{ site.Params.color }} Disable a language To disable a language within a languages object in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rlanguages: es: disabled: true [languages] [languages.es] disabled = true { \"languages\": { \"es\": { \"disabled\": true } } } To disable one or more languages in the root of your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdisableLanguages: - es - fr disableLanguages = ['es', 'fr'] { \"disableLanguages\": [ \"es\", \"fr\" ] } To disable one or more languages using an environment variable:\nHUGO_DISABLELANGUAGES=\"es fr\" hugo Note that you cannot disable the default content language.\nConfigure multilingual multihost From Hugo 0.31 we support multiple languages in a multihost configuration. See this issue for details.\nThis means that you can now configure a baseURL per language:\nIf a baseURL is set on the language level, then all languages must have one and they must all be different.\nExample:\nhugo.\ryaml\r \rtoml\r \rjson\r \rlanguages: en: baseURL: https://example.org/ languageName: English title: In English weight: 2 fr: baseURL: https://example.fr languageName: Français title: En Français weight: 1 [languages] [languages.en] baseURL = 'https://example.org/' languageName = 'English' title = 'In English' weight = 2 [languages.fr] baseURL = 'https://example.fr' languageName = 'Français' title = 'En Français' weight = 1 { \"languages\": { \"en\": { \"baseURL\": \"https://example.org/\", \"languageName\": \"English\", \"title\": \"In English\", \"weight\": 2 }, \"fr\": { \"baseURL\": \"https://example.fr\", \"languageName\": \"Français\", \"title\": \"En Français\", \"weight\": 1 } } } With the above, the two sites will be generated into public with their own root:\npublic ├── en └── fr All URLs (i.e .Permalink etc.) will be generated from that root. So the English home page above will have its .Permalink set to https://example.org/.\nWhen you run hugo server we will start multiple HTTP servers. You will typically see something like this in the console:\nWeb Server is available at 127.0.0.1:1313 (bind address 127.0.0.1) fr Web Server is available at 127.0.0.1:1314 (bind address 127.0.0.1) en Press Ctrl+C to stop Live reload and --navigateToChanged between the servers work as expected.\nTranslate your content There are two ways to manage your content translations. Both ensure each page is assigned a language and is linked to its counterpart translations.\nTranslation by file name Considering the following example:\n/content/about.en.md /content/about.fr.md The first file is assigned the English language and is linked to the second. The second file is assigned the French language and is linked to the first.\nTheir language is assigned according to the language code added as a suffix to the file name.\nBy having the same path and base file name, the content pieces are linked together as translated pages.\nIf a file has no language code, it will be assigned the default language.\nTranslation by content directory This system uses different content directories for each of the languages. Each language’s content directory is set using the contentDir parameter.\nhugo.\ryaml\r \rtoml\r \rjson\r \rlanguages: en: contentDir: content/english languageName: English weight: 10 fr: contentDir: content/french languageName: Français weight: 20 [languages] [languages.en] contentDir = 'content/english' languageName = 'English' weight = 10 [languages.fr] contentDir = 'content/french' languageName = 'Français' weight = 20 { \"languages\": { \"en\": { \"contentDir\": \"content/english\", \"languageName\": \"English\", \"weight\": 10 }, \"fr\": { \"contentDir\": \"content/french\", \"languageName\": \"Français\", \"weight\": 20 } } } The value of contentDir can be any valid path – even absolute path references. The only restriction is that the content directories cannot overlap.\nConsidering the following example in conjunction with the configuration above:\n/content/english/about.md /content/french/about.md The first file is assigned the English language and is linked to the second. The second file is assigned the French language and is linked to the first.\nTheir language is assigned according to the content directory they are placed in.\nBy having the same path and basename (relative to their language content directory), the content pieces are linked together as translated pages.\nBypassing default linking Any pages sharing the same translationKey set in front matter will be linked as translated pages regardless of basename or location.\nConsidering the following example:\n/content/about-us.en.md /content/om.nn.md /content/presentation/a-propos.fr.md yaml\r \rtoml\r \rjson\r \rtranslationKey: about translationKey = 'about' { \"translationKey\": \"about\" } By setting the translationKey front matter parameter to about in all three pages, they will be linked as translated pages.\nLocalizing permalinks Because paths and file names are used to handle linking, all translated pages will share the same URL (apart from the language subdirectory).\nTo localize URLs:\nFor a regular page, set either slug or url in front matter For a section page, set url in front matter For example, a French translation can have its own localized slug.\ncontent/about.fr.md\ryaml\r \rtoml\r \rjson\r \r--- slug: a-propos title: A Propos ---\r+++ slug = 'a-propos' title = 'A Propos' +++\r{ \"slug\": \"a-propos\", \"title\": \"A Propos\" } At render, Hugo will build both /about/ and /fr/a-propos/ without affecting the translation link.\nPage bundles To avoid the burden of having to duplicate files, each Page Bundle inherits the resources of its linked translated pages’ bundles except for the content files (Markdown files, HTML files etc…).\nTherefore, from within a template, the page will have access to the files from all linked pages’ bundles.\nIf, across the linked bundles, two or more files share the same basename, only one will be included and chosen as follows:\nFile from current language bundle, if present. First file found across bundles by order of language Weight. Page Bundle resources follow the same language assignment logic as content files, both by file name (image.jpg, image.fr.jpg) and by directory (english/about/header.jpg, french/about/header.jpg).\nReference translated content To create a list of links to translated content, use a template similar to the following:\nlayouts/partials/i18nlist.html\r{{ if .IsTranslated }} \u003ch4\u003e{{ i18n \"translations\" }}\u003c/h4\u003e \u003cul\u003e {{ range .Translations }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Lang }}: {{ .LinkTitle }}{{ if .IsPage }} ({{ i18n \"wordCount\" . }}){{ end }}\u003c/a\u003e \u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }}\rThe above can be put in a partial (i.e., inside layouts/partials/) and included in any template, whether a single content page or the homepage. It will not print anything if there are no translations for a given page.\nThe above also uses the i18n function described in the next section.\nList all available languages .AllTranslations on a Page can be used to list all translations, including the page itself. On the home page it can be used to build a language navigator:\nlayouts/partials/allLanguages.html\r\u003cul\u003e {{ range $.Site.Home.AllTranslations }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Language.LanguageName }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e\rTranslation of strings Hugo uses go-i18n to support string translations. See the project’s source repository to find tools that will help you manage your translation workflows.\nTranslations are collected from the themes/\u003cTHEME\u003e/i18n/ folder (built into the theme), as well as translations present in i18n/ at the root of your project. In the i18n, the translations will be merged and take precedence over what is in the theme folder. Language files should be named according to RFC 5646 with names such as en-US.toml, fr.toml, etc.\nArtificial languages with private use subtags as defined in RFC 5646 § 2.2.7 are also supported. You may omit the art-x- prefix for brevity. For example:\nart-x-hugolang hugolang Private use subtags must not exceed 8 alphanumeric characters.\nQuery basic translation From within your templates, use the i18n function like this:\n{{ i18n \"home\" }} The function will search for the \"home\" id:\ni18n/en-US.\ryaml\r \rtoml\r \rjson\r \rhome: other: Home [home] other = 'Home' { \"home\": { \"other\": \"Home\" } } The result will be\nHome Query a flexible translation with variables Often you will want to use the page variables in the translation strings. To do so, pass the . context when calling i18n:\n{{ i18n \"wordCount\" . }} The function will pass the . context to the \"wordCount\" id:\ni18n/en-US.\ryaml\r \rtoml\r \rjson\r \rwordCount: other: This article has {{ .WordCount }} words. [wordCount] other = 'This article has {{ .WordCount }} words.' { \"wordCount\": { \"other\": \"This article has {{ .WordCount }} words.\" } } Assume .WordCount in the context has value is 101. The result will be:\nThis article has 101 words. Query a singular/plural translation To enable pluralization when translating, pass a map with a numeric .Count property to the i18n function. The example below uses .ReadingTime variable which has a built-in .Count property.\n{{ i18n \"readingTime\" .ReadingTime }} The function will read .Count from .ReadingTime and evaluate whether the number is singular (one) or plural (other). After that, it will pass to readingTime id in i18n/en-US.toml file:\ni18n/en-US.\ryaml\r \rtoml\r \rjson\r \rreadingTime: one: One minute to read other: '{{ .Count }} minutes to read' [readingTime] one = 'One minute to read' other = '{{ .Count }} minutes to read' { \"readingTime\": { \"one\": \"One minute to read\", \"other\": \"{{ .Count }} minutes to read\" } } Assuming .ReadingTime.Count in the context has value is 525600. The result will be:\n525600 minutes to read If .ReadingTime.Count in the context has value is 1. The result is:\nOne minute to read In case you need to pass a custom data: ((dict \"Count\" numeric_value_only) is minimum requirement)\n{{ i18n \"readingTime\" (dict \"Count\" 25 \"FirstArgument\" true \"SecondArgument\" false \"Etc\" \"so on, so far\") }} Localization The following localization examples assume your site’s primary language is English, with translations to French and German.\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: en languages: de: contentDir: content/de languageName: Deutsch weight: 3 en: contentDir: content/en languageName: English weight: 1 fr: contentDir: content/fr languageName: Français weight: 2 defaultContentLanguage = 'en' [languages] [languages.de] contentDir = 'content/de' languageName = 'Deutsch' weight = 3 [languages.en] contentDir = 'content/en' languageName = 'English' weight = 1 [languages.fr] contentDir = 'content/fr' languageName = 'Français' weight = 2 { \"defaultContentLanguage\": \"en\", \"languages\": { \"de\": { \"contentDir\": \"content/de\", \"languageName\": \"Deutsch\", \"weight\": 3 }, \"en\": { \"contentDir\": \"content/en\", \"languageName\": \"English\", \"weight\": 1 }, \"fr\": { \"contentDir\": \"content/fr\", \"languageName\": \"Français\", \"weight\": 2 } } } Dates With this front matter:\nyaml\r \rtoml\r \rjson\r \rdate: 2021-11-03T12:34:56+01:00 date = 2021-11-03T12:34:56+01:00 { \"date\": \"2021-11-03T12:34:56+01:00\" } And this template code:\n{{ .Date | time.Format \":date_full\" }} The rendered page displays:\nLanguage Value English Wednesday, November 3, 2021 Français mercredi 3 novembre 2021 Deutsch Mittwoch, 3. November 2021 See time.Format for details.\nCurrency With this template code:\n{{ 512.5032 | lang.FormatCurrency 2 \"USD\" }} The rendered page displays:\nLanguage Value English $512.50 Français 512,50 $US Deutsch 512,50 $ See lang.FormatCurrency and lang.FormatAccounting for details.\nNumbers With this template code:\n{{ 512.5032 | lang.FormatNumber 2 }} The rendered page displays:\nLanguage Value English 512.50 Français 512,50 Deutsch 512,50 See lang.FormatNumber and lang.FormatNumberCustom for details.\nPercentages With this template code:\n{{ 512.5032 | lang.FormatPercent 2 }} The rendered page displays:\nLanguage Value English 512.50% Français 512,50 % Deutsch 512,50 % See lang.FormatPercent for details.\nMenus Localization of menu entries depends on how you define them:\nWhen you define menu entries automatically using the section pages menu, you must use translation tables to localize each entry. When you define menu entries in front matter, they are already localized based on the front matter itself. If the front matter values are insufficient, use translation tables to localize each entry. When you define menu entries in site configuration, you must create language-specific menu entries under each language key. If the names of the menu entries are insufficient, use translation tables to localize each entry. Create language-specific menu entries Method 1 – Use a single configuration file For a simple menu with a small number of entries, use a single configuration file. For example:\nhugo.\ryaml\r \rtoml\r \rjson\r \rlanguages: de: languageCode: de-DE languageName: Deutsch menus: main: - name: Produkte pageRef: /products weight: 10 - name: Leistungen pageRef: /services weight: 20 weight: 1 en: languageCode: en-US languageName: English menus: main: - name: Products pageRef: /products weight: 10 - name: Services pageRef: /services weight: 20 weight: 2 [languages] [languages.de] languageCode = 'de-DE' languageName = 'Deutsch' weight = 1 [languages.de.menus] [[languages.de.menus.main]] name = 'Produkte' pageRef = '/products' weight = 10 [[languages.de.menus.main]] name = 'Leistungen' pageRef = '/services' weight = 20 [languages.en] languageCode = 'en-US' languageName = 'English' weight = 2 [languages.en.menus] [[languages.en.menus.main]] name = 'Products' pageRef = '/products' weight = 10 [[languages.en.menus.main]] name = 'Services' pageRef = '/services' weight = 20 { \"languages\": { \"de\": { \"languageCode\": \"de-DE\", \"languageName\": \"Deutsch\", \"menus\": { \"main\": [ { \"name\": \"Produkte\", \"pageRef\": \"/products\", \"weight\": 10 }, { \"name\": \"Leistungen\", \"pageRef\": \"/services\", \"weight\": 20 } ] }, \"weight\": 1 }, \"en\": { \"languageCode\": \"en-US\", \"languageName\": \"English\", \"menus\": { \"main\": [ { \"name\": \"Products\", \"pageRef\": \"/products\", \"weight\": 10 }, { \"name\": \"Services\", \"pageRef\": \"/services\", \"weight\": 20 } ] }, \"weight\": 2 } } } Method 2 – Use a configuration directory With a more complex menu structure, create a configuration directory and split the menu entries into multiple files, one file per language. For example:\nconfig/ └── _default/ ├── menus.de.toml ├── menus.en.toml └── hugo.toml config/_default/menus.de.\ryaml\r \rtoml\r \rjson\r \rmain: - name: Produkte pageRef: /products weight: 10 - name: Leistungen pageRef: /services weight: 20 [[main]] name = 'Produkte' pageRef = '/products' weight = 10 [[main]] name = 'Leistungen' pageRef = '/services' weight = 20 { \"main\": [ { \"name\": \"Produkte\", \"pageRef\": \"/products\", \"weight\": 10 }, { \"name\": \"Leistungen\", \"pageRef\": \"/services\", \"weight\": 20 } ] } config/_default/menus.en.\ryaml\r \rtoml\r \rjson\r \rmain: - name: Products pageRef: /products weight: 10 - name: Services pageRef: /services weight: 20 [[main]] name = 'Products' pageRef = '/products' weight = 10 [[main]] name = 'Services' pageRef = '/services' weight = 20 { \"main\": [ { \"name\": \"Products\", \"pageRef\": \"/products\", \"weight\": 10 }, { \"name\": \"Services\", \"pageRef\": \"/services\", \"weight\": 20 } ] } Use translation tables When rendering the text that appears in menu each entry, the example menu template does this:\n{{ or (T .Identifier) .Name | safeHTML }} It queries the translation table for the current language using the menu entry’s identifier and returns the translated string. If the translation table does not exist, or if the identifier key is not present in the translation table, it falls back to name.\nThe identifier depends on how you define menu entries:\nIf you define the menu entry automatically using the section pages menu, the identifier is the page’s .Section. If you define the menu entry in site configuration or in front matter, set the identifier property to the desired value. For example, if you define menu entries in site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - identifier: products name: Products pageRef: /products weight: 10 - identifier: services name: Services pageRef: /services weight: 20 [menus] [[menus.main]] identifier = 'products' name = 'Products' pageRef = '/products' weight = 10 [[menus.main]] identifier = 'services' name = 'Services' pageRef = '/services' weight = 20 { \"menus\": { \"main\": [ { \"identifier\": \"products\", \"name\": \"Products\", \"pageRef\": \"/products\", \"weight\": 10 }, { \"identifier\": \"services\", \"name\": \"Services\", \"pageRef\": \"/services\", \"weight\": 20 } ] } } Create corresponding entries in the translation tables:\ni18n/de.\ryaml\r \rtoml\r \rjson\r \rproducts: Produkte services: Leistungen products = 'Produkte' services = 'Leistungen' { \"products\": \"Produkte\", \"services\": \"Leistungen\" } Missing translations If a string does not have a translation for the current language, Hugo will use the value from the default language. If no default value is set, an empty string will be shown.\nWhile translating a Hugo website, it can be handy to have a visual indicator of missing translations. The enableMissingTranslationPlaceholders configuration option will flag all untranslated strings with the placeholder [i18n] identifier, where identifier is the id of the missing translation.\nHugo will generate your website with these missing translation placeholders. It might not be suitable for production environments.\nFor merging of content from other languages (i.e. missing content translations), see lang.Merge.\nTo track down missing translation strings, run Hugo with the --printI18nWarnings flag:\nhugo --printI18nWarnings | grep i18n i18n|MISSING_TRANSLATION|en|wordCount Multilingual themes support To support Multilingual mode in your themes, some considerations must be taken for the URLs in the templates. If there is more than one language, URLs must meet the following criteria:\nCome from the built-in .Permalink or .RelPermalink Be constructed with the relLangURL or absLangURL template function, or be prefixed with {{ .LanguagePrefix }} If there is more than one language defined, the LanguagePrefix variable will equal /en (or whatever your CurrentLanguage is). If not enabled, it will be an empty string (and is therefore harmless for single-language Hugo websites).\nGenerate multilingual content with hugo new content If you organize content with translations in the same directory:\nhugo new content post/test.en.md hugo new content post/test.de.md If you organize content with translations in different directories:\nhugo new content content/en/post/test.md hugo new content content/de/post/test.md "},{"date":"0001-01-01","uri":"/templates/robots/","title":"Robots.txt file","content":"To generate a robots.txt file from a template, change the site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \renableRobotsTXT: true enableRobotsTXT = true { \"enableRobotsTXT\": true } By default, Hugo generates robots.txt using an internal template.\nUser-agent: * Search engines that honor the Robots Exclusion Protocol will interpret this as permission to crawl everything on the site.\nrobots.txt template lookup order You may overwrite the internal template with a custom template. Hugo selects the template using this lookup order:\n/layouts/robots.txt /themes/\u003cTHEME\u003e/layouts/robots.txt robots.txt template example layouts/robots.txt\rUser-agent: * {{ range .Pages }} Disallow: {{ .RelPermalink }} {{ end }}\rThis template creates a robots.txt file with a Disallow directive for each page on the site. Search engines that honor the Robots Exclusion Protocol will not crawl any page on the site.\nTo create a robots.txt file without using a template:\nSet enableRobotsTXT to false in the site configuration. Create a robots.txt file in the static directory. Remember that Hugo copies everything in the static directory to the root of publishDir (typically public) when you build your site.\n"},{"date":"0001-01-01","uri":"/content-management/syntax-highlighting/","title":"Syntax highlighting","content":"Hugo uses Chroma as its code highlighter; it is built in Go and is really, really fast.\nConfigure syntax highlighter See Configure Highlight.\nGenerate syntax highlighter CSS If you run with markup.highlight.noClasses=false in your site configuration, you need a style sheet.\nYou can generate one with Hugo:\nhugo gen chromastyles --style=monokai \u003e syntax.css Run hugo gen chromastyles -h for more options. See https://xyproto.github.io/splash/docs/ for a gallery of available styles.\nHighlight shortcode Highlighting is carried out via the built-in highlight shortcode. It takes exactly one required parameter for the programming language to be highlighted and requires a closing shortcode.\nOptions:\nlinenos: configure line numbers. Valid values are true, false, table, or inline. false will turn off line numbers if it’s configured to be on in site configuration. table will give copy-and-paste friendly code blocks. hl_lines: lists a set of line numbers or line number ranges to be highlighted. linenostart=199: starts the line number count from 199. anchorlinenos: Configure anchors on line numbers. Valid values are true or false; lineanchors: Configure a prefix for the anchors on line numbers. Will be suffixed with -, so linking to the line number 1 with the option lineanchors=prefix adds the anchor prefix-1 to the page. hl_inline Highlight inside a \u003ccode\u003e (inline HTML element) tag. Valid values are true or false. The code tag will get a class with name code-inline. New in v0.101.0\rExample: highlight shortcode {{\u003c highlight go \"linenos=table,hl_lines=8 15-17,linenostart=199\" \u003e}} // ... code {{\u003c / highlight \u003e}} Gives this:\n199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 // GetTitleFunc returns a func that can be used to transform a string to // title case. // // The supported styles are // // - \"Go\" (strings.Title) // - \"AP\" (see https://www.apstylebook.com/) // - \"Chicago\" (see https://www.chicagomanualofstyle.org/home.html) // // If an unknown or empty style is provided, AP style is what you get. func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \"go\": return strings.Title case \"chicago\": return transform.NewTitleConverter(transform.ChicagoStyle) default: return transform.NewTitleConverter(transform.APStyle) } } Highlight Hugo/Go template code For highlighting Hugo/Go template code on your page, add /* after the opening double curly braces and */ before closing curly braces.\n{{\u003c/* myshortcode */\u003e}} Gives this:\n{{\u003c myshortcode \u003e}} Highlight template function See Highlight.\nHighlighting in code fences Highlighting in code fences is enabled by default.\n```go {linenos=table,hl_lines=[8,\"15-17\"],linenostart=199} // ... code ``` Gives this:\n199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 // GetTitleFunc returns a func that can be used to transform a string to // title case. // // The supported styles are // // - \"Go\" (strings.Title) // - \"AP\" (see https://www.apstylebook.com/) // - \"Chicago\" (see https://www.chicagomanualofstyle.org/home.html) // // If an unknown or empty style is provided, AP style is what you get. func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \"go\": return strings.Title case \"chicago\": return transform.NewTitleConverter(transform.ChicagoStyle) default: return transform.NewTitleConverter(transform.APStyle) } } The options are the same as in the highlighting shortcode, including linenos=false, but note the slightly different Markdown attribute syntax.\nList of Chroma highlighting languages The full list of Chroma lexers and their aliases (which is the identifier used in the highlight template func or when doing highlighting in code fences):\nABAP\rabap\rABNF\rabnf\rActionScript\ras, actionscript\rActionScript 3\ras3, actionscript3\rAda\rada, ada95, ada2005\rAgda\ragda\rAL\ral\rAlloy\ralloy\rAngular2\rng2\rANTLR\rantlr\rApacheConf\rapacheconf, aconf, apache\rAPL\rapl\rAppleScript\rapplescript\rArangoDB AQL\raql\rArduino\rarduino\rArmAsm\rarmasm\rAutoHotkey\rautohotkey, ahk\rAutoIt\rautoit\rAwk\rawk, gawk, mawk, nawk\rBallerina\rballerina\rBash\rbash, sh, ksh, zsh, shell\rBash Session\rbash-session, console, shell-session\rBatchfile\rbat, batch, dosbatch, winbatch\rBibTeX\rbib, bibtex\rBicep\rbicep\rBlitzBasic\rblitzbasic, b3d, bplus\rBNF\rbnf\rBQN\rbqn\rBrainfuck\rbrainfuck, bf\rC\rc\rC#\rcsharp, c#\rC++\rcpp, c++\rCaddyfile\rcaddyfile, caddy\rCaddyfile Directives\rcaddyfile-directives, caddyfile-d, caddy-d\rCap'n Proto\rcapnp\rCassandra CQL\rcassandra, cql\rCeylon\rceylon\rCFEngine3\rcfengine3, cf3\rcfstatement\rcfs\rChaiScript\rchai, chaiscript\rChapel\rchapel, chpl\rCheetah\rcheetah, spitfire\rClojure\rclojure, clj, edn\rCMake\rcmake\rCOBOL\rcobol\rCoffeeScript\rcoffee-script, coffeescript, coffee\rCommon Lisp\rcommon-lisp, cl, lisp\rCoq\rcoq\rCrystal\rcr, crystal\rCSS\rcss\rCUE\rcue\rCython\rcython, pyx, pyrex\rD\rd\rDart\rdart\rDax\rdax\rDiff\rdiff, udiff\rDjango/Jinja\rdjango, jinja\rdns\rzone, bind\rDocker\rdocker, dockerfile\rDTD\rdtd\rDylan\rdylan\rEBNF\rebnf\rElixir\relixir, ex, exs\rElm\relm\rEmacsLisp\remacs, elisp, emacs-lisp\rErlang\rerlang\rFactor\rfactor\rFennel\rfennel, fnl\rFish\rfish, fishshell\rForth\rforth\rFortran\rfortran, f90\rFortranFixed\rfortranfixed\rFSharp\rfsharp\rGAS\rgas, asm\rGDScript\rgdscript, gd\rGDScript3\rgdscript3, gd3\rGenshi\rgenshi, kid, xml+genshi, xml+kid\rGenshi HTML\rhtml+genshi, html+kid\rGenshi Text\rgenshitext\rGherkin\rcucumber, Cucumber, gherkin, Gherkin\rGLSL\rglsl\rGnuplot\rgnuplot\rGo\rgo, golang\rGo HTML Template\rgo-html-template\rGo Template\rgo-template\rGo Text Template\rgo-text-template\rGraphQL\rgraphql, graphqls, gql\rGroff\rgroff, nroff, man\rGroovy\rgroovy\rHandlebars\rhandlebars, hbs\rHare\rhare\rHaskell\rhaskell, hs\rHaxe\rhx, haxe, hxsl\rHCL\rhcl\rHexdump\rhexdump\rHLB\rhlb\rHLSL\rhlsl\rHolyC\rholyc\rHTML\rhtml\rHTTP\rhttp\rHy\rhylang\rIdris\ridris, idr\rIgor\rigor, igorpro\rINI\rini, cfg, dosini\rIo\rio\rISCdhcpd\riscdhcpd\rJ\rj\rJava\rjava\rJavaScript\rjs, javascript\rJSON\rjson\rJulia\rjulia, jl\rJungle\rjungle\rKotlin\rkotlin\rLighttpd configuration file\rlighty, lighttpd\rLLVM\rllvm\rLua\rlua\rMakefile\rmake, makefile, mf, bsdmake\rMako\rmako\rmarkdown\rmd, mkd\rMason\rmason\rMathematica\rmathematica, mma, nb\rMatlab\rmatlab\rmcfunction\rmcfunction\rMeson\rmeson, meson.build\rMetal\rmetal\rMiniZinc\rminizinc, MZN, mzn\rMLIR\rmlir\rModula-2\rmodula2, m2\rMonkeyC\rmonkeyc\rMorrowindScript\rmorrowind, mwscript\rMyghty\rmyghty\rMySQL\rmysql, mariadb\rNASM\rnasm\rNatural\rnatural\rNewspeak\rnewspeak\rNginx configuration file\rnginx\rNim\rnim, nimrod\rNix\rnixos, nix\rObjective-C\robjective-c, objectivec, obj-c, objc\rObjectPascal\robjectpascal\rOCaml\rocaml\rOctave\roctave\rOdin\rodin\rOnesEnterprise\rones, onesenterprise, 1S, 1S:Enterprise\rOpenEdge ABL\ropenedge, abl, progress, openedgeabl\rOpenSCAD\ropenscad\rOrg Mode\rorg, orgmode\rPacmanConf\rpacmanconf\rPerl\rperl, pl\rPHP\rphp, php3, php4, php5\rPHTML\rphtml\rPig\rpig\rPkgConfig\rpkgconfig\rPL/pgSQL\rplpgsql\rplaintext\rtext, plain, no-highlight\rPlutus Core\rplutus-core, plc\rPony\rpony\rPostgreSQL SQL dialect\rpostgresql, postgres\rPostScript\rpostscript, postscr\rPOVRay\rpov\rPowerQuery\rpowerquery, pq\rPowerShell\rpowershell, posh, ps1, psm1, psd1, pwsh\rProlog\rprolog\rPromQL\rpromql\rproperties\rjava-properties\rProtocol Buffer\rprotobuf, proto\rPRQL\rprql\rPSL\rpsl\rPuppet\rpuppet\rPython\rpython, py, sage, python3, py3\rPython 2\rpython2, py2\rQBasic\rqbasic, basic\rQML\rqml, qbs\rR\rsplus, s, r\rRacket\rracket, rkt\rRagel\rragel\rRaku\rperl6, pl6, raku\rreact\rjsx, react\rReasonML\rreason, reasonml\rreg\rregistry\rreStructuredText\rrst, rest, restructuredtext\rRexx\rrexx, arexx\rRuby\rrb, ruby, duby\rRust\rrust, rs\rSAS\rsas\rSass\rsass\rScala\rscala\rScheme\rscheme, scm\rScilab\rscilab\rSCSS\rscss\rSed\rsed, gsed, ssed\rSieve\rsieve\rSmali\rsmali\rSmalltalk\rsmalltalk, squeak, st\rSmarty\rsmarty\rSnobol\rsnobol\rSolidity\rsol, solidity\rSourcePawn\rsp\rSPARQL\rsparql\rSQL\rsql\rSquidConf\rsquidconf, squid.conf, squid\rStandard ML\rsml\rstas\rStylus\rstylus\rSvelte\rsvelte\rSwift\rswift\rSYSTEMD\rsystemd\rsystemverilog\rsystemverilog, sv\rTableGen\rtablegen\rTal\rtal, uxntal\rTASM\rtasm\rTcl\rtcl\rTcsh\rtcsh, csh\rTermcap\rtermcap\rTerminfo\rterminfo\rTerraform\rterraform, tf\rTeX\rtex, latex\rThrift\rthrift\rTOML\rtoml\rTradingView\rtradingview, tv\rTransact-SQL\rtsql, t-sql\rTuring\rturing\rTurtle\rturtle\rTwig\rtwig\rTypeScript\rts, tsx, typescript\rTypoScript\rtyposcript\rTypoScriptCssData\rtyposcriptcssdata\rTypoScriptHtmlData\rtyposcripthtmldata\rucode\rV\rv, vlang\rV shell\rvsh, vshell\rVala\rvala, vapi\rVB.net\rvb.net, vbnet\rverilog\rverilog, v\rVHDL\rvhdl\rVHS\rvhs, tape, cassette\rVimL\rvim\rvue\rvue, vuejs\rWDTE\rWebGPU Shading Language\rwgsl\rWhiley\rwhiley\rXML\rxml\rXorg\rxorg.conf\rYAML\ryaml\rYANG\ryang\rZ80 Assembly\rz80\rZed\rzed\rZig\rzig\r"},{"date":"0001-01-01","uri":"/content-management/mathematics/","title":"Mathematics in markdown","content":"\rNew in v0.122.0\r\\[\r\\begin{aligned}\rKL(\\hat{y} || y) \u0026= \\sum_{c=1}^{M}\\hat{y}_c \\log{\\frac{\\hat{y}_c}{y_c}} \\\\\rJS(\\hat{y} || y) \u0026= \\frac{1}{2}(KL(y||\\frac{y+\\hat{y}}{2}) + KL(\\hat{y}||\\frac{y+\\hat{y}}{2}))\r\\end{aligned}\r\\] Overview Mathematical equations and expressions authored in LaTeX or TeX are common in academic and scientific publications. Your browser typically renders this mathematical markup using an open-source JavaScript display engine such as MathJax or KaTeX.\nFor example, this is the mathematical markup for the equations displayed at the top of this page:\n\\[ \\begin{aligned} KL(\\hat{y} || y) \u0026= \\sum_{c=1}^{M}\\hat{y}_c \\log{\\frac{\\hat{y}_c}{y_c}} \\\\ JS(\\hat{y} || y) \u0026= \\frac{1}{2}(KL(y||\\frac{y+\\hat{y}}{2}) + KL(\\hat{y}||\\frac{y+\\hat{y}}{2})) \\end{aligned} \\] Equations and expressions can be displayed inline with other text, or as standalone blocks. Block presentation is also known as “display” mode.\nWhether an equation or expression appears inline, or as a block, depends on the delimiters that surround the mathematical markup. Delimiters are defined in pairs, where each pair consists of an opening and closing delimiter. The opening and closing delimiters may be the same, or different. Common delimiter pairs are shown in Step 1.\nThe approach described below avoids reliance on platform-specific features like shortcodes or code block render hooks. Instead, it utilizes a standardized markup format for mathematical equations and expressions, compatible with the rendering engines used by GitHub, GitLab, Microsoft VS Code, Obsidian, Typora, and others.\nSetup Follow these instructions to include mathematical equations and expressions in your markdown using LaTeX or TeX typesetting syntax.\nStep 1 Enable and configure the Goldmark passthrough extension in your site configuration. The passthrough extension preserves raw markdown within delimited snippets of text, including the delimiters themselves.\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: goldmark: extensions: passthrough: delimiters: block: - - \\[ - \\] - - $$ - $$ inline: - - \\( - \\) enable: true params: math: true [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] enable = true [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]'], ['$$', '$$']] inline = [['\\(', '\\)']] [params] math = true { \"markup\": { \"goldmark\": { \"extensions\": { \"passthrough\": { \"delimiters\": { \"block\": [ [ \"\\\\[\", \"\\\\]\" ], [ \"$$\", \"$$\" ] ], \"inline\": [ [ \"\\\\(\", \"\\\\)\" ] ] }, \"enable\": true } } } }, \"params\": { \"math\": true } } The configuration above enables mathematical rendering on every page unless you set the math parameter to false in front matter. To enable mathematical rendering as needed, set the math parameter to false in your site configuration, and set the math parameter to true in front matter. Use this parameter in your base template as shown in Step 3.\nThe configuration above precludes the use of the $...$ delimiter pair for inline equations. Although you can add this delimiter pair to the configuration and JavaScript, you will need to double-escape the $ symbol when used outside of math contexts to avoid unintended formatting.\nSee the inline delimiters section for details.\nTo disable passthrough of inline snippets, omit the inline key from the configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: goldmark: extensions: passthrough: delimiters: block: - - \\[ - \\] - - $$ - $$ [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] [markup.goldmark.extensions.passthrough.delimiters] block = [['\\[', '\\]'], ['$$', '$$']] { \"markup\": { \"goldmark\": { \"extensions\": { \"passthrough\": { \"delimiters\": { \"block\": [ [ \"\\\\[\", \"\\\\]\" ], [ \"$$\", \"$$\" ] ] } } } } } } You can define your own opening and closing delimiters, provided they match the delimiters that you set in Step 2.\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: goldmark: extensions: passthrough: delimiters: block: - - '@@' - '@@' inline: - - '@' - '@' [markup] [markup.goldmark] [markup.goldmark.extensions] [markup.goldmark.extensions.passthrough] [markup.goldmark.extensions.passthrough.delimiters] block = [['@@', '@@']] inline = [['@', '@']] { \"markup\": { \"goldmark\": { \"extensions\": { \"passthrough\": { \"delimiters\": { \"block\": [ [ \"@@\", \"@@\" ] ], \"inline\": [ [ \"@\", \"@\" ] ] } } } } } } Step 2 Create a partial template to load MathJax or KaTeX. The example below loads MathJax, or you can use KaTeX as described in the engines section.\nlayouts/partials/math.html\r\u003cscript id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\"\u003e\u003c/script\u003e \u003cscript\u003e MathJax = { tex: { displayMath: [['\\\\[', '\\\\]'], ['$$', '$$']], // block inlineMath: [['\\\\(', '\\\\)']] // inline } }; \u003c/script\u003e\rThe delimiters above must match the delimiters in your site configuration.\nStep 3 Conditionally call the partial template from the base template.\nlayouts/_default/baseof.html\r\u003chead\u003e ... {{ if .Param \"math\" }} {{ partialCached \"math.html\" . }} {{ end }} ... \u003c/head\u003e\rThe example above loads the partial template if you have set the math parameter in front matter to true. If you have not set the math parameter in front matter, the conditional statement falls back to the math parameter in your site configuration.\nStep 4 Include mathematical equations and expressions in your markdown using LaTeX or TeX typesetting syntax.\ncontent/math-examples.md\rThis is an inline \\(a^*=x-b^*\\) equation. These are block equations: \\[a^*=x-b^*\\] \\[ a^*=x-b^* \\] \\[ a^*=x-b^* \\] These are block equations using alternate delimiters: $$a^*=x-b^*$$ $$ a^*=x-b^* $$ $$ a^*=x-b^* $$\rIf you set the math parameter to false in your site configuration, you must set the math parameter to true in front matter. For example:\ncontent/math-examples.md\ryaml\r \rtoml\r \rjson\r \r--- date: 2024-01-24T18:09:49-08:00 math: true title: Math examples ---\r+++ date = 2024-01-24T18:09:49-08:00 math = true title = 'Math examples' +++\r{ \"date\": \"2024-01-24T18:09:49-08:00\", \"math\": true, \"title\": \"Math examples\" } Inline delimiters The configuration, JavaScript, and examples above use the \\(...\\) delimiter pair for inline equations. The $...$ delimiter pair is a common alternative, but using it may result in unintended formatting if you use the $ symbol outside of math contexts.\nIf you add the $...$ delimiter pair to your configuration and JavaScript, you must double-escape the $ when outside of math contexts, regardless of whether mathematical rendering is enabled on the page. For example:\nA \\\\$5 bill _saved_ is a \\\\$5 bill _earned_. If you use the $...$ delimiter pair for inline equations, and occasionally use the $ symbol outside of math contexts, you must use MathJax instead of KaTeX to avoid unintended formatting caused by this KaTeX limitation.\nEngines MathJax and KaTeX are open-source JavaScript display engines. Both engines are fast, but at the time of this writing MathJax v3.2.2 is slightly faster than KaTeX v0.16.9.\nIf you use the $...$ delimiter pair for inline equations, and occasionally use the $ symbol outside of math contexts, you must use MathJax instead of KaTeX to avoid unintended formatting caused by this KaTeX limitation.\nSee the inline delimiters section for details.\nTo use KaTeX instead of MathJax, replace the partial template from Step 2 with this:\nlayouts/partials/math.html\r\u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css\" integrity=\"sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV\" crossorigin=\"anonymous\"\u003e \u003cscript defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js\" integrity=\"sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e \u003cscript defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js\" integrity=\"sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e \u003cscript\u003e document.addEventListener(\"DOMContentLoaded\", function() { renderMathInElement(document.body, { delimiters: [ {left: '\\\\[', right: '\\\\]', display: true}, // block {left: '$$', right: '$$', display: true}, // block {left: '\\\\(', right: '\\\\)', display: false}, // inline ], throwOnError : false }); }); \u003c/script\u003e\rThe delimiters above must match the delimiters in your site configuration.\nChemistry Both MathJax and KaTeX provide support for chemical equations. For example:\n$$C_p[\\ce{H2O(l)}] = \\pu{75.3 J // mol K}$$ $$C_p[\\ce{H2O(l)}] = \\pu{75.3 J // mol K}$$ As shown in Step 2 above, MathJax supports chemical equations without additional configuration. To add chemistry support to KaTeX, enable the mhchem extension as described in the KaTeX documentation.\n"},{"date":"2022-10-30","uri":"/showcase/ampio-help/","title":"Ampio Knowledge Base","content":"As a company that specializes in highly customizable smart solutions for various industries, Ampio has accumulated a vast amount of knowledge throughout the years. We were on the lookout for a user-friendly platform to impart this knowledge to our clients and installers. Delivering a service that caters to both audiences, scattered around the globe with vastly divergent needs and expectations, was a challenge.\nOn the one hand, we needed something that would let us educate a client with no technical knowledge about our system in a visually appealing way.\nOn the other hand, our installers required technical drawings, offline manuals, and a deep dive into highly specialized subjects.\nOver and above that, we could not overlook the fact that our internal team of editors and maintainers of the Knowledge Base included non-programmers who had to be able to create content and navigate the architecture of the site just as well as those adept at coding.\nWe started our journey with the following requirements:\nEase of contribution Efficient search capabilities The possibility of deployment to simple shared hosting Proper support for multilingualism Dark ages of WordPress With the above-mentioned in mind, we built our first revision of the service in WordPress with a commercial knowledge base plugin. The initial requirements seemed not to be exorbitant, and yet we were surprised to see that only a few of the available solutions covered them. Especially, the case of multilingualism appeared to be particularly neglected across the available products.\nThe WordPress-based products made big promises: pay some bucks, bootstrap the service in minutes, and forget about all the development troubles. And although those promises could possibly be deliverable on WordPress’ end, it was definitely not true for anything more than the most generic deployments. In our case, we were dealing with more and more trade-offs. Plus, the solution was just slow on the simple shared hosting environment that we dedicated to the job.\nTurning point The turning point was the introduction of a new key requirement—each document was to be downloadable in the PDF format. Such functionality was not available in the plugins we owned, nor did it look like any of the other existing WordPress plugins could fulfill our needs to a satisfactory degree. Nobody in our team was brave enough to add such a functionality to the current stack, so we decided to start from scratch.\nOn top of that new development, we had to remember another one of our key requirements, namely, that mostly non-programmers were to be responsible for the service maintenance and content creation. Initially, we were leaning towards headless CMS-based solutions, but finally we made a bold move and decided to create a Git-managed Jamstack service and see what happens.\nHugo to the rescue Hugo was our first choice of SSG. The multilingualism support was the primary feature that convinced us. Later on, going through the documentation, we continued to discover new exciting features that we didn’t even know we needed when we started.\nThe rich functionalities of WordPress WYSIWYG editors soon turned out to be a curse. It became burdensome to maintain formatting consistency across documents prepared by multiple contributors. When we considered Markdown, we knew that it would give us a lot less flexibility. In our case, it proved to be a blessing in disguise—the constraints imposed by the notation ensured that each document was prepared in the same way. And in the cases where Markdown was not enough, Hugo shortcodes gave us all that we needed to get the results we anticipated.\nIn terms of PDF generation, we utilized custom output formats to produce intermediary document representations, which are consumed by our custom tool transforming them to TeX documents, which are finally used to produce PDF files.\nCustom output formats were also used to create search indexes. The search functionality is built on the brilliant TNTSearch library. The search queries and results are handled by PHP snippets embedded into static documents handled by Hugo.\nWe even implemented a simple REST API generated by Hugo! We have yet to find something that cannot be achieved with this stack, while in WordPress-based solutions we were struggling with things as simple as defining custom document ordering in one of the categories list views.\nWhen talking about Hugo, we cannot forget about the speed. At the beginning we were not considering it a killer feature, but as our document base grew bigger, we appreciated it more and more. Dry-runs are not so common—most of the time we are working on one of the documents with cache already built during one of the previous Hugo runs. In such a scenario, Hugo rebuilds the site in about a second and we consider it a very good result.\n| EN | PL -------------------+-----+------ Pages | 483 | 486 Paginator pages | 56 | 55 Non-page files | 745 | 749 Static files | 917 | 917 Processed images | 487 | 490 Aliases | 80 | 79 Sitemaps | 2 | 1 Cleaned | 0 | 0 Total in 1096 ms Adaptation among the contributors Very quickly it became apparent that our initial concerns about the adaptation of the workflow among contributors were grossly exaggerated. Markdown is fairly straightforward and did not cause any trouble for the contributors.\nWe recommended that our colleagues use Visual Studio Code as a tool for content creation. The project’s repository tracks project-scoped configuration of the editor, which includes a set of tasks allowing to run a live server from the GUI level. This is very useful for those who are easily frightened when faced with the mighty terminal.\nThe basic skills of the Git workflow were also easily acquired. At the end of the day, builds and deployments are fully managed by CI/CD processes, so the administration of the service drills down to reviewing and accepting merge requests in the Git frontend. As a side effect, we receive a full and clear history of contributions, which is well appreciated by our quality assurance auditors.\nWe could even say that our experiment spread the love for Git among non-programmers in our organization!\nSummary Hugo is the best! Definitely give it a try if you are ever faced with a challenge similar to ours. And do not give it a second thought if your service contributors are not too technically inclined—it might still turn out great!\n"},{"date":"2021-05-27","uri":"/showcase/alora-labs/","title":"Alora Labs","content":"At Alora Labs we always have an eye open for new tools and technology that we can utilize to the benefit of our customers or internal projects like our website.\nThe previous iteration of our site was built with Jekyll, which served us well at first. However as time went on, we became frustrated with the number of dependencies we had to rely on, that would often break at the most inconvenient times.\nHugo was a breath of fresh air in this regard, a single binary that works equally well on Windows as it did on macOS or Linux. We no longer need additional tools for image optimization, Sass compilation or JavaScript bundling. Everything just works, and with a substantial performance boost too.\nHugo has become a favorite tool in the tool belt and the foundation for many client projects. We couldn’t be happier with the switch and we are optimistic about recommending Hugo for many years to come.\nThank you to the vibrant community and talented development team for all the hard work in making Hugo a success. As excellent as Hugo is now, we cannot wait to see what the release notes have in store for us next.\n"},{"date":"2021-01-07","uri":"/showcase/godot-tutorials/","title":"Godot Tutorials","content":"Godot Tutorials started as a way to teach beginners game programming and game development. As I created videos, I ran into a problem; if I made a mistake with a YouTube video, it was difficult to correct errors.\nI discovered that blogging episodes and having articles that teach on top of my videos is a fantastic solution to my problem.\nAs I researched blogging platforms, I came across two solutions; however, I chose Hugo because it’s built with Markdown in mind and simplified my workflow.\nIn a sense, with Hugo programmed the right way, I can focus more time on planning, creating, and editing my videos and less time maintaining and fixing my website.\n"},{"date":"2020-05-01","uri":"/showcase/digitalgov/","title":"Digital.gov","content":"For over a decade, Digital.gov has provided guidance, training, and community support to the people who are responsible for delivering digital services in the U.S. government. Essentially, it is a place where people can find examples of problems being solved in government, and get links to the tools and resources they need.\nThrough collaboration in our communities of practice, Digital.gov is a window into the people who work in technology in government and the challenges they face making digital services stronger and more effective. Read more about our site »\nDigital.gov is built using the U.S. Web Design System (USWDS) and have followed the design principles in building out our new site:\nStart with real user needs — We used human-centered design methods to inform our product decisions (like qualitative user research), and gathered feedback from real users. We also continually test our assumptions with small experiments. Earn trust —We recognize that trust has to be earned every time. We are including all required links and content on our site, clearly identifying as a government site, building with modern best practices, and using HTTPS. Embrace accessibility — Accessibility affects everybody, and we built it into every decision. We’re continually working to conform to Section 508 requirements, use user experience best practices, and support a wide range of devices. Promote continuity — We started from shared solutions like USWDS and Federalist. We designed our site to clearly identify as a government site by including USWDS’s .gov banner, common colors and patterns, and built with modern best practices. Listen — We actively collect user feedback and web metrics. We use the Digital Analytics Program (DAP) and analyze the data to discover actionable insights. We make small, incremental changes to continuously improve our website by listening to readers and learning from what we hear. More on the USWDS maturity model »\nOpen tools We didn’t start from scratch. We built and designed the Digital.gov using many of the open-source tools and services that we develop for government here in the Technology Transformation Services (TTS).\nUsing services that make it possible to design, build, and iterate quickly are essential to modern web design and development, which is why Federalist and the U.S. Web Design System are such a great combination.\nWhy Hugo? Well, with around ~3,000 files (and growing) and ~9,000 built pages, we needed a site generator that could handle that volume with lightning fast speed.\nHugo was the clear option. The Federalist team quickly added it to their available site generators, and we were off.\nAt the moment, it takes around 32 seconds to build close to ~10,000 pages!\nTake a look:\n| EN -------------------+------- Pages | 7973 Paginator pages | 600 Non-page files | 108 Static files | 851 Processed images | 0 Aliases | 1381 Sitemaps | 1 Cleaned | 0 Built in 32.427 seconds In addition to Hugo, we are proudly using a number of other tools and services, all built by government are free to use:\nFederalist Search.gov — A free, hosted search platform for federal websites. Cloud.gov — helps teams build, run, and authorize cloud-ready or legacy government systems quickly and cheaply. Federal CrowdSource Mobile Testing Program — Free mobile compatibility testing by feds, for feds. Digital Analytics Program (DAP) — A free analytics tool for measuring digital services in the federal government Section508.gov and PlainLanguage.gov resources API.data.gov — a free API management service for federal agencies U.S. Digital Registry — A resource for confirming the official status of government social media accounts, mobile apps, and mobile websites. Questions or feedback? Submit an issue or send us an email to digitalgov@gsa.gov ❤️\n"},{"date":"2020-04-10","uri":"/showcase/keycdn/","title":"KeyCDN","content":"At KeyCDN one of our primary focuses is on performance. With speed being ingrained in our DNA we knew from the start that we must use a fast static website generator that could meet our requirements. When evaluating the right solution, Hugo met our requirements and we looked no further as it was the fastest and most flexible.\nWhy we chose Hugo Before our migration to Hugo our website was powered by a PHP-based website that had about 50 pages and a WordPress website that had over 500 posts between our blog and knowledge base. This became harder to maintain as time continued. We felt like we were losing the speed and flexibility that we require. To overcome this we knew we needed to convert our website to be static. This would allow our website to be faster and more secure as it could be delivered by all of our edge locations.\nIt wasn’t an easy task at the beginning, however, after evaluating Hugo and benchmarking it we knew we had found the ideal solution. Hugo was by far the fastest setup and offered an intuitive way to build our entire website exactly as needed. The Go-based templates, shortcodes, and configuration options made it easy to build a complex website.\nIn the fall of 2018 we started the migration and within a couple short months we had built a custom static website with Hugo and migrated all content from our old systems. The simplicity and vast amount of functionality that Hugo offers made this process fast and left our entire team, including all of our writers and developers, happy with the migration. Since migrating to Hugo we haven’t looked back. Hugo has become an integral part of our stack. We’re grateful to all those who have contributed to make Hugo what it is today.\nTechnical overview Below is an overview of what we used with Hugo to build our website:\nKeyCDN uses a custom theme and is our primary hub for all style sheets and JavaScript. Our other websites, like KeyCDN Tools, only import the required style sheets and JavaScript. We use Gulp in our build process for many tasks, such as combining, versioning, and compressing our style sheets as well as our JavaScript. Our search is powered by a custom solution that we’ve built. It allows our pages, blog, and knowledge base to be searched. It uses Axios to send a POST request containing the search query. An index file in JSON generated by Hugo is searched and the results are then returned. Our commenting system is also powered by a custom solution that we’ve built. It uses Axios to send a GET request containing the slug to pull the comment thread and a POST request containing the name, email address, and comment when submitting a comment. Our contact form is a simple HTML form, which uses Axios as well. Our writers use shortcodes to enhance the capability of markdown. Our entire website is delivered through KeyCDN using a Pull Zone, which means all of our edge locations are delivering our website. "},{"date":"2019-10-01","uri":"/showcase/hapticmedia/","title":"Hapticmedia Blog","content":"Our goal was to create a simple, effective and multilingual blog on 3D technology that could be managed by a non-technical profile.\nWhy Hugo? Hugo addresses all these needs, coupled with Forestry.io for its administration via a “turnkey” interface. We have attached particular importance to SEO, and therefore to the creation of an advanced taxonomy system. Thus, each author and tag has a dedicated page, listing the related posts.\nWhat we liked The multilingual content support, especially simple to setup. The multiple environments support (develop, staging, test, production, …). Although a hard start with the Go language, the power of the Hugo’s templating. The partial layouts, including the internals (e.g. social meta tags). The build time, unbeatable ⚡️⚡️⚡️. Tools \u0026 workflow We used the same design as our website, recreated as a Hugo HTML template. Hugo for the static website generator. CircleCI for continuous integration \u0026 deployment. AWS for web hosting. Forestry.io for the content management. All of these tools allow our editor to manage the blog’s content without having to worry about its technical aspect, which is managed by the developers.\n"},{"date":"2019-06-16","uri":"/showcase/bypasscensorship/","title":"Bypass Censorship","content":"The British Broadcasting Corporation (BBC) (UK), Deutsche Welle (DW) (Germany), France Médias Monde (FMM) (France), the U.S. Agency for Global Media (USAGM) (US) and the Open Technology Fund (OTF) (US) co-sponsor the Bypass Censorship website.\nWebsites of international news agencies are often blocked in many countries. In order to connect people to these sites, Bypass Censorship feature and recommend tools in the following languages: English, French, Spanish, Arabic, Farsi, Chinese, and Russian.\nOne of the tools is the Bypass Censorship Extension for Firefox and Chrome. The extension help direct people to mirrors of partners sites if they are being censored.\nThe first version of the site was built in Drupal 8 but it was relaunched as a static site built with Hugo in 2019.\nSecurity, page load time and easy of hosting is the main reasons for switching to a static site. As the lead developer I had good experience with Hugo and was interested in exploring the multilingual features.\nIt’s a simply site, basically one page in seven languages. I had no problems getting Hugo to output what I wanted. Found the multilingual support straight forward and easy to work with.\nThanks to the design by Leyla Avsar the site also looks good. I used the Hugo Zen theme with a few custom templates and the needed CSS.\nThe editors can maintain content via Forestry.io CMS or directly via Git. Forestry does unfortunately not have multilingual support. All the language versions are in one pile making it harder to find the right file to edit, but it works.\n"},{"date":"2019-04-29","uri":"/showcase/pharmaseal/","title":"PHARMASEAL","content":"We wanted to shake the status quo with PHARMASEAL, opting for a fast and scalable website built with Hugo instead of slower monolithic systems the competitors were using.\nWe had two goals:\nMake it fast\nWe wanted to optimize the site as much as possible, so we opted for using Cloudinary, enabling us to take advantage of on-the-fly image manipulation, and thanks to the sheer speed of static sites, we achieved a perfect optimization score with Google audits.\nBecause we’re hosting the site through Netlify and our target audience is in America, we are taking advantage of Netlify edge (Their alternative to a CDN). We’re talking blazing fast.\nMake it easy\nWe’re big fans of simplicity, and that’s what we delivered with the Forestry building blocks. Every element on the site is built with building blocks in mind, allowing PHARMASEAL to generate multiple pages in the blink of an eye.\nPHARMASEAL have found Forestry CMS combined with HUGO to be so effective at producing fast, purpose driven pages, that we have worked with them to add even more blocks in a scalable, modular fashion.\nTLDR: We’re blown away with HUGO, the sheer speed, scalability and deployment possibilities with Netlify is the 💣\n"},{"date":"2019-02-02","uri":"/showcase/fireship/","title":"fireship.io","content":"After careful consideration of JavaScript/JSX-based static site generators, it became clear that Hugo was the only tool capable of handling our project’s complex demands. Not only do we have multiple content formats and taxonomies, but we often need to customize the experience at a more granular level. The problems Hugo has solved for us include:\nRender speed. We know from past experience that JavaScript-based static site generators become very slow when you have thousands of pages and images. Feature-rich. Our site has a long list of specialized needs and Hugo somehow manages to cover every single use case. Composability. Hugo’s partial and shortcode systems empower us to write DRY and maintainable templates. Simplicity. Hugo is easy to learn (even without Go experience) and doesn’t burden us with brittle dependencies. The site is able to achieve Lighthouse performance scores of 95+, despite the fact that it is a fully interactive PWA that ships Angular and Firebase in the JS bundle. This is made possible by (1) prerendering content with Hugo and (2) lazily embedding native web components directly in the HTML and Markdown. We provide a detailed explanation of the architecture on YouTube and can’t imagine development without Hugo.\n"},{"date":"2018-05-04","uri":"/showcase/tomango/","title":"Tomango","content":"Hugo is our static site generator (SSG) of choice. It’s really quick. After using it on a number of client projects, it became clear that our new site had to be built with Hugo.\nThe big benefit of an SSG is how it moves all the heavy lifting to the build time.\nFor example in WordPress, all the category pages are created at runtime, generating a lot of database queries. In Hugo, the paginated category pages are created at build time - so all the computational complexity is done once, and doesn’t impact the user at all.\nSimilarly, instead of running a live, or even a heavily cached Instagram feed that checked for new photos on page load, we used IFTTT to flip the feature to work performantly. I’ve written about it in detail on my blog but in essence: IFTTT sends a webhook to a Netlify Cloud Function every time a photo is uploaded. The function scrapes the photo and commits it to our GitHub repo which triggers a Hugo build on Netlify, deploying the site immediately!\nShortcodes allow copy editors to continue using WordPress-esque features, Markdown keeps our developers happy, and our users don’t have any of the database overheads. It’s win-win!\nThis is an extract from our technical launch post.\n"},{"date":"2018-03-16","uri":"/showcase/forestry/","title":"Forestry.io","content":"It was clear from the get-go that we had to go with a static site generator. Static sites are secure, performant, and give you 100% flexibility. At Forestry.io we provide Content Management Solutions for websites built with static site generators, so we might be a little biased. The only question: Which static site generator was the right choice for us?\nWhy Hugo? In our early research we looked at Ionic’s site to get some inspiration. They used Jekyll to build their website. While Jekyll is a great generator, the build times for larger sites can be painfully slow. With more than 150 pages plus many custom configurations and add-ons, our website doesn’t fall into the low-volume category anymore. Our developers want a smooth experience when working on the website and our content editors need the ability to preview content quickly. In short, we need our builds to be lightning fast.\nWe knew Hugo was fast but we did some additional benchmarking before making our decision. Seeing Hugo in action is a whole different world of awesome. Hugo takes less than one second to build our 150-page site! Take a look:\n| EN +------------------+-----+ Pages | 141 Paginator pages | 4 Non-page files | 0 Static files | 537 Processed images | 0 Aliases | 60 Sitemaps | 1 Cleaned | 0 Total in 739 ms In fact, we liked Hugo so much that our wizard Chris made his workflow public and we started the open-source project Create-Static-Site. It’s a simple way to spin up sites and set up a modern web development workflow with one line of code. Essentially it adds build configurations as a dependency for JS, CSS and Image Processing.\nLastly, we want to take the opportunity to give some love to other amazing tools we used building our website.\nWhat tools did we use? Our Norwegian designer Nichlas is in love with Sketch. From what we hear it’s a designer’s dream come true. Some say our main graphic is mesmerizing. Nichlas created it using 3DS Max. Hugo – of course. Chris can’t think of modern web development without Gulp \u0026 Webpack. We used them to add additional build steps such as Browsersync, CSS, JS and SVG optimization. Speaking about adding steps to our build, our lives would be much harder without CircleCI for continuous deployment and automated testing purposes. We can’t stop raving about Algolia. Chris loves it and even wrote a tutorial on how to implement Algolia into static sites using Hugo’s Custom Outputs. Cloudinary is probably one of the easiest ways to get responsive images into your website. We might be a little biased on this one - We think Forestry.io is a great way to add a content management system with a clean UI on top of your site without interrupting your experience as a developer. For hosting purposes we use the almighty AWS. Formspree.io is managing our support and enterprise requests. We also use browser cookies and JS to customize our user’s experience and give it a more dynamic feel. "},{"date":"2018-03-13","uri":"/showcase/letsencrypt/","title":"Let’s Encrypt","content":"The Let’s Encrypt website has a common set of elements: A landing page and some other static info-pages, a document section, a blog, and a documentation section. Having it moved to Hugo was mostly motivated by a simpler administration and Hugo’s multilingual support. They already serve HTTPS to more than 60 million domains, and having the documentation available in more languages will increase that reach.1\nThe Let's Encrypt website is now built with @GoHugoIO, easing management and giving us access to more features. Thanks to @domeneshop for supporting this work through a Let's Encrypt sponsorship and to @bepsays for the migration work!\n— Let's Encrypt (@letsencrypt) March 8, 2018 I helped them port the site from Jekyll to Hugo. There are usually very few surprises doing this. I know Hugo very well, but working on sites with a history usually comes up with something new.\nThat site is bookmarked in many browsers, so preserving the URLs was a must. Hugo’s URL handling is very flexible, but there was one challenge. The website has a mix of standard and what we in Hugo call ugly URLs (https://letsencrypt.org/2017/12/07/looking-forward-to-2018.html). In Hugo this is handled automatically, and you can turn it on globally or per language. But before Hugo 0.33 you could not configure it for parts of your site. You could set it manually for the relevant pages in front matter – which is how it was done in Jekyll – but that would be hard to manage, especially when you start to introduce translations. So, in Hugo 0.33 I added support for ugly URLs per section and also url set in front matter for list pages (https://letsencrypt.org/blog/).\nThe lessons learned from this also lead to disableLanguages in Hugo 0.34 (a way to turn off languages during translation). And I also registered this issue. Once fixed it will make it easier to handle partially translated sites.\nThe work on getting the content translated is in progress. ↩︎\n"},{"date":"2018-02-22","uri":"/showcase/1password-support/","title":"1Password Support","content":"At 1Password, we used to go through a different documentation platform every month: blog engines, ebooks, wikis, site generators written in Ruby and JavaScript. Each was inadequate in its own special way. Then we found Hugo. We made one last switch, and we’re glad we did.\nNot all static site generators are created equal Finding a tool that will make your customers, writers, designers, and DevOps team happy is no easy task, but we managed it with Hugo:\nHugo is static. We’re a security company, so we swear by static sites and use them wherever possible. We feel much safer pointing customers at HTML files than at a complicated server which needs to be hardened.\nHugo is Go. We love the Go programming language at 1Password, and we were delighted to learn that Hugo used the same Go template syntax that our designers and front-end developers had already mastered.\nHugo is FAST. Our previous static site generator took nearly a minute to compile our (then much smaller) site. Developers might be used to this, but it wasn’t cutting it for writers who wanted to see live previews of their work. Hugo did the same job in milliseconds, and to this day compiles 400 pages in five languages in the blink of an eye.\nHugo is flexible. Thanks to Hugo’s content and layout system, we were able to preserve our existing file and folder structure and port our entire production site in a few days. We could then create new content types that weren’t possible before, like these snazzy showcases.\nHugo is great for writers. Our documentation team was already comfortable with Markdown and Git and could start creating content for Hugo with zero downtime. Once we added shortcodes, our writers were able to dress up articles with features like platform boxes with just a bit of new syntax.\nHugo has an amazing developer community. Hugo updates are frequent and filled to the brim with features and fixes. As we developed the multilingual version of our site, we submitted PRs for features we needed and were helped through the process by @bep and others.\nHugo is simple to deploy. Hugo has just the right amount of configuration options to fit into our build system without being too complicated.\nTech specs 1Password Support uses Hugo with a custom theme. It shares styles and some template code with 1Password.com, which we also moved to Hugo in 2016. Code and articles live in a private GitHub repository, which is deployed to a static content server using Git hooks. Writers build and preview the site on their computers and contribute content using pull requests. We use Hugo’s multilingual support to build the site in English, Spanish, French, Italian, German, and Russian. With the help of Hugo, 1Password Support became our very first site in multiple languages. Our contact form is a single-page React app. We were able to integrate it with Hugo seamlessly thanks to its support for static files. The one part of the support site which is not static is our search engine, which we developed with Elasticsearch and host on AWS. "},{"date":"2018-02-13","uri":"/showcase/quiply-employee-communications-app/","title":"Quiply Employee Communications App","content":"With the launch of our Employee Communications app Quiply we created a very simple and static one-page website to showcase our product.\nAs our customer base and demand for marketing and communication started to grow, we needed a solution to easily grow and extend the contents of our web presence. As we do not have the need to serve dynamic content, we decided to use a static site generator. Amongst a couple of others, we tried Hugo and it became immediately clear that we’d use Hugo going forward as it compiles super-fast, is intuitive to use and offers all the features we need.\nOur website which we launched a couple of weeks ago is still growing and new content is being added constantly. By using Hugo, this can be easily done by content authors writing markdown files without always having to touch HTML or CSS code. It is available in German only for the time being, an English version is in the works.\nHuge thanks to everyone involved in making Hugo a success.\n"},{"date":"2018-02-12","uri":"/showcase/linode/","title":"Linode Docs","content":"The documentation team at Linode has been writing guides since 2009, with the goal of helping new and experienced Linux users find the best tools and get the most out of their systems.\nAs our library grew into thousands of guides, we needed a fast static site generator with intuitive templating and the flexibility to extend Markdown without constantly writing HTML and CSS.\nHugo solved a lot of our growing pains with features like shortcodes, customizable URLs, LiveReload, and more. We have already brought our site build time down from minutes to just a few seconds, and we are excited to see what future developments in Hugo will bring.\nThank you to all the Hugo contributors and especially @bep for helping us with the adoption of Hugo.\n"},{"date":"2018-02-09","uri":"/showcase/hartwell-insurance/","title":"Hartwell Insurance","content":"We’ve just launched a shiny new website for Hartwell Insurance – I’m really proud of it. It was tackled in a different way to most previous Tomango site builds, using some fancy new tools and some vintage web standards.\nIt’s a multi-page, single-page (!) website written in Hugo, a static site generator built with performance as a first-class feature. I’ve outlined a load of benefits to Hugo \u0026 static sites here, in case you’re interested.\nIn essence, a static site generator pre-renders the whole site into HTML files and serves them like it’s 1995.\nThere’s no Apache or Node backend that does compilation at runtime, it’s all done at the build step. This means the server; Netlify in this case, only has to do one thing – serve files. Unsurprisingly, serving simple files is VERY quick.\nThe starter point was the Victor Hugo repository that Netlify have created. It let me dive in with Hugo, PostCSS, Browsersync and ES6 without setting up any tooling myself – always a win!\nI then took all the content from the design file and moved it into Markdown, putting shortcodes in where necessary. This site did need a number of custom shortcodes for the presentational elements like the expanding circles and full width backgrounds. But mostly it was just clean, semantic HTML with some CSS and JS enhancement thrown in.\nFor example, this two column layout shown below. I used CSS Columns with a break-after: always; on the \u003ch1\u003e. No multi-wrapper or difficult-to-clear shortcodes, just clean HTML.\nFor the ripple effects on the section headings, I used JS to prepend a \u003ccanvas\u003e element then animated it with RequestAnimationFrame. It adds a nice bit of movement on the page.\nOn the Hartwell Profitmaker section, I toyed with the idea of using Vue.js for the calculator, but after giving it some thought, I decided to code in Vanilla. The result, all of the site JS comes in at 3.2KB!\nThe plan was to host with Netlify and therefore get access to Netlify Forms. It meant spending 0 minutes on getting a backend set up – I could focus fully on the frontend.\nCache invalidation isn’t normally something I spend all that much time thinking about when building a site. But as this site was going to be a Progressive Web App, invalidating files would be important to ensure the site didn’t appear broken when we made changes. As I was using Victor-Hugo, I wasn’t really sure how to best tackle this and sadly spent far too many hours wrangling with Webpack and Gulp files to try and get hashed file names working nicely.\nThen; while I was waiting for a haircut, I read a Netlify blog post on how they do cache invalidation with HTTP2 and it promptly blew my mind.\nWhen you request an asset, they send an ETag in the headers which is a hash of the file. There’s also a header to tell the browser not to trust it’s own cache (which sounds a little bit bonkers).\nSo when you request the page, it opens a persistent HTTP2 connection up (so no new connections for file requests). When it gets to requesting that asset, the browser sends the ETag back to Netlify and they either return nothing if the ETag matches, or the new file with the new ETag. No app.klfjlkdsfjdslkfjdslkfdsj.js or app.js?v=20180112. Just a clean app.js with instant cache invalidation. Amazing.\nFinally, the Service Worker could be added. This turned out to be straightforward as the Netlify cache invalidation system solved most of the pain points. I went for a network-first, cache-fallback setup for both assets and HTML. This does mean flaky speeds are reliant on the page connection time, but given we’re on HTTP2, I’m hoping the persistent connection and tiny ETag size will keep it quick. For online connections, every request is up to date and instantly live after any update. Offline connections fall back to every assets’ last cached state. It seems to work really nicely, and there’s no need for an update prompt if assets have changed.\nThe results The WebPageTest results are looking good. The speed index is 456, 10x smaller than the average Alexa top 300,000 score.\nTestMySite.io is return ~2ms time to first byte from the CDN edge nodes. Lighthouse audits are also very promising. There’s still some improvement to be gained lazy-loading the images and inlining the CSS. I’m less excited about the second suggestion, but I’ll certainly look at some lazy-loading, especially as I’m already using IntersectionObserver for some animations.\nThe most encouraging result is how quick the site is around the world. Most Tomango clients (and their customers) are pretty local and almost exclusively UK-based. We have a dedicated server in Surrey that serves our market pretty well. It did take me by surprise just how much slower a connection from the USA, Australia and Japan to our server was. They’re waiting ~500ms just for the first byte, let alone downloading each asset.\nHartwell Insurance are a US company so by putting them on our server, we’d be instantly hampering their local response times by literally seconds. This was one of the main reasons for going with Netlify. They provide global CDN hosting that’s quick from anywhere in the world.\nThis project was such a blast to develop, it’s a real pleasure to put new technologies to good use in production, and to see real performance and usability benefits from them. Even using classic web methods of serving folders with files is fun when you’ve been using dynamic systems for a while – there’s something really pure about it.\nThis was originally posted on my website\n"},{"date":"2018-02-07","uri":"/showcase/template/","title":"Hugo Showcase Template","content":"Have a notable Hugo site1? We would love to feature it in this Showcase Section\nPlease:\nFork https://github.com/gohugoio/hugoDocs. Run hugo new content showcase/your-site. This will use the archetype bundle in the docs repo. Follow the instructions in the newly created page bundle. Create a new pull request in https://github.com/gohugoio/hugoDocs/pulls. We want this to show Hugo in its best light, so this is not for the average Hugo blog. In most cases the answer to “Is my site notable?” will be obvious, but if in doubt, create an issue with a link and some words, and we can discuss it. But if you have a site with an interesting Hugo story or a company site where the company itself is notable, you are most welcome. ↩︎\n"},{"date":"0001-01-01","uri":"/functions/resources/_common/postcss-windows-warning/","title":"","content":"If you are a Windows user, and the path to your project contains a space, you must place the PostCSS configuration within the package.json file. See this example and issue #7333.\n"},{"date":"0001-01-01","uri":"/methods/duration/abs/","title":"Abs","content":"{{ $d = time.ParseDuration \"-3h\" }} {{ $d.Abs }} → 3h0m0s "},{"date":"0001-01-01","uri":"/methods/time/add/","title":"Add","content":"{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $d1 = time.ParseDuration \"3h20m10s\" }} {{ $d2 = time.ParseDuration \"-3h20m10s\" }} {{ $t.Add $d1 }} → 2023-01-28 03:05:08 -0800 PST {{ $t.Add $d2 }} → 2023-01-27 20:24:48 -0800 PST "},{"date":"0001-01-01","uri":"/methods/time/adddate/","title":"AddDate","content":"{{ $d := \"2022-01-01\" | time.AsTime }} {{ $d.AddDate 0 0 1 | time.Format \"2006-01-02\" }} → 2022-01-02 {{ $d.AddDate 0 1 1 | time.Format \"2006-01-02\" }} → 2022-02-02 {{ $d.AddDate 1 1 1 | time.Format \"2006-01-02\" }} → 2023-02-02 {{ $d.AddDate -1 -1 -1 | time.Format \"2006-01-02\" }} → 2020-11-30 When adding months or years, Hugo normalizes the final time.Time value if the resulting day does not exist. For example, adding one month to 31 January produces 2 March or 3 March, depending on the year.\nSee this explanation from the Go team.\n{{ $d := \"2023-01-31\" | time.AsTime }} {{ $d.AddDate 0 1 0 | time.Format \"2006-01-02\" }} → 2023-03-03 {{ $d := \"2024-01-31\" | time.AsTime }} {{ $d.AddDate 0 1 0 | time.Format \"2006-01-02\" }} → 2024-03-02 {{ $d := \"2024-02-29\" | time.AsTime }} {{ $d.AddDate 1 0 0 | time.Format \"2006-01-02\" }} → 2025-03-01 "},{"date":"0001-01-01","uri":"/methods/time/after/","title":"After","content":"{{ $t1 := time.AsTime \"2023-01-01T17:00:00-08:00\" }} {{ $t2 := time.AsTime \"2010-01-01T17:00:00-08:00\" }} {{ $t1.After $t2 }} → true "},{"date":"0001-01-01","uri":"/methods/page/aliases/","title":"Aliases","content":"The Aliases method on a Page object returns the URL aliases as defined in front matter.\nFor example:\ncontent/about.md\ryaml\r \rtoml\r \rjson\r \r--- aliases: - /old-url - /really-old-url title: About ---\r+++ aliases = ['/old-url', '/really-old-url'] title = 'About' +++\r{ \"aliases\": [ \"/old-url\", \"/really-old-url\" ], \"title\": \"About\" } To list the aliases:\n{{ range .Aliases }} {{ . }} {{ end }} "},{"date":"0001-01-01","uri":"/methods/site/allpages/","title":"AllPages","content":"This method returns all page kinds in all languages. That includes the home page, section pages, taxonomy pages, term pages, and regular pages.\nIn most cases you should use the RegularPages method instead.\n{{ range .Site.AllPages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/page/alltranslations/","title":"AllTranslations","content":"With this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: en languages: de: contentDir: content/de languageCode: de-DE languageName: Deutsch weight: 2 en: contentDir: content/en languageCode: en-US languageName: English weight: 1 fr: contentDir: content/fr languageCode: fr-FR languageName: Français weight: 3 defaultContentLanguage = 'en' [languages] [languages.de] contentDir = 'content/de' languageCode = 'de-DE' languageName = 'Deutsch' weight = 2 [languages.en] contentDir = 'content/en' languageCode = 'en-US' languageName = 'English' weight = 1 [languages.fr] contentDir = 'content/fr' languageCode = 'fr-FR' languageName = 'Français' weight = 3 { \"defaultContentLanguage\": \"en\", \"languages\": { \"de\": { \"contentDir\": \"content/de\", \"languageCode\": \"de-DE\", \"languageName\": \"Deutsch\", \"weight\": 2 }, \"en\": { \"contentDir\": \"content/en\", \"languageCode\": \"en-US\", \"languageName\": \"English\", \"weight\": 1 }, \"fr\": { \"contentDir\": \"content/fr\", \"languageCode\": \"fr-FR\", \"languageName\": \"Français\", \"weight\": 3 } } } And this content:\ncontent/ ├── de/ │ ├── books/ │ │ ├── book-1.md │ │ └── book-2.md │ └── _index.md ├── en/ │ ├── books/ │ │ ├── book-1.md │ │ └── book-2.md │ └── _index.md ├── fr/ │ ├── books/ │ │ └── book-1.md │ └── _index.md └── _index.md And this template:\n{{ with .AllTranslations }} \u003cul\u003e {{ range . }} {{ $langName := or .Language.LanguageName .Language.Lang }} {{ $langCode := or .Language.LanguageCode .Language.Lang }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\" hreflang=\"{{ $langCode }}\"\u003e{{ .LinkTitle }} ({{ $langName }})\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Hugo will render this list on the “Book 1” page of each site:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/books/book-1/\" hreflang=\"en-US\"\u003eBook 1 (English)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/de/books/book-1/\" hreflang=\"de-DE\"\u003eBook 1 (Deutsch)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/fr/books/book-1/\" hreflang=\"fr-FR\"\u003eBook 1 (Français)\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e On the “Book 2” page of the English and German sites, Hugo will render this:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/books/book-1/\" hreflang=\"en-US\"\u003eBook 1 (English)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/de/books/book-1/\" hreflang=\"de-DE\"\u003eBook 1 (Deutsch)\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/taxonomy/alphabetical/","title":"Alphabetical","content":"The Alphabetical method on a Taxonomy object returns an ordered taxonomy, sorted alphabetically by term.\nWhile a Taxonomy object is a map, an ordered taxonomy is a slice, where each element is an object that contains the term and a slice of its weighted pages.\nBefore we can use a Taxonomy method, we need to capture a Taxonomy object.\nCapture a taxonomy object Consider this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: author: authors genre: genres [taxonomies] author = 'authors' genre = 'genres' { \"taxonomies\": { \"author\": \"authors\", \"genre\": \"genres\" } } And this content structure:\ncontent/ ├── books/ │ ├── and-then-there-were-none.md --\u003e genres: suspense │ ├── death-on-the-nile.md --\u003e genres: suspense │ └── jamaica-inn.md --\u003e genres: suspense, romance │ └── pride-and-prejudice.md --\u003e genres: romance └── _index.md To capture the “genres” taxonomy object from within any template, use the Taxonomies method on a Site object.\n{{ $taxonomyObject := .Site.Taxonomies.genres }} To capture the “genres” taxonomy object when rendering its page with a taxonomy template, use the Terms method on the page’s Data object:\nlayouts/_default/taxonomy.html\r{{ $taxonomyObject := .Data.Terms }}\rTo inspect the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") $taxonomyObject }}\u003c/pre\u003e Although the Alphabetical and ByCount methods provide a better data structure for ranging through the taxonomy, you can render the weighted pages by term directly from the Taxonomy object:\n{{ range $term, $weightedPages := $taxonomyObject }} \u003ch2\u003e\u003ca href=\"{{ .Page.RelPermalink }}\"\u003e{{ .Page.LinkTitle }}\u003c/a\u003e\u003c/h2\u003e \u003cul\u003e {{ range $weightedPages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} In the example above, the first anchor element is a link to the term page.\nGet the ordered taxonomy Now that we have captured the “genres” Taxonomy object, let’s get the ordered taxonomy sorted alphabetically by term:\n{{ $taxonomyObject.Alphabetical }} To reverse the sort order:\n{{ $taxonomyObject.Alphabetical.Reverse }} To inspect the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") $taxonomyObject.Alphabetical }}\u003c/pre\u003e An ordered taxonomy is a slice, where each element is an object that contains the term and a slice of its weighted pages.\nEach element of the slice provides these methods:\nCount (int) Returns the number of pages to which the term is assigned. Page (page.Page) Returns the term’s Page object, useful for linking to the term page. Pages (page.Pages) Returns a Pages object containing the Page objects to which the term is assigned, sorted by taxonomic weight. To sort or group, use any of the methods available to the Pages object. For example, sort by the last modification date. Term (string) Returns the term name. WeightedPages (page.WeightedPages) Returns a slice of weighted pages to which the term is assigned, sorted by taxonomic weight. The Pages method above is more flexible, allowing you to sort and group. Example With this template:\n{{ range $taxonomyObject.Alphabetical }} \u003ch2\u003e\u003ca href=\"{{ .Page.RelPermalink }}\"\u003e{{ .Page.LinkTitle }}\u003c/a\u003e ({{ .Count }})\u003c/h2\u003e \u003cul\u003e {{ range .Pages.ByTitle }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Hugo renders:\n\u003ch2\u003e\u003ca href=\"/genres/romance/\"\u003eromance\u003c/a\u003e (2)\u003c/h2\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"/books/jamaica-inn/\"\u003eJamaica inn\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/books/pride-and-prejudice/\"\u003ePride and prejudice\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003ch2\u003e\u003ca href=\"/genres/suspense/\"\u003esuspense\u003c/a\u003e (3)\u003c/h2\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"/books/and-then-there-were-none/\"\u003eAnd then there were none\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/books/death-on-the-nile/\"\u003eDeath on the nile\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/books/jamaica-inn/\"\u003eJamaica inn\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/alternativeoutputformats/","title":"AlternativeOutputFormats","content":"Hugo generates one or more files per page when building a site. For example, when rendering home, section, taxonomy, and term pages, Hugo generates an HTML file and an RSS file. Both HTML and RSS are built-in output formats. Create multiple output formats, and control generation based on page kind, or by enabling one or more output formats for one or more pages. See details.\nThe AlternativeOutputFormats method on a Page object returns a slice of OutputFormat objects, excluding the current output format, each representing one of the output formats enabled for the given page.. See details.\nMethods Get IDENTIFIER (any) Returns the OutputFormat object with the given identifier. MediaType (media.Type) Returns the media type of the output format. MediaType.MainType (string) Returns the main type of the output format’s media type. MediaType.SubType (string) Returns the subtype of the current format’s media type. Name (string) Returns the output identifier of the output format. Permalink (string) Returns the permalink of the page generated by the current output format. Rel (string) Returns the rel value of the output format, either the default or as defined in the site configuration. RelPermalink (string) Returns the relative permalink of the page generated by the current output format. Example Generate a link element in the \u003chead\u003e of each page for each of the alternative output formats:\n\u003chead\u003e ... {{ $title := printf \"%s | %s\" .Title site.Title }} {{ if .IsHome }} {{ $title = site.Title }} {{ end }} {{ range .AlternativeOutputFormats -}} {{ printf `\u003clink rel=%q type=%q href=%q title=%q\u003e` .Rel .MediaType.Type .Permalink $title | safeHTML }} {{ end }} ... \u003c/head\u003e On the site’s home page, Hugo renders this to:\n\u003clink rel=\"alternate\" type=\"application/rss+xml\" href=\"https://example.org/index.xml\" title=\"ABC Widgets, Inc.\"\u003e "},{"date":"0001-01-01","uri":"/methods/page/ancestors/","title":"Ancestors","content":"\rNew in v0.109.0\rA section is a top-level content directory, or any content directory with an _index.md file.\nWith this content structure:\ncontent/ ├── auctions/ │ ├── 2023-11/ │ │ ├── _index.md \u003c-- front matter: weight = 202311 │ │ ├── auction-1.md │ │ └── auction-2.md │ ├── 2023-12/ │ │ ├── _index.md \u003c-- front matter: weight = 202312 │ │ ├── auction-3.md │ │ └── auction-4.md │ ├── _index.md \u003c-- front matter: weight = 30 │ ├── bidding.md │ └── payment.md ├── books/ │ ├── _index.md \u003c-- front matter: weight = 10 │ ├── book-1.md │ └── book-2.md ├── films/ │ ├── _index.md \u003c-- front matter: weight = 20 │ ├── film-1.md │ └── film-2.md └── _index.md And this template:\n{{ range .Ancestors }} \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e {{ end }} On the November 2023 auctions page, Hugo renders:\n\u003ca href=\"/auctions/2023-11/\"\u003eAuctions in November 2023\u003c/a\u003e \u003ca href=\"/auctions/\"\u003eAuctions\u003c/a\u003e \u003ca href=\"/\"\u003eHome\u003c/a\u003e In the example above, notice that Hugo orders the ancestors from closest to furthest. This makes breadcrumb navigation simple:\n\u003cnav aria-label=\"breadcrumb\" class=\"breadcrumb\"\u003e \u003col\u003e {{ range .Ancestors.Reverse }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e \u003c/li\u003e {{ end }} \u003cli class=\"active\"\u003e \u003ca aria-current=\"page\" href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e \u003c/li\u003e \u003c/ol\u003e \u003c/nav\u003e With some CSS, the code above renders something like this, where each breadcrumb links to its page:\nHome \u003e Auctions \u003e Auctions in November 2023 \u003e Auction 1 "},{"date":"0001-01-01","uri":"/functions/go-template/and/","title":"and","content":"In Go templates, the falsy values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. Everything else is truthy.\n{{ and 1 0 \"\" }} → 0 (int) {{ and 1 false 0 }} → false (bool) {{ and 1 2 3 }} → 3 (int) {{ and \"a\" \"b\" \"c\" }} → c (string) {{ and \"a\" 1 true }} → true (bool) See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/methods/site/baseurl/","title":"BaseURL","content":"Site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rbaseURL: https://example.org/docs/ baseURL = 'https://example.org/docs/' { \"baseURL\": \"https://example.org/docs/\" } Template:\n{{ .Site.BaseURL }} → https://example.org/docs/ There is almost never a good reason to use this method in your templates. Its usage tends to be fragile due to misconfiguration.\nUse the absURL, absLangURL, relURL, or relLangURL functions instead.\n"},{"date":"0001-01-01","uri":"/methods/time/before/","title":"Before","content":"{{ $t1 := time.AsTime \"2023-01-01T17:00:00-08:00\" }} {{ $t2 := time.AsTime \"2030-01-01T17:00:00-08:00\" }} {{ $t1.Before $t2 }} → true "},{"date":"0001-01-01","uri":"/functions/go-template/block/","title":"block","content":"A block is shorthand for defining a template:\n{{ define \"name\" }} T1 {{ end }} and then executing it in place:\n{{ template \"name\" pipeline }} The typical use is to define a set of root templates that are then customized by redefining the block templates within.\nlayouts/_default/baseof.html\r\u003cbody\u003e \u003cmain\u003e {{ block \"main\" . }} {{ print \"default value if 'main' template is empty\" }} {{ end }} \u003c/main\u003e \u003c/body\u003e\rlayouts/_default/single.html\r{{ define \"main\" }} \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ .Content }} {{ end }}\rlayouts/_default/list.html\r{{ define \"main\" }} \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ .Content }} {{ range .Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{ end }}\rSee Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/functions/go-template/break/","title":"break","content":"This template code:\n{{ $s := slice \"foo\" \"bar\" \"baz\" }} {{ range $s }} {{ if eq . \"bar\" }} {{ break }} {{ end }} \u003cp\u003e{{ . }}\u003c/p\u003e {{ end }} Is rendered to:\n\u003cp\u003efoo\u003c/p\u003e See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/methods/site/builddrafts/","title":"BuildDrafts","content":"By default, draft pages are not published when building a site. You can change this behavior with a command line flag:\nhugo --buildDrafts Or by setting buildDrafts to true in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rbuildDrafts: true buildDrafts = true { \"buildDrafts\": true } Use the BuildDrafts method on a Site object to determine the current configuration:\n{{ .Site.BuildDrafts }} → true "},{"date":"0001-01-01","uri":"/methods/page/bundletype/","title":"BundleType","content":"A page bundle is a directory that encapsulates both content and associated resources. There are two types of page bundles: leaf bundles and branch bundles. See details.\nThe BundleType method on a Page object returns branch for branch bundles, leaf for leaf bundles, and an empty string if the page is not a page bundle.\ncontent/ ├── films/ │ ├── film-1/ │ │ ├── a.jpg │ │ └── index.md \u003c-- leaf bundle │ ├── _index.md \u003c-- branch bundle │ ├── b.jpg │ ├── film-2.md │ └── film-3.md └── _index.md \u003c-- branch bundle To get the value within a template:\n{{ .BundleType }} "},{"date":"0001-01-01","uri":"/methods/taxonomy/bycount/","title":"ByCount","content":"The ByCount method on a Taxonomy object returns an ordered taxonomy, sorted by the number of pages associated with each term.\nWhile a Taxonomy object is a map, an ordered taxonomy is a slice, where each element is an object that contains the term and a slice of its weighted pages.\nBefore we can use a Taxonomy method, we need to capture a Taxonomy object.\nCapture a taxonomy object Consider this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: author: authors genre: genres [taxonomies] author = 'authors' genre = 'genres' { \"taxonomies\": { \"author\": \"authors\", \"genre\": \"genres\" } } And this content structure:\ncontent/ ├── books/ │ ├── and-then-there-were-none.md --\u003e genres: suspense │ ├── death-on-the-nile.md --\u003e genres: suspense │ └── jamaica-inn.md --\u003e genres: suspense, romance │ └── pride-and-prejudice.md --\u003e genres: romance └── _index.md To capture the “genres” taxonomy object from within any template, use the Taxonomies method on a Site object.\n{{ $taxonomyObject := .Site.Taxonomies.genres }} To capture the “genres” taxonomy object when rendering its page with a taxonomy template, use the Terms method on the page’s Data object:\nlayouts/_default/taxonomy.html\r{{ $taxonomyObject := .Data.Terms }}\rTo inspect the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") $taxonomyObject }}\u003c/pre\u003e Although the Alphabetical and ByCount methods provide a better data structure for ranging through the taxonomy, you can render the weighted pages by term directly from the Taxonomy object:\n{{ range $term, $weightedPages := $taxonomyObject }} \u003ch2\u003e\u003ca href=\"{{ .Page.RelPermalink }}\"\u003e{{ .Page.LinkTitle }}\u003c/a\u003e\u003c/h2\u003e \u003cul\u003e {{ range $weightedPages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} In the example above, the first anchor element is a link to the term page.\nGet the ordered taxonomy Now that we have captured the “genres” Taxonomy object, let’s get the ordered taxonomy sorted by the number of pages associated with each term:\n{{ $taxonomyObject.ByCount }} To reverse the sort order:\n{{ $taxonomyObject.ByCount.Reverse }} To inspect the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") $taxonomyObject.ByCount }}\u003c/pre\u003e An ordered taxonomy is a slice, where each element is an object that contains the term and a slice of its weighted pages.\nEach element of the slice provides these methods:\nCount (int) Returns the number of pages to which the term is assigned. Page (page.Page) Returns the term’s Page object, useful for linking to the term page. Pages (page.Pages) Returns a Pages object containing the Page objects to which the term is assigned, sorted by taxonomic weight. To sort or group, use any of the methods available to the Pages object. For example, sort by the last modification date. Term (string) Returns the term name. WeightedPages (page.WeightedPages) Returns a slice of weighted pages to which the term is assigned, sorted by taxonomic weight. The Pages method above is more flexible, allowing you to sort and group. Example With this template:\n{{ range $taxonomyObject.ByCount }} \u003ch2\u003e\u003ca href=\"{{ .Page.RelPermalink }}\"\u003e{{ .Page.LinkTitle }}\u003c/a\u003e ({{ .Count }})\u003c/h2\u003e \u003cul\u003e {{ range .Pages.ByTitle }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Hugo renders:\n\u003ch2\u003e\u003ca href=\"/genres/suspense/\"\u003esuspense\u003c/a\u003e (3)\u003c/h2\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"/books/and-then-there-were-none/\"\u003eAnd then there were none\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/books/death-on-the-nile/\"\u003eDeath on the nile\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/books/jamaica-inn/\"\u003eJamaica inn\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003ch2\u003e\u003ca href=\"/genres/romance/\"\u003eromance\u003c/a\u003e (2)\u003c/h2\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"/books/jamaica-inn/\"\u003eJamaica inn\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/books/pride-and-prejudice/\"\u003ePride and prejudice\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/pages/bydate/","title":"ByDate","content":"When sorting by date, the value is determined by your site configuration, defaulting to the date field in front matter.\n{{ range .Pages.ByDate }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range .Pages.ByDate.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/pages/byexpirydate/","title":"ByExpiryDate","content":"When sorting by expiration date, the value is determined by your site configuration, defaulting to the expiryDate field in front matter.\n{{ range .Pages.ByExpiryDate }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range .Pages.ByExpiryDate.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/pages/bylanguage/","title":"ByLanguage","content":"{{ range .Site.AllPages.ByLanguage }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range .Site.AllPages.ByLanguage.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/pages/bylastmod/","title":"ByLastmod","content":"When sorting by last modification date, the value is determined by your site configuration, defaulting to the lastmod field in front matter.\n{{ range .Pages.ByLastmod }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range .Pages.ByLastmod.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/pages/bylength/","title":"ByLength","content":"{{ range .Pages.ByLength }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range .Pages.ByLength.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/pages/bylinktitle/","title":"ByLinkTitle","content":"{{ range .Pages.ByLinkTitle }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range .Pages.ByLinkTitle.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/menu/byname/","title":"ByName","content":"The Sort method returns the given menu with its entries sorted by name.\nConsider this menu definition:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: Services pageRef: /services weight: 10 - name: About pageRef: /about weight: 20 - name: Contact pageRef: /contact weight: 30 [menus] [[menus.main]] name = 'Services' pageRef = '/services' weight = 10 [[menus.main]] name = 'About' pageRef = '/about' weight = 20 [[menus.main]] name = 'Contact' pageRef = '/contact' weight = 30 { \"menus\": { \"main\": [ { \"name\": \"Services\", \"pageRef\": \"/services\", \"weight\": 10 }, { \"name\": \"About\", \"pageRef\": \"/about\", \"weight\": 20 }, { \"name\": \"Contact\", \"pageRef\": \"/contact\", \"weight\": 30 } ] } } To sort the entries by name:\n\u003cul\u003e {{ range .Site.Menus.main.ByName }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Hugo renders this to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/about/\"\u003eAbout\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/contact\"\u003eContact\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/services/\"\u003eServices\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e You can also sort menu entries using the sort function. For example, to sort by name in descending order:\n\u003cul\u003e {{ range sort .Site.Menus.main \"Name\" \"desc\" }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e When using the sort function with menu entries, specify any of the following keys: Identifier, Name, Parent, Post, Pre, Title, URL, or Weight.\n"},{"date":"0001-01-01","uri":"/methods/pages/byparam/","title":"ByParam","content":"If the given parameter is not present in front matter, Hugo will use the matching parameter in your site configuration if present.\n{{ range .Pages.ByParam \"author\" }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range (.Pages.ByParam \"author\").Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} If the targeted parameter is nested, access the field using dot notation:\n{{ range .Pages.ByParam \"author.last_name\" }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/pages/bypublishdate/","title":"ByPublishDate","content":"When sorting by publish date, the value is determined by your site configuration, defaulting to the publishDate field in front matter.\n{{ range .Pages.ByPublishDate }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range .Pages.ByPublishDate.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/pages/bytitle/","title":"ByTitle","content":"{{ range .Pages.ByTitle }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range .Pages.ByTitle.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/menu/byweight/","title":"ByWeight","content":"The ByWeight method returns the given menu with its entries sorted by weight, then by name, then by identifier. This is the default sort order.\nConsider this menu definition:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - identifier: about name: About pageRef: /about weight: 20 - identifier: services name: Services pageRef: /services weight: 10 - identifier: contact name: Contact pageRef: /contact weight: 30 [menus] [[menus.main]] identifier = 'about' name = 'About' pageRef = '/about' weight = 20 [[menus.main]] identifier = 'services' name = 'Services' pageRef = '/services' weight = 10 [[menus.main]] identifier = 'contact' name = 'Contact' pageRef = '/contact' weight = 30 { \"menus\": { \"main\": [ { \"identifier\": \"about\", \"name\": \"About\", \"pageRef\": \"/about\", \"weight\": 20 }, { \"identifier\": \"services\", \"name\": \"Services\", \"pageRef\": \"/services\", \"weight\": 10 }, { \"identifier\": \"contact\", \"name\": \"Contact\", \"pageRef\": \"/contact\", \"weight\": 30 } ] } } To sort the entries by weight, then by name, then by identifier:\n\u003cul\u003e {{ range .Site.Menus.main.ByWeight }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Hugo renders this to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/services/\"\u003eServices\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/about/\"\u003eAbout\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/contact\"\u003eContact\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e In the menu definition above, note that the identifier property is only required when two or more menu entries have the same name, or when localizing the name using translation tables.\nYou can also sort menu entries using the sort function. For example, to sort by weight in descending order:\n\u003cul\u003e {{ range sort .Site.Menus.main \"Weight\" \"desc\" }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e When using the sort function with menu entries, specify any of the following keys: Identifier, Name, Parent, Post, Pre, Title, URL, or Weight.\n"},{"date":"0001-01-01","uri":"/methods/pages/byweight/","title":"ByWeight","content":"Assign a weight to a page using the weight field in front matter. The weight must be a non-zero integer. Lighter items float to the top, while heavier items sink to the bottom. Unweighted or zero-weighted pages are placed at the end of the collection.\n{{ range .Pages.ByWeight }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} To sort in descending order:\n{{ range .Pages.ByWeight.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/functions/cast/tofloat/","title":"cast.ToFloat","content":"With a decimal (base 10) input:\n{{ float 11 }} → 11 (float64) {{ float \"11\" }} → 11 (float64) {{ float 11.1 }} → 11.1 (float64) {{ float \"11.1\" }} → 11.1 (float64) {{ float 11.9 }} → 11.9 (float64) {{ float \"11.9\" }} → 11.9 (float64) With a binary (base 2) input:\n{{ float 0b11 }} → 3 (float64) With an octal (base 8) input (use either notation):\n{{ float 011 }} → 9 (float64) {{ float \"011\" }} → 11 (float64) {{ float 0o11 }} → 9 (float64) With a hexadecimal (base 16) input:\n{{ float 0x11 }} → 17 (float64) "},{"date":"0001-01-01","uri":"/functions/cast/toint/","title":"cast.ToInt","content":"With a decimal (base 10) input:\n{{ int 11 }} → 11 (int) {{ int \"11\" }} → 11 (int) {{ int 11.1 }} → 11 (int) {{ int 11.9 }} → 11 (int) With a binary (base 2) input:\n{{ int 0b11 }} → 3 (int) {{ int \"0b11\" }} → 3 (int) With an octal (base 8) input (use either notation):\n{{ int 011 }} → 9 (int) {{ int \"011\" }} → 9 (int) {{ int 0o11 }} → 9 (int) {{ int \"0o11\" }} → 9 (int) With a hexadecimal (base 16) input:\n{{ int 0x11 }} → 17 (int) {{ int \"0x11\" }} → 17 (int) Values with a leading zero are octal (base 8). When casting a string representation of a decimal (base 10) number, remove leading zeros:\n{{ strings.TrimLeft \"0\" \"0011\" | int }} → 11\n"},{"date":"0001-01-01","uri":"/functions/cast/tostring/","title":"cast.ToString","content":"With a decimal (base 10) input:\n{{ string 11 }} → 11 (string) {{ string \"11\" }} → 11 (string) {{ string 11.1 }} → 11.1 (string) {{ string \"11.1\" }} → 11.1 (string) {{ string 11.9 }} → 11.9 (string) {{ string \"11.9\" }} → 11.9 (string) With a binary (base 2) input:\n{{ string 0b11 }} → 3 (string) {{ string \"0b11\" }} → 0b11 (string) With an octal (base 8) input (use either notation):\n{{ string 011 }} → 9 (string) {{ string \"011\" }} → 011 (string) {{ string 0o11 }} → 9 (string) {{ string \"0o11\" }} → 0o11 (string) With a hexadecimal (base 16) input:\n{{ string 0x11 }} → 17 (string) {{ string \"0x11\" }} → 0x11 (string) "},{"date":"0001-01-01","uri":"/methods/menu-entry/children/","title":"Children","content":"Use the Children method when rendering a nested menu.\nWith this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: Products pageRef: /product weight: 10 - name: Product 1 pageRef: /products/product-1 parent: Products weight: 1 - name: Product 2 pageRef: /products/product-2 parent: Products weight: 2 [menus] [[menus.main]] name = 'Products' pageRef = '/product' weight = 10 [[menus.main]] name = 'Product 1' pageRef = '/products/product-1' parent = 'Products' weight = 1 [[menus.main]] name = 'Product 2' pageRef = '/products/product-2' parent = 'Products' weight = 2 { \"menus\": { \"main\": [ { \"name\": \"Products\", \"pageRef\": \"/product\", \"weight\": 10 }, { \"name\": \"Product 1\", \"pageRef\": \"/products/product-1\", \"parent\": \"Products\", \"weight\": 1 }, { \"name\": \"Product 2\", \"pageRef\": \"/products/product-2\", \"parent\": \"Products\", \"weight\": 2 } ] } } And this template:\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e \u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ if .HasChildren }} \u003cul\u003e {{ range .Children }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} \u003c/li\u003e {{ end }} \u003c/ul\u003e Hugo renders this HTML:\n\u003cul\u003e \u003cli\u003e \u003ca href=\"/products/\"\u003eProducts\u003c/a\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"/products/product-1/\"\u003eProduct 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/products/product-2/\"\u003eProduct 2\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/codeowners/","title":"CodeOwners","content":"GitHub and GitLab support CODEOWNERS files. This file specifies the users responsible for developing and maintaining software and documentation. This definition can apply to the entire repository, specific directories, or to individual files. To learn more:\nGitHub CODEOWNERS documentation GitLab CODEOWNERS documentation Use the CodeOwners method on a Page object to determine the code owners for the given page.\nTo use the CodeOwners method you must enable access to your local Git repository:\nhugo.\ryaml\r \rtoml\r \rjson\r \renableGitInfo: true enableGitInfo = true { \"enableGitInfo\": true } Consider this project structure:\nmy-project/ ├── content/ │ ├── books/ │ │ └── les-miserables.md │ └── films/ │ └── the-hunchback-of-notre-dame.md └── CODEOWNERS And this CODEOWNERS file:\n* @jdoe /content/books/ @tjones /content/films/ @mrichards @rsmith The table below shows the slice of code owners returned for each file:\nPath Code owners books/les-miserables.md [@tjones] films/the-hunchback-of-notre-dame.md [@mrichards @rsmith] Render the code owners for each content page:\n{{ range .CodeOwners }} {{ . }} {{ end }} Combine this method with resources.GetRemote to retrieve names and avatars from your Git provider by querying their API.\n"},{"date":"0001-01-01","uri":"/functions/collections/after/","title":"collections.After","content":"The following shows after being used in conjunction with the slicefunction:\n{{ $data := slice \"one\" \"two\" \"three\" \"four\" }} \u003cul\u003e {{ range after 2 $data }} \u003cli\u003e{{ . }}\u003c/li\u003e {{ end }} \u003c/ul\u003e The template above is rendered to:\n\u003cul\u003e \u003cli\u003ethree\u003c/li\u003e \u003cli\u003efour\u003c/li\u003e \u003c/ul\u003e Example of after with first: 2nd–4th most recent articles You can use after in combination with the first function and Hugo’s powerful sorting methods. Let’s assume you have a list page at example.com/articles. You have 10 articles, but you want your templating for the list/section page to show only two rows:\nThe top row is titled “Featured” and shows only the most recently published article (i.e. by publishdate in the content files’ front matter). The second row is titled “Recent Articles” and shows only the 2nd- to 4th-most recently published articles. layouts/section/articles.html\r{{ define \"main\" }} \u003csection class=\"row featured-article\"\u003e \u003ch2\u003eFeatured Article\u003c/h2\u003e {{ range first 1 .Pages.ByPublishDate.Reverse }} \u003cheader\u003e \u003ch3\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h3\u003e \u003c/header\u003e \u003cp\u003e{{ .Description }}\u003c/p\u003e {{ end }} \u003c/section\u003e \u003cdiv class=\"row recent-articles\"\u003e \u003ch2\u003eRecent Articles\u003c/h2\u003e {{ range first 3 (after 1 .Pages.ByPublishDate.Reverse) }} \u003csection class=\"recent-article\"\u003e \u003cheader\u003e \u003ch3\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h3\u003e \u003c/header\u003e \u003cp\u003e{{ .Description }}\u003c/p\u003e \u003c/section\u003e {{ end }} \u003c/div\u003e {{ end }}\r"},{"date":"0001-01-01","uri":"/functions/collections/append/","title":"collections.Append","content":"This function appends all elements, excluding the last, to the last element. This allows pipe constructs as shown below.\nAppend a single element to a slice:\n{{ $s := slice \"a\" \"b\" }} {{ $s }} → [a b] {{ $s = $s | append \"c\" }} {{ $s }} → [a b c] Append two elements to a slice:\n{{ $s := slice \"a\" \"b\" }} {{ $s }} → [a b] {{ $s = $s | append \"c\" \"d\" }} {{ $s }} → [a b c d] Append two elements, as a slice, to a slice. This produces the same result as the previous example:\n{{ $s := slice \"a\" \"b\" }} {{ $s }} → [a b] {{ $s = $s | append (slice \"c\" \"d\") }} {{ $s }} → [a b c d] Start with an empty slice:\n{{ $s := slice }} {{ $s }} → [] {{ $s = $s | append \"a\" }} {{ $s }} → [a] {{ $s = $s | append \"b\" \"c\" }} {{ $s }} → [a b c] {{ $s = $s | append (slice \"d\" \"e\") }} {{ $s }} → [a b c d e] If you start with a slice of a slice:\n{{ $s := slice (slice \"a\" \"b\") }} {{ $s }} → [[a b]] {{ $s = $s | append (slice \"c\" \"d\") }} {{ $s }} → [[a b] [c d]] To create a slice of slices, starting with an empty slice:\n{{ $s := slice }} {{ $s }} → [] {{ $s = $s | append (slice (slice \"a\" \"b\")) }} {{ $s }} → [[a b]] {{ $s = $s | append (slice \"c\" \"d\") }} {{ $s }} → [[a b] [c d]] Although the elements in the examples above are strings, you can use the append function with any data type, including Pages. For example, on the home page of a corporate site, to display links to the two most recent press releases followed by links to the four most recent articles:\n{{ $p := where site.RegularPages \"Type\" \"press-releases\" | first 2 }} {{ $p = $p | append (where site.RegularPages \"Type\" \"articles\" | first 4) }} {{ with $p }} \u003cul\u003e {{ range . }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} "},{"date":"0001-01-01","uri":"/functions/collections/apply/","title":"collections.Apply","content":"The apply function takes three or more arguments, depending on the function being applied to the collection elements.\nThe first argument is the collection itself, the second argument is the function name, and the remaining arguments are passed to the function, with the string \".\" representing the collection element.\n{{ $s := slice \"hello\" \"world\" }} {{ $s = apply $s \"strings.FirstUpper\" \".\" }} {{ $s }} → [Hello World] {{ $s = apply $s \"strings.Replace\" \".\" \"l\" \"_\" }} {{ $s }} → [He__o Wor_d] "},{"date":"0001-01-01","uri":"/functions/collections/complement/","title":"collections.Complement","content":"To find the elements within $c3 that do not exist in $c1 or $c2:\n{{ $c1 := slice 3 }} {{ $c2 := slice 4 5 }} {{ $c3 := slice 1 2 3 4 5 }} {{ complement $c1 $c2 $c3 }} → [1 2] Make your code simpler to understand by using a chained pipeline:\n{{ $c3 | complement $c1 $c2 }} → [1 2] You can also use the complement function with page collections. Let’s say your site has five content types:\ncontent/ ├── blog/ ├── books/ ├── faqs/ ├── films/ └── songs/ To list everything except blog articles (blog) and frequently asked questions (faqs):\n{{ $blog := where site.RegularPages \"Type\" \"blog\" }} {{ $faqs := where site.RegularPages \"Type\" \"faqs\" }} {{ range site.RegularPages | complement $blog $faqs }} \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e {{ end }} Although the example above demonstrates the complement function, you could use the where function as well:\n{{ range where site.RegularPages \"Type\" \"not in\" (slice \"blog\" \"faqs\") }} \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e {{ end }} In this example we use the complement function to remove stop words from a sentence:\n{{ $text := \"The quick brown fox jumps over the lazy dog\" }} {{ $stopWords := slice \"a\" \"an\" \"in\" \"over\" \"the\" \"under\" }} {{ $filtered := split $text \" \" | complement $stopWords }} {{ delimit $filtered \" \" }} → The quick brown fox jumps lazy dog "},{"date":"0001-01-01","uri":"/functions/collections/delimit/","title":"collections.Delimit","content":"Delimit a slice:\n{{ $s := slice \"b\" \"a\" \"c\" }} {{ delimit $s \", \" }} → b, a, c {{ delimit $s \", \" \" and \"}} → b, a and c Delimit a map:\nThe delimit function sorts maps by key, returning the values.\n{{ $m := dict \"b\" 2 \"a\" 1 \"c\" 3 }} {{ delimit $m \", \" }} → 1, 2, 3 {{ delimit $m \", \" \" and \"}} → 1, 2 and 3 "},{"date":"0001-01-01","uri":"/functions/collections/dictionary/","title":"collections.Dictionary","content":"{{ $m := dict \"a\" 1 \"b\" 2 }} The above produces this data structure:\n{ \"a\": 1, \"b\": 2 } Note that the key can be either a string or a string slice. The latter is useful to create a deeply nested structure, e.g.:\n{{ $m := dict (slice \"a\" \"b\" \"c\") \"value\" }} The above produces this data structure:\n{ \"a\": { \"b\": { \"c\": \"value\" } } } Pass values to a partial template The partial below creates an SVG and expects fill, height and width from the caller:\nPartial definition layouts/partials/svgs/external-links.svg\r\u003csvg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fill=\"{{ .fill }}\" width=\"{{ .width }}\" height=\"{{ .height }}\" viewBox=\"0 0 32 32\" aria-label=\"External Link\"\u003e \u003cpath d=\"M25.152 16.576v5.696q0 2.144-1.504 3.648t-3.648 1.504h-14.848q-2.144 0-3.648-1.504t-1.504-3.648v-14.848q0-2.112 1.504-3.616t3.648-1.536h12.576q0.224 0 0.384 0.16t0.16 0.416v1.152q0 0.256-0.16 0.416t-0.384 0.16h-12.576q-1.184 0-2.016 0.832t-0.864 2.016v14.848q0 1.184 0.864 2.016t2.016 0.864h14.848q1.184 0 2.016-0.864t0.832-2.016v-5.696q0-0.256 0.16-0.416t0.416-0.16h1.152q0.256 0 0.416 0.16t0.16 0.416zM32 1.152v9.12q0 0.48-0.352 0.8t-0.8 0.352-0.8-0.352l-3.136-3.136-11.648 11.648q-0.16 0.192-0.416 0.192t-0.384-0.192l-2.048-2.048q-0.192-0.16-0.192-0.384t0.192-0.416l11.648-11.648-3.136-3.136q-0.352-0.352-0.352-0.8t0.352-0.8 0.8-0.352h9.12q0.48 0 0.8 0.352t0.352 0.8z\"\u003e\u003c/path\u003e \u003c/svg\u003e\rPartial call The fill, height and width values can be stored in one object with dict and passed to the partial:\nlayouts/_default/list.html\r{{ partial \"svgs/external-links.svg\" (dict \"fill\" \"#01589B\" \"width\" 10 \"height\" 20 ) }}\r"},{"date":"0001-01-01","uri":"/functions/collections/first/","title":"collections.First","content":"{{ range first 5 .Pages }} {{ .Render \"summary\" }} {{ end }} Set N to zero to return an empty collection.\n{{ $emptyPageCollection := first 0 .Pages}} Use first and where together.\n{{ range where .Pages \"Section\" \"articles\" | first 5 }} {{ .Render \"summary\" }} {{ end }} "},{"date":"0001-01-01","uri":"/functions/collections/group/","title":"collections.Group","content":"{{ $new := .Site.RegularPages | first 10 | group \"New\" }} {{ $old := .Site.RegularPages | last 10 | group \"Old\" }} {{ $groups := slice $new $old }} {{ range $groups }} \u003ch3\u003e{{ .Key }}{{/* Prints \"New\", \"Old\" */}}\u003c/h3\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e \u003cdiv class=\"meta\"\u003e{{ .Date.Format \"Mon, Jan 2, 2006\" }}\u003c/div\u003e \u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} The page group you get from group is of the same type you get from the built-in group methods in Hugo. The above example can be paginated.\n"},{"date":"0001-01-01","uri":"/functions/collections/in/","title":"collections.In","content":"The SET can be an array, slice, or string.\n{{ $s := slice \"a\" \"b\" \"c\" }} {{ in $s \"b\" }} → true {{ $s := slice 1 2 3 }} {{ in $s 2 }} → true {{ $s := slice 1.11 2.22 3.33 }} {{ in $s 2.22 }} → true {{ $s := \"abc\" }} {{ in $s \"b\" }} → true "},{"date":"0001-01-01","uri":"/functions/collections/indexfunction/","title":"collections.Index","content":"The index functions returns the result of indexing its first argument by the following arguments. Each indexed item must be a map or a slice, e.g.:\n{{ $slice := slice \"a\" \"b\" \"c\" }} {{ index $slice 0 }} → a {{ index $slice 1 }} → b {{ $map := dict \"a\" 100 \"b\" 200 }} {{ index $map \"b\" }} → 200 The function takes multiple indices as arguments, and this can be used to get nested values, e.g.:\n{{ $map := dict \"a\" 100 \"b\" 200 \"c\" (slice 10 20 30) }} {{ index $map \"c\" 1 }} → 20 {{ $map := dict \"a\" 100 \"b\" 200 \"c\" (dict \"d\" 10 \"e\" 20) }} {{ index $map \"c\" \"e\" }} → 20 You may write multiple indices as a slice:\n{{ $map := dict \"a\" 100 \"b\" 200 \"c\" (dict \"d\" 10 \"e\" 20) }} {{ $slice := slice \"c\" \"e\" }} {{ index $map $slice }} → 20 Example: load data from a path based on front matter parameters Assume you want to add a location = \"\" field to your front matter for every article written in content/vacations/. You want to use this field to populate information about the location at the bottom of the article in your single.html template. You also have a directory in data/locations/ that looks like the following:\ndata/ └── locations/ ├── abilene.toml ├── chicago.toml ├── oslo.toml └── provo.toml Here is an example:\ndata/locations/oslo.\ryaml\r \rtoml\r \rjson\r \rpop_city: 658390 pop_metro: 1717900 website: https://www.oslo.kommune.no pop_city = 658390 pop_metro = 1717900 website = 'https://www.oslo.kommune.no' { \"pop_city\": 658390, \"pop_metro\": 1717900, \"website\": \"https://www.oslo.kommune.no\" } The example we will use will be an article on Oslo, whose front matter should be set to exactly the same name as the corresponding file name in data/locations/:\ncontent/articles/oslo.md\ryaml\r \rtoml\r \rjson\r \r--- location: oslo title: My Norwegian Vacation ---\r+++ location = 'oslo' title = 'My Norwegian Vacation' +++\r{ \"location\": \"oslo\", \"title\": \"My Norwegian Vacation\" } The content of oslo.toml can be accessed from your template using the following node path: .Site.Data.locations.oslo. However, the specific file you need is going to change according to the front matter.\nThis is where the index function is needed. index takes 2 arguments in this use case:\nThe node path A string corresponding to the desired data; e.g.— {{ index .Site.Data.locations \"oslo\" }} The variable for .Params.location is a string and can therefore replace oslo in the example above:\n{{ index .Site.Data.locations .Params.location }} =\u003e map[website:https://www.oslo.kommune.no pop_city:658390 pop_metro:1717900] Now the call will return the specific file according to the location specified in the content’s front matter, but you will likely want to write specific properties to the template. You can do this by continuing down the node path via dot notation (.):\n{{ (index .Site.Data.locations .Params.location).pop_city }} =\u003e 658390 "},{"date":"0001-01-01","uri":"/functions/collections/intersect/","title":"collections.Intersect","content":"A useful example is to use it as AND filters when combined with where:\n{{ $pages := where .Site.RegularPages \"Type\" \"not in\" (slice \"page\" \"about\") }} {{ $pages := $pages | union (where .Site.RegularPages \"Params.pinned\" true) }} {{ $pages := $pages | intersect (where .Site.RegularPages \"Params.images\" \"!=\" nil) }} The above fetches regular pages not of page or about type unless they are pinned. And finally, we exclude all pages with no images set in Page parameters.\nSee union for OR.\n"},{"date":"0001-01-01","uri":"/functions/collections/isset/","title":"collections.IsSet","content":"For example, consider this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: showHeroImage: false [params] showHeroImage = false { \"params\": { \"showHeroImage\": false } } It the value of showHeroImage is true, we can detect that it exists using either if or with:\n{{ if site.Params.showHeroImage }} {{ site.Params.showHeroImage }} → true {{ end }} {{ with site.Params.showHeroImage }} {{ . }} → true {{ end }} But if the value of showHeroImage is false, we can’t use either if or with to detect its existence. In this case, you must use the isset function:\n{{ if isset site.Params \"showheroimage\" }} \u003cp\u003eThe showHeroImage parameter is set to {{ site.Params.showHeroImage }}.\u003cp\u003e {{ end }} When using the isset function you must reference the key using lower case. See the previous example.\n"},{"date":"0001-01-01","uri":"/functions/collections/keyvals/","title":"collections.KeyVals","content":"The primary application for this function is the definition of the namedSlices parameter in the options map passed to the Related method on the Pages object.\nSee related content.\n{{ $kv := keyVals \"foo\" \"a\" \"b\" \"c\" }} The resulting data structure is:\n{ \"Key\": \"foo\", \"Values\": [ \"a\", \"b\", \"c\" ] } To extract the key and values:\n{{ $kv.Key }} → foo {{ $kv.Values }} → [a b c] "},{"date":"0001-01-01","uri":"/functions/collections/last/","title":"collections.Last","content":"{{ range last 10 .Pages }} {{ .Render \"summary\" }} {{ end }} Set N to zero to return an empty collection.\n{{ $emptyPageCollection := last 0 .Pages}} Use last and [where] together.\n{{ range where .Pages \"Section\" \"articles\" | last 5 }} {{ .Render \"summary\" }} {{ end }} "},{"date":"0001-01-01","uri":"/functions/collections/merge/","title":"collections.Merge","content":"Returns the result of merging two or more maps from left to right. If a key already exists, merge updates its value. If a key is absent, merge inserts the value under the new key.\nKey handling is case-insensitive.\nThe following examples use these map definitions:\n{{ $m1 := dict \"x\" \"foo\" }} {{ $m2 := dict \"x\" \"bar\" \"y\" \"wibble\" }} {{ $m3 := dict \"x\" \"baz\" \"y\" \"wobble\" \"z\" (dict \"a\" \"huey\") }} Example 1\n{{ $merged := merge $m1 $m2 $m3 }} {{ $merged.x }} → baz {{ $merged.y }} → wobble {{ $merged.z.a }} → huey Example 2\n{{ $merged := merge $m3 $m2 $m1 }} {{ $merged.x }} → foo {{ $merged.y }} → wibble {{ $merged.z.a }} → huey Example 3\n{{ $merged := merge $m2 $m3 $m1 }} {{ $merged.x }} → foo {{ $merged.y }} → wobble {{ $merged.z.a }} → huey Example 4\n{{ $merged := merge $m1 $m3 $m2 }} {{ $merged.x }} → bar {{ $merged.y }} → wibble {{ $merged.z.a }} → huey Regardless of depth, merging only applies to maps. For slices, use append.\n"},{"date":"0001-01-01","uri":"/functions/collections/newscratch/","title":"collections.NewScratch","content":"The collections.NewScratch function creates a locally scoped scratch pad to store and manipulate data. To create a scratch pad that is attached to a Page object, use the Scratch or Store method.\nMethods Set Sets the value of a given key.\n{{ $s := newScratch }} {{ $s.Set \"greeting\" \"Hello\" }} Get Gets the value of a given key.\n{{ $s := newScratch }} {{ $s.Set \"greeting\" \"Hello\" }} {{ $s.Get \"greeting\" }} → Hello Add Adds a given value to existing value(s) of the given key.\nFor single values, Add accepts values that support Go’s + operator. If the first Add for a key is an array or slice, the following adds will be appended to that list.\n{{ $s := newScratch }} {{ $s.Set \"greeting\" \"Hello\" }} {{ $s.Add \"greeting\" \"Welcome\" }} {{ $s.Get \"greeting\" }} → HelloWelcome {{ $s := newScratch }} {{ $s.Set \"total\" 3 }} {{ $s.Add \"total\" 7 }} {{ $s.Get \"total\" }} → 10 {{ $s := newScratch }} {{ $s.Set \"greetings\" (slice \"Hello\") }} {{ $s.Add \"greetings\" (slice \"Welcome\" \"Cheers\") }} {{ $s.Get \"greetings\" }} → [Hello Welcome Cheers] SetInMap Takes a key, mapKey and value and adds a map of mapKey and value to the given key.\n{{ $s := newScratch }} {{ $s.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ $s.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ $s.Get \"greetings\" }} → map[english:Hello french:Bonjour] DeleteInMap Takes a key and mapKey and removes the map of mapKey from the given key.\n{{ $s := newScratch }} {{ $s.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ $s.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ $s.DeleteInMap \"greetings\" \"english\" }} {{ $s.Get \"greetings\" }} → map[french:Bonjour] GetSortedMapValues Returns an array of values from key sorted by mapKey.\n{{ $s := newScratch }} {{ $s.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ $s.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ $s.GetSortedMapValues \"greetings\" }} → [Hello Bonjour] Delete Removes the given key.\n{{ $s := newScratch }} {{ $s.Set \"greeting\" \"Hello\" }} {{ $s.Delete \"greeting\" }} Values Returns the raw backing map. Do not use with Scratch or Store methods on a Page object due to concurrency issues.\n{{ $s := newScratch }} {{ $s.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ $s.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ $map := $s.Values }} "},{"date":"0001-01-01","uri":"/functions/collections/querify/","title":"collections.Querify","content":"querify takes a set or slice of key-value pairs and returns a query string that can be appended to a URL.\nThe following examples create a link to a search results page on Google.\n\u003ca href=\"https://www.google.com?{{ (querify \"q\" \"test\" \"page\" 3) | safeURL }}\"\u003eSearch\u003c/a\u003e {{ $qs := slice \"q\" \"test\" \"page\" 3 }} \u003ca href=\"https://www.google.com?{{ (querify $qs) | safeURL }}\"\u003eSearch\u003c/a\u003e Both of these examples render the following HTML:\n\u003ca href=\"https://www.google.com?page=3\u0026q=test\"\u003eSearch\u003c/a\u003e "},{"date":"0001-01-01","uri":"/functions/collections/reverse/","title":"collections.Reverse","content":"{{ slice 2 1 3 | collections.Reverse }} → [3 1 2] "},{"date":"0001-01-01","uri":"/functions/collections/seq/","title":"collections.Seq","content":"{{ seq 2 }} → [1 2] {{ seq 0 2 }} → [0 1 2] {{ seq -2 2 }} → [-2 -1 0 1 2] {{ seq -2 2 2 }} → [-2 0 2] A contrived example of iterating over a sequence of integers:\n{{ $product := 1 }} {{ range seq 4 }} {{ $product = mul $product . }} {{ end }} {{ $product }} → 24 The slice created by the seq function is limited to 2000 elements.\n"},{"date":"0001-01-01","uri":"/functions/collections/shuffle/","title":"collections.Shuffle","content":"{{ shuffle (seq 1 2 3) }} → [3 1 2] {{ shuffle (slice \"a\" \"b\" \"c\") }} → [b a c] The result will vary from one build to the next.\n"},{"date":"0001-01-01","uri":"/functions/collections/slice/","title":"collections.Slice","content":"{{ $s := slice \"a\" \"b\" \"c\" }} {{ $s }} → [a b c] "},{"date":"0001-01-01","uri":"/functions/collections/sort/","title":"collections.Sort","content":"The KEY is optional when sorting slices in ascending order, otherwise it is required. When sorting slices, use the literal value in place of the KEY. See examples below.\nThe ORDER may be either asc (ascending) or desc (descending). The default sort order is ascending.\nSort a slice The examples below assume this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: grades: - b - a - c [params] grades = ['b', 'a', 'c'] { \"params\": { \"grades\": [ \"b\", \"a\", \"c\" ] } } Ascending order Sort slice elements in ascending order using either of these constructs:\n{{ sort site.Params.grades }} → [a b c] {{ sort site.Params.grades \"value\" \"asc\" }} → [a b c] In the examples above, value is the KEY representing the value of the slice element.\nDescending order Sort slice elements in descending order:\n{{ sort site.Params.grades \"value\" \"desc\" }} → [c b a] In the example above, value is the KEY representing the value of the slice element.\nSort a map The examples below assume this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: authors: a: firstName: Marius lastName: Pontmercy b: firstName: Victor lastName: Hugo c: firstName: Jean lastName: Valjean [params] [params.authors] [params.authors.a] firstName = 'Marius' lastName = 'Pontmercy' [params.authors.b] firstName = 'Victor' lastName = 'Hugo' [params.authors.c] firstName = 'Jean' lastName = 'Valjean' { \"params\": { \"authors\": { \"a\": { \"firstName\": \"Marius\", \"lastName\": \"Pontmercy\" }, \"b\": { \"firstName\": \"Victor\", \"lastName\": \"Hugo\" }, \"c\": { \"firstName\": \"Jean\", \"lastName\": \"Valjean\" } } } } When sorting maps, the KEY argument must be lowercase.\nAscending order Sort map objects in ascending order using either of these constructs:\n{{ range sort site.Params.authors \"firstname\" }} {{ .firstName }} {{ end }} {{ range sort site.Params.authors \"firstname\" \"asc\" }} {{ .firstName }} {{ end }} These produce:\nJean Marius Victor Descending order Sort map objects in descending order:\n{{ range sort site.Params.authors \"firstname\" \"desc\" }} {{ .firstName }} {{ end }} This produces:\nVictor Marius Jean First level key removal Hugo removes the first level keys when sorting a map.\nOriginal map:\n{ \"felix\": { \"breed\": \"malicious\", \"type\": \"cat\" }, \"spot\": { \"breed\": \"boxer\", \"type\": \"dog\" } } After sorting:\n[ { \"breed\": \"malicious\", \"type\": \"cat\" }, { \"breed\": \"boxer\", \"type\": \"dog\" } ] Sort a page collection Although you can use the sort function to sort a page collection, Hugo provides sorting and grouping methods as well.\nIn this contrived example, sort the site’s regular pages by .Type in descending order:\n{{ range sort site.RegularPages \"Type\" \"desc\" }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/functions/collections/symdiff/","title":"collections.SymDiff","content":"Example:\n{{ slice 1 2 3 | symdiff (slice 3 4) }} → [1 2 4] Also see https://en.wikipedia.org/wiki/Symmetric_difference.\n"},{"date":"0001-01-01","uri":"/functions/collections/union/","title":"collections.Union","content":"Given two arrays (or slices) A and B, this function will return a new array that contains the elements or objects that belong to either A or to B or to both.\n{{ union (slice 1 2 3) (slice 3 4 5) }} \u003c!-- returns [1 2 3 4 5] --\u003e {{ union (slice 1 2 3) nil }} \u003c!-- returns [1 2 3] --\u003e {{ union nil (slice 1 2 3) }} \u003c!-- returns [1 2 3] --\u003e {{ union nil nil }} \u003c!-- returns an error because both arrays/slices have to be of the same type --\u003e OR filter in where query This is also very useful to use as OR filters when combined with where:\n{{ $pages := where .Site.RegularPages \"Type\" \"not in\" (slice \"page\" \"about\") }} {{ $pages = $pages | union (where .Site.RegularPages \"Params.pinned\" true) }} {{ $pages = $pages | intersect (where .Site.RegularPages \"Params.images\" \"!=\" nil) }} The above fetches regular pages not of page or about type unless they are pinned. And finally, we exclude all pages with no images set in Page parameters.\nSee intersect for AND.\n"},{"date":"0001-01-01","uri":"/functions/collections/uniq/","title":"collections.Uniq","content":"{{ slice 1 3 2 1 | uniq }} → [1 3 2] "},{"date":"0001-01-01","uri":"/functions/collections/where/","title":"collections.Where","content":"The where function returns the given collection, removing elements that do not satisfy the comparison condition. The comparison condition is comprised of the KEY, OPERATOR, and VALUE arguments:\ncollections.Where COLLECTION KEY [OPERATOR] VALUE -------------------- comparison condition Hugo will test for equality if you do not provide an OPERATOR argument. For example:\n{{ $pages := where .Site.RegularPages \"Section\" \"books\" }} {{ $books := where .Site.Data.books \"genres\" \"suspense\" }} Arguments The where function takes three or four arguments. The OPERATOR argument is optional.\nCOLLECTION (any) A page collection or a slice of maps. KEY (string) The key of the page or map value to compare with VALUE. With page collections, commonly used comparison keys are Section, Type, and Params. To compare with a member of the page Params map, chain the subkey as shown below: {{ $result := where .Site.RegularPages \"Params.foo\" \"bar\" }} OPERATOR (string) The logical comparison operator. VALUE (any) The value with which to compare. The values to compare must have comparable data types. For example: Comparison Result \"123\" \"eq\" \"123\" true \"123\" \"eq\" 123 false false \"eq\" \"false\" false false \"eq\" false true When one or both of the values to compare is a slice, use the in, not in, or intersect operators as described below.\nOperators Use any of the following logical operators:\n=, ==, eq (bool) Reports whether the given field value is equal to VALUE. !=, \u003c\u003e, ne (bool) Reports whether the given field value is not equal to VALUE. \u003e=, ge (bool) Reports whether the given field value is greater than or equal to VALUE. \u003e, gt true Reports whether the given field value is greater than VALUE. \u003c=, le (bool) Reports whether the given field value is less than or equal to VALUE. \u003c, lt (bool) Reports whether the given field value is less than VALUE. in (bool) Reports whether the given field value is a member of VALUE. Compare string to slice, or string to string. See details. not in (bool) Reports whether the given field value is not a member of VALUE. Compare string to slice, or string to string. See details. intersect (bool) Reports whether the given field value (a slice) contains one or more elements in common with VALUE. See details. like New in v0.116.0\r(bool) Reports whether the given field value matches the regular expression specified in VALUE. Use the like operator to compare string values. The like operator returns false when comparing other data types to the regular expression. The examples below perform comparisons within a page collection, but the same comparisons are applicable to a slice of maps.\nString comparison Compare the value of the given field to a string:\n{{ $pages := where .Site.RegularPages \"Section\" \"eq\" \"books\" }} {{ $pages := where .Site.RegularPages \"Section\" \"ne\" \"books\" }} Numeric comparison Compare the value of the given field to an int or float:\n{{ $books := where site.RegularPages \"Section\" \"eq\" \"books\" }} {{ $pages := where $books \"Params.price\" \"eq\" 42 }} {{ $pages := where $books \"Params.price\" \"ne\" 42.67 }} {{ $pages := where $books \"Params.price\" \"ge\" 42 }} {{ $pages := where $books \"Params.price\" \"gt\" 42.67 }} {{ $pages := where $books \"Params.price\" \"le\" 42 }} {{ $pages := where $books \"Params.price\" \"lt\" 42.67 }} Boolean comparison Compare the value of the given field to a bool:\n{{ $books := where site.RegularPages \"Section\" \"eq\" \"books\" }} {{ $pages := where $books \"Params.fiction\" \"eq\" true }} {{ $pages := where $books \"Params.fiction\" \"eq\" false }} {{ $pages := where $books \"Params.fiction\" \"ne\" true }} {{ $pages := where $books \"Params.fiction\" \"ne\" false }} Member comparison Compare a scalar to a slice.\nFor example, to return a collection of pages where the color page parameter is either “red” or “yellow”:\n{{ $fruit := where site.RegularPages \"Section\" \"eq\" \"fruit\" }} {{ $colors := slice \"red\" \"yellow\" }} {{ $pages := where $fruit \"Params.color\" \"in\" $colors }} To return a collection of pages where the “color” page parameter is neither “red” nor “yellow”:\n{{ $fruit := where site.RegularPages \"Section\" \"eq\" \"fruit\" }} {{ $colors := slice \"red\" \"yellow\" }} {{ $pages := where $fruit \"Params.color\" \"not in\" $colors }} Intersection comparison Compare a slice to a slice, returning collection elements with common values. This is frequently used when comparing taxonomy terms.\nFor example, to return a collection of pages where any of the terms in the “genres” taxonomy are “suspense” or “romance”:\n{{ $books := where site.RegularPages \"Section\" \"eq\" \"books\" }} {{ $genres := slice \"suspense\" \"romance\" }} {{ $pages := where $books \"Params.genres\" \"intersect\" $genres }} Regular expression comparison New in v0.116.0\rTo return a collection of pages where the “author” page parameter begins with either “victor” or “Victor”:\n{{ $pages := where .Site.RegularPages \"Params.author\" \"like\" `(?i)^victor` }} When specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.\nGo’s regular expression package implements the RE2 syntax. The RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats. Note that the RE2 \\C escape sequence is not supported.\nUse the like operator to compare string values. Comparing other data types will result in an empty collection.\nDate comparison Predefined dates There are four predefined front matter dates: date, publishDate, lastmod, and expiryDate. Regardless of the front matter data format (TOML, YAML, or JSON) these are time.Time values, allowing precise comparisons.\nFor example, to return a collection of pages that were created before the current year:\n{{ $startOfYear := time.AsTime (printf \"%d-01-01\" now.Year) }} {{ $pages := where .Site.RegularPages \"Date\" \"lt\" $startOfYear }} Custom dates With custom front matter dates, the comparison depends on the front matter data format (TOML, YAML, or JSON).\nUsing TOML for pages with custom front matter dates enables precise date comparisons.\nWith TOML, date values are first-class citizens. TOML has a date data type while JSON and YAML do not. If you quote a TOML date, it is a string. If you do not quote a TOML date value, it is time.Time value, enabling precise comparisons.\nIn the TOML example below, note that the event date is not quoted.\ncontent/events/2024-user-conference.md\r+++ title = '2024 User Conference\" eventDate = 2024-04-01 +++\rTo return a collection of future events:\n{{ $events := where .Site.RegularPages \"Type\" \"events\" }} {{ $futureEvents := where $events \"Params.eventDate\" \"gt\" now }} When working with YAML or JSON, or quoted TOML values, custom dates are strings; you cannot compare them with time.Time values. String comparisons may be possible if the custom date layout is consistent from one page to the next. However, to be safe, filter the pages by ranging through the collection:\n{{ $events := where .Site.RegularPages \"Type\" \"events\" }} {{ $futureEvents := slice }} {{ range $events }} {{ if gt (time.AsTime .Params.eventDate) now }} {{ $futureEvents = $futureEvents | append . }} {{ end }} {{ end }} Nil comparison To return a collection of pages where the “color” parameter is present in front matter, compare to nil:\n{{ $pages := where .Site.RegularPages \"Params.color\" \"ne\" nil }} To return a collection of pages where the “color” parameter is not present in front matter, compare to nil:\n{{ $pages := where .Site.RegularPages \"Params.color\" \"eq\" nil }} In both examples above, note that nil is not quoted.\nNested comparison These are equivalent:\n{{ $pages := where .Site.RegularPages \"Type\" \"tutorials\" }} {{ $pages = where $pages \"Params.level\" \"eq\" \"beginner\" }} {{ $pages := where (where .Site.RegularPages \"Type\" \"tutorials\") \"Params.level\" \"eq\" \"beginner\" }} Portable section comparison Useful for theme authors, avoid hardcoding section names by using the where function with the MainSections method on a Site object.\n{{ $pages := where .Site.RegularPages \"Section\" \"in\" .Site.MainSections }} With this construct, a theme author can instruct users to specify their main sections in the site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: mainSections: - blog - galleries [params] mainSections = ['blog', 'galleries'] { \"params\": { \"mainSections\": [ \"blog\", \"galleries\" ] } } If params.mainSections is not defined in the site configuration, the MainSections method returns a slice with one element—the top level section with the most pages.\nBoolean/undefined comparison Consider this site content:\ncontent/ ├── posts/ │ ├── _index.md │ ├── post-1.md \u003c-- front matter: exclude = false │ ├── post-2.md \u003c-- front matter: exclude = true │ └── post-3.md \u003c-- front matter: exclude not defined └── _index.md The first two pages have an “exclude” field in front matter, but the last page does not. When testing for equality, the third page is excluded from the result. When testing for inequality, the third page is included in the result.\nEquality test This template:\n\u003cul\u003e {{ range where .Site.RegularPages \"Params.exclude\" \"eq\" false }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Is rendered to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/posts/post-1/\"\u003ePost 1\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e This template:\n\u003cul\u003e {{ range where .Site.RegularPages \"Params.exclude\" \"eq\" true }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Is rendered to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/posts/post-2/\"\u003ePost 2\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e Inequality test This template:\n\u003cul\u003e {{ range where .Site.RegularPages \"Params.exclude\" \"ne\" false }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Is rendered to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/posts/post-2/\"\u003ePost 2\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/posts/post-3/\"\u003ePost 3\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e This template:\n\u003cul\u003e {{ range where .Site.RegularPages \"Params.exclude\" \"ne\" true }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Is rendered to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/posts/post-1/\"\u003ePost 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/posts/post-3/\"\u003ePost 3\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e To exclude a page with an undefined field from a boolean inequality test:\nCreate a collection using a boolean comparison Create a collection using a nil comparison Subtract the second collection from the first collection using the collections.Complement function. This template:\n{{ $p1 := where .Site.RegularPages \"Params.exclude\" \"ne\" true }} {{ $p2 := where .Site.RegularPages \"Params.exclude\" \"eq\" nil }} \u003cul\u003e {{ range $p1 | complement $p2 }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Is rendered to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/posts/post-1/\"\u003ePost 1\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e This template:\n{{ $p1 := where .Site.RegularPages \"Params.exclude\" \"ne\" false }} {{ $p2 := where .Site.RegularPages \"Params.exclude\" \"eq\" nil }} \u003cul\u003e {{ range $p1 | complement $p2 }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Is rendered to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/posts/post-1/\"\u003ePost 2\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/resource/colors/","title":"Colors","content":"\rNew in v0.104.0\r{{ with resources.Get \"images/a.jpg\" }} {{ .Colors }} → [#bebebd #514947 #768a9a #647789 #90725e #a48974] {{ end }} This method is fast, but if you also scale down your images, it would be good for performance to extract the colors from the scaled image.\nUse this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/functions/compare/conditional/","title":"compare.Conditional","content":"The CONTROL argument is a boolean value that indicates whether the function should return ARG1 or ARG2. If CONTROL is true, the function returns ARG1. Otherwise, the function returns ARG2.\n{{ $qty := 42 }} {{ cond (le $qty 3) \"few\" \"many\" }} → many The CONTROL argument must be either true or false. To cast a non-boolean value to boolean, pass it through the not operator twice.\n{{ cond (42 | not | not) \"truthy\" \"falsy\" }} → truthy {{ cond (\"\" | not | not) \"truthy\" \"falsy\" }} → falsy Unlike ternary operators in other languages, the cond function does not perform short-circuit evaluation. The function evaluates both ARG1 and ARG2, regardless of the CONTROL value.\nDue to the absence of short-circuit evaluation, these examples throw an error:\n{{ cond true \"true\" (div 1 0) }} {{ cond false (div 1 0) \"false\" }} "},{"date":"0001-01-01","uri":"/functions/compare/default/","title":"compare.Default","content":"The default function returns the second argument if set, else the first argument.\nWhen the second argument is the boolean false value, the default function returns false. All other falsy values are considered unset.\nIn Go templates, the falsy values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. Everything else is truthy.\nTo set a default value based on truthiness, use the or operator instead.\nThe default function returns the second argument if set:\n{{ default 42 1 }} → 1 {{ default 42 \"foo\" }} → foo {{ default 42 (dict \"k\" \"v\") }} → map[k:v] {{ default 42 (slice \"a\" \"b\") }} → [a b] {{ default 42 true }} → true \u003c!-- As noted above, the boolean \"false\" is considered set --\u003e {{ default 42 false }} → false The default function returns the first argument if the second argument is not set:\n{{ default 42 0 }} → 42 {{ default 42 \"\" }} → 42 {{ default 42 dict }} → 42 {{ default 42 slice }} → 42 {{ default 42 \u003cnil\u003e }} → 42 "},{"date":"0001-01-01","uri":"/functions/compare/eq/","title":"compare.Eq","content":"{{ eq 1 1 }} → true {{ eq 1 2 }} → false {{ eq 1 1 1 }} → true {{ eq 1 1 2 }} → true {{ eq 1 2 1 }} → true {{ eq 1 2 2 }} → false "},{"date":"0001-01-01","uri":"/functions/compare/ge/","title":"compare.Ge","content":"{{ ge 1 1 }} → true {{ ge 1 2 }} → false {{ ge 2 1 }} → true {{ ge 1 1 1 }} → true {{ ge 1 1 2 }} → false {{ ge 1 2 1 }} → false {{ ge 1 2 2 }} → false {{ ge 2 1 1 }} → true {{ ge 2 1 2 }} → true {{ ge 2 2 1 }} → true "},{"date":"0001-01-01","uri":"/functions/compare/gt/","title":"compare.Gt","content":"{{ gt 1 1 }} → false {{ gt 1 2 }} → false {{ gt 2 1 }} → true {{ gt 1 1 1 }} → false {{ gt 1 1 2 }} → false {{ gt 1 2 1 }} → false {{ gt 1 2 2 }} → false {{ gt 2 1 1 }} → true {{ gt 2 1 2 }} → false {{ gt 2 2 1 }} → false "},{"date":"0001-01-01","uri":"/functions/compare/le/","title":"compare.Le","content":"{{ le 1 1 }} → true {{ le 1 2 }} → true {{ le 2 1 }} → false {{ le 1 1 1 }} → true {{ le 1 1 2 }} → true {{ le 1 2 1 }} → true {{ le 1 2 2 }} → true {{ le 2 1 1 }} → false {{ le 2 1 2 }} → false {{ le 2 2 1 }} → false "},{"date":"0001-01-01","uri":"/functions/compare/lt/","title":"compare.Lt","content":"{{ lt 1 1 }} → false {{ lt 1 2 }} → true {{ lt 2 1 }} → false {{ lt 1 1 1 }} → false {{ lt 1 1 2 }} → false {{ lt 1 2 1 }} → false {{ lt 1 2 2 }} → true {{ lt 2 1 1 }} → false {{ lt 2 1 2 }} → false {{ lt 2 2 1 }} → false "},{"date":"0001-01-01","uri":"/functions/compare/ne/","title":"compare.Ne","content":"{{ ne 1 1 }} → false {{ ne 1 2 }} → true {{ ne 1 1 1 }} → false {{ ne 1 1 2 }} → false {{ ne 1 2 1 }} → false {{ ne 1 2 2 }} → true "},{"date":"0001-01-01","uri":"/methods/site/config/","title":"Config","content":"The Config method on a Site object provides access to a subset of the site configuration, specifically the services and privacy keys.\nServices These are the default service settings, typically used by Hugo’s built-in templates and shortcodes.\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: disqus: shortname: \"\" googleAnalytics: id: \"\" instagram: accessToken: \"\" disableInlineCSS: false rss: limit: -1 twitter: disableInlineCSS: false [services] [services.disqus] shortname = '' [services.googleAnalytics] id = '' [services.instagram] accessToken = '' disableInlineCSS = false [services.rss] limit = -1 [services.twitter] disableInlineCSS = false { \"services\": { \"disqus\": { \"shortname\": \"\" }, \"googleAnalytics\": { \"id\": \"\" }, \"instagram\": { \"accessToken\": \"\", \"disableInlineCSS\": false }, \"rss\": { \"limit\": -1 }, \"twitter\": { \"disableInlineCSS\": false } } } For example, to use Hugo’s built-in Google Analytics template you must add a Google tag ID:\nhugo.\ryaml\r \rtoml\r \rjson\r \rservices: googleAnalytics: id: G-XXXXXXXXX [services] [services.googleAnalytics] id = 'G-XXXXXXXXX' { \"services\": { \"googleAnalytics\": { \"id\": \"G-XXXXXXXXX\" } } } To access this value from a template:\n{{ .Site.Config.Services.GoogleAnalytics.ID }} → G-XXXXXXXXX You must capitalize each identifier as shown above.\nPrivacy These are the default privacy settings, typically used by Hugo’s built-in templates and shortcodes:\nhugo.\ryaml\r \rtoml\r \rjson\r \rprivacy: disqus: disable: false googleAnalytics: anonymizeIP: false disable: false respectDoNotTrack: false useSessionStorage: false instagram: disable: false simple: false twitter: disable: false enableDNT: false simple: false vimeo: disable: false enableDNT: false simple: false youTube: disable: false privacyEnhanced: false [privacy] [privacy.disqus] disable = false [privacy.googleAnalytics] anonymizeIP = false disable = false respectDoNotTrack = false useSessionStorage = false [privacy.instagram] disable = false simple = false [privacy.twitter] disable = false enableDNT = false simple = false [privacy.vimeo] disable = false enableDNT = false simple = false [privacy.youTube] disable = false privacyEnhanced = false { \"privacy\": { \"disqus\": { \"disable\": false }, \"googleAnalytics\": { \"anonymizeIP\": false, \"disable\": false, \"respectDoNotTrack\": false, \"useSessionStorage\": false }, \"instagram\": { \"disable\": false, \"simple\": false }, \"twitter\": { \"disable\": false, \"enableDNT\": false, \"simple\": false }, \"vimeo\": { \"disable\": false, \"enableDNT\": false, \"simple\": false }, \"youTube\": { \"disable\": false, \"privacyEnhanced\": false } } } For example, to disable usage of the built-in YouTube shortcode:\nhugo.\ryaml\r \rtoml\r \rjson\r \rprivacy: youtube: disable: true [privacy] [privacy.youtube] disable = true { \"privacy\": { \"youtube\": { \"disable\": true } } } To access this value from a template:\n{{ .Site.Config.Privacy.YouTube.Disable }} → true You must capitalize each identifier as shown above.\n"},{"date":"0001-01-01","uri":"/methods/page/content/","title":"Content","content":"The Content method on a Page object renders markdown and shortcodes to HTML. The content does not include front matter.\n{{ .Content }} "},{"date":"0001-01-01","uri":"/methods/resource/content/","title":"Content","content":"The Content method on a Resource object returns template.HTML when the resource type is page, otherwise it returns a string.\nassets/quotations/kipling.txt\rHe travels the fastest who travels alone.\rTo get the content:\n{{ with resources.Get \"quotations/kipling.txt\" }} {{ .Content }} → He travels the fastest who travels alone. {{ end }} To get the size in bytes:\n{{ with resources.Get \"quotations/kipling.txt\" }} {{ .Content | len }} → 42 {{ end }} To create an inline image:\n{{ with resources.Get \"images/a.jpg\" }} \u003cimg src=\"data:{{ .MediaType.Type }};base64,{{ .Content | base64Encode }}\"\u003e {{ end }} To create inline CSS:\n{{ with resources.Get \"css/style.css\" }} \u003cstyle\u003e{{ .Content | safeCSS }}\u003c/style\u003e {{ end }} To create inline JavaScript:\n{{ with resources.Get \"js/script.js\" }} \u003cscript\u003e{{ .Content | safeJS }}\u003c/script\u003e {{ end }} Use this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/functions/go-template/continue/","title":"continue","content":"This template code:\n{{ $s := slice \"foo\" \"bar\" \"baz\" }} {{ range $s }} {{ if eq . \"bar\" }} {{ continue }} {{ end }} \u003cp\u003e{{ . }}\u003c/p\u003e {{ end }} Is rendered to:\n\u003cp\u003efoo\u003c/p\u003e \u003cp\u003ebaz\u003c/p\u003e See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/methods/site/copyright/","title":"Copyright","content":"Site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rcopyright: © 2023 ABC Widgets, Inc. copyright = '© 2023 ABC Widgets, Inc.' { \"copyright\": \"© 2023 ABC Widgets, Inc.\" } Template:\n{{ .Site.Copyright }} → © 2023 ABC Widgets, Inc. "},{"date":"0001-01-01","uri":"/methods/taxonomy/count/","title":"Count","content":"The Count method on a Taxonomy object returns the number of number of weighted pages to which the given term has been assigned.\nBefore we can use a Taxonomy method, we need to capture a Taxonomy object.\nCapture a taxonomy object Consider this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: author: authors genre: genres [taxonomies] author = 'authors' genre = 'genres' { \"taxonomies\": { \"author\": \"authors\", \"genre\": \"genres\" } } And this content structure:\ncontent/ ├── books/ │ ├── and-then-there-were-none.md --\u003e genres: suspense │ ├── death-on-the-nile.md --\u003e genres: suspense │ └── jamaica-inn.md --\u003e genres: suspense, romance │ └── pride-and-prejudice.md --\u003e genres: romance └── _index.md To capture the “genres” taxonomy object from within any template, use the Taxonomies method on a Site object.\n{{ $taxonomyObject := .Site.Taxonomies.genres }} To capture the “genres” taxonomy object when rendering its page with a taxonomy template, use the Terms method on the page’s Data object:\nlayouts/_default/taxonomy.html\r{{ $taxonomyObject := .Data.Terms }}\rTo inspect the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") $taxonomyObject }}\u003c/pre\u003e Although the Alphabetical and ByCount methods provide a better data structure for ranging through the taxonomy, you can render the weighted pages by term directly from the Taxonomy object:\n{{ range $term, $weightedPages := $taxonomyObject }} \u003ch2\u003e\u003ca href=\"{{ .Page.RelPermalink }}\"\u003e{{ .Page.LinkTitle }}\u003c/a\u003e\u003c/h2\u003e \u003cul\u003e {{ range $weightedPages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} In the example above, the first anchor element is a link to the term page.\nCount the weighted pages Now that we have captured the “genres” Taxonomy object, let’s count the number of weighted pages to which the “suspense” term has been assigned:\n{{ $taxonomyObject.Count \"suspense\" }} → 3 "},{"date":"0001-01-01","uri":"/methods/resource/crop/","title":"Crop","content":"Crop an image to match the given dimensions without resizing. You must provide both width and height.\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Crop \"200x200\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Use this method with global, page, or remote resources.\nProcess specification The process specification is a space-delimited, case-insensitive list of one or more of the following in any sequence:\naction Applicable to the Process method only. Specify zero or one of crop, fill, fit, or resize. If you specify an action you must also provide dimensions. dimensions Provide width or height when using the Resize method, else provide both width and height. See details. anchor Use with the Crop and Fill methods. Specify zero or one of TopLeft, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight, or Smart. Default is Smart. See details. rotation Typically specify zero or one of r90, r180, or r270. Also supports arbitrary rotation angles. See details. target format Specify zero or one of gif, jpeg, png, tiff, or webp. See details. quality Applicable to JPEG and WebP images. Optionally specify qN where N is an integer in the range [0, 100]. Default is 75. See details. hint Applicable to WebP images and equivalent to the -preset flag for the cwebp encoder. Specify zero or one of drawing, icon, photo, picture, or text. Default is photo. See details. background color When converting a PNG or WebP with transparency to a format that does not support transparency, optionally specify a background color using a 3-digit or a 6-digit hexadecimal color code. Default is #ffffff (white). See details. resampling filter Typically specify zero or one of Box, Lanczos, CatmullRom, MitchellNetravali, Linear, or NearestNeighbor. Other resampling filters are available. See details. Example {{ with resources.Get \"images/original.jpg\" }} {{ with .Crop \"200x200 topright webp q85 lanczos\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/crypto/fnv32a/","title":"crypto.FNV32a","content":"\rNew in v0.98.0\rThis function calculates the 32-bit FNV1a hash of a given string according to the specification:\n{{ crypto.FNV32a \"Hello world\" }} → 1498229191 "},{"date":"0001-01-01","uri":"/functions/crypto/hmac/","title":"crypto.HMAC","content":"Set the HASH_TYPE argument to md5, sha1, sha256, or sha512.\nSet the optional ENCODING argument to either hex (default) or binary.\n{{ hmac \"sha256\" \"Secret key\" \"Secret message\" }} 5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84 {{ hmac \"sha256\" \"Secret key\" \"Secret message\" \"hex\" }} 5cceb491f45f8b154e20f3b0a30ed3a6ff3027d373f85c78ffe8983180b03c84 {{ hmac \"sha256\" \"Secret key\" \"Secret message\" \"binary\" | base64Encode }} XM60kfRfixVOIPOwow7Tpv8wJ9Nz+Fx4/+iYMYCwPIQ= "},{"date":"0001-01-01","uri":"/functions/crypto/md5/","title":"crypto.MD5","content":"{{ md5 \"Hello world\" }} → 3e25960a79dbc69b674cd4ec67a72c62 This can be useful if you want to use Gravatar for generating a unique avatar:\n\u003cimg src=\"https://www.gravatar.com/avatar/{{ md5 \"your@email.com\" }}?s=100\u0026d=identicon\"\u003e "},{"date":"0001-01-01","uri":"/functions/crypto/sha1/","title":"crypto.SHA1","content":"{{ sha1 \"Hello world\" }} → 7b502c3a1f48c8609ae212cdfb639dee39673f5e "},{"date":"0001-01-01","uri":"/functions/crypto/sha256/","title":"crypto.SHA256","content":"{{ sha256 \"Hello world\" }} → 64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f3c "},{"date":"0001-01-01","uri":"/methods/page/currentsection/","title":"CurrentSection","content":"A section is a top-level content directory, or any content directory with an _index.md file.\nThe current section of a section page, taxonomy page, term page, or the home page, is itself.\nConsider this content structure:\ncontent/ ├── auctions/ │ ├── 2023-11/ │ │ ├── _index.md \u003c-- current section: 2023-11 │ │ ├── auction-1.md │ │ └── auction-2.md \u003c-- current section: 2023-11 │ ├── 2023-12/ │ │ ├── _index.md │ │ ├── auction-3.md │ │ └── auction-4.md │ ├── _index.md \u003c-- current section: auctions │ ├── bidding.md │ └── payment.md \u003c-- current section: auctions ├── books/ │ ├── _index.md \u003c-- current section: books │ ├── book-1.md │ └── book-2.md \u003c-- current section: books ├── films/ │ ├── _index.md \u003c-- current section: films │ ├── film-1.md │ └── film-2.md \u003c-- current section: films └── _index.md \u003c-- current section: home To create a link to the current section page:\n\u003ca href=\"{{ .CurrentSection.RelPermalink }}\"\u003e{{ .CurrentSection.LinkTitle }}\u003c/a\u003e "},{"date":"0001-01-01","uri":"/methods/page/data/","title":"Data","content":"The Data method on a Page object returns a unique data object for each page kind.\nThe Data method is only useful within taxonomy and term templates.\nThemes that are not actively maintained may still use .Data.Pages in list templates. Although that syntax remains functional, use one of these methods instead: Pages, RegularPages, or RegularPagesRecursive\nThe examples that follow are based on this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: author: authors genre: genres [taxonomies] author = 'authors' genre = 'genres' { \"taxonomies\": { \"author\": \"authors\", \"genre\": \"genres\" } } And this content structure:\ncontent/ ├── books/ │ ├── and-then-there-were-none.md --\u003e genres: suspense │ ├── death-on-the-nile.md --\u003e genres: suspense │ └── jamaica-inn.md --\u003e genres: suspense, romance │ └── pride-and-prejudice.md --\u003e genres: romance └── _index.md In a taxonomy template Use these methods on the Data object within a taxonomy template.\nSingular (string) Returns the singular name of the taxonomy. {{ .Data.Singular }} → genre Plural (string) Returns the plural name of the taxonomy. {{ .Data.Plural }} → genres Terms (page.Taxonomy) Returns the taxonomy object, consisting of a map of terms and the weighted pages associated with each term. {{ $taxonomyObject := .Data.Terms }} Once you have captured the taxonomy object, use any of the taxonomy methods to sort, count, or capture a subset of its weighted pages.\nLearn more about taxonomy templates.\nIn a term template Use these methods on the Data object within a term template.\nSingular (string) Returns the singular name of the taxonomy. {{ .Data.Singular }} → genre Plural (string) Returns the plural name of the taxonomy. {{ .Data.Plural }} → genres Term (string) Returns the name of the term. {{ .Data.Term }} → suspense Learn more about term templates.\n"},{"date":"0001-01-01","uri":"/methods/resource/data/","title":"Data","content":"The Data method on a resource returned by the resources.GetRemote function returns information from the HTTP response.\n{{ $url := \"https://example.org/images/a.jpg\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ with .Data }} {{ .ContentLength }} → 42764 {{ .ContentType }} → image/jpeg {{ .Status }} → 200 OK {{ .StatusCode }} → 200 {{ .TransferEncoding }} → [] {{ end }} {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} ContentLength (int) The content length in bytes. ContentType (string) The content type. Status (string) The HTTP status text. StatusCode (int) The HTTP status code. TransferEncoding (string) The transfer encoding. "},{"date":"0001-01-01","uri":"/methods/site/data/","title":"Data","content":"Use the Data method on a Site object to access data within the data directory, or within any directory mounted to the data directory. Supported data formats include JSON, TOML, YAML, and XML.\nAlthough Hugo can unmarshal CSV files with the transform.Unmarshal function, do not place CSV files in the data directory. You cannot access data within CSV files using this method.\nConsider this data directory:\ndata/ ├── books/ │ ├── fiction.yaml │ └── nonfiction.yaml ├── films.json ├── paintings.xml └── sculptures.toml And these data files:\ndata/books/fiction.yaml\r- title: The Hunchback of Notre Dame author: Victor Hugo isbn: 978-0140443530 - title: Les Misérables author: Victor Hugo isbn: 978-0451419439\rdata/books/nonfiction.yaml\r- title: The Ancien Régime and the Revolution author: Alexis de Tocqueville isbn: 978-0141441641 - title: Interpreting the French Revolution author: François Furet isbn: 978-0521280495\rAccess the data by chaining the identifiers:\n{{ range $category, $books := .Site.Data.books }} \u003cp\u003e{{ $category | title }}\u003c/p\u003e \u003cul\u003e {{ range $books }} \u003cli\u003e{{ .title }} ({{ .isbn }})\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Hugo renders this to:\n\u003cp\u003eFiction\u003c/p\u003e \u003cul\u003e \u003cli\u003eThe Hunchback of Notre Dame (978-0140443530)\u003c/li\u003e \u003cli\u003eLes Misérables (978-0451419439)\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eNonfiction\u003c/p\u003e \u003cul\u003e \u003cli\u003eThe Ancien Régime and the Revolution (978-0141441641)\u003c/li\u003e \u003cli\u003eInterpreting the French Revolution (978-0521280495)\u003c/li\u003e \u003c/ul\u003e To limit the listing to fiction, and sort by title:\n\u003cul\u003e {{ range sort .Site.Data.books.fiction \"title\" }} \u003cli\u003e{{ .title }} ({{ .author }})\u003c/li\u003e {{ end }} \u003c/ul\u003e To find a fiction book by ISBN:\n{{ range where .Site.Data.books.fiction \"isbn\" \"978-0140443530\" }} \u003cli\u003e{{ .title }} ({{ .author }})\u003c/li\u003e {{ end }} In the template examples above, each of the keys is a valid identifier. For example, none of the keys contains a hyphen. To access a key that is not a valid identifier, use the index function:\n"},{"date":"0001-01-01","uri":"/functions/data/getcsv/","title":"data.GetCSV","content":"Given the following directory structure:\nmy-project/ └── other-files/ └── pets.csv Access the data with either of the following:\n{{ $data := getCSV \",\" \"other-files/pets.csv\" }} {{ $data := getCSV \",\" \"other-files/\" \"pets.csv\" }} When working with local data, the filepath is relative to the working directory.\nYou must not place CSV files in the project’s data directory.\nAccess remote data with either of the following:\n{{ $data := getCSV \",\" \"https://example.org/pets.csv\" }} {{ $data := getCSV \",\" \"https://example.org/\" \"pets.csv\" }} The resulting data structure is an array of arrays:\n[ [\"name\",\"type\",\"breed\",\"age\"], [\"Spot\",\"dog\",\"Collie\",\"3\"], [\"Felix\",\"cat\",\"Malicious\",\"7\"] ] Options Add headers to the request by providing an options map:\n{{ $opts := dict \"Authorization\" \"Bearer abcd\" }} {{ $data := getCSV \",\" \"https://example.org/pets.csv\" $opts }} Add multiple headers using a slice:\n{{ $opts := dict \"X-List\" (slice \"a\" \"b\" \"c\") }} {{ $data := getCSV \",\" \"https://example.org/pets.csv\" $opts }} Global resource alternative Consider using the resources.Get function with transform.Unmarshal when accessing a global resource.\nmy-project/ └── assets/ └── data/ └── pets.csv {{ $data := \"\" }} {{ $p := \"data/pets.csv\" }} {{ with resources.Get $p }} {{ $opts := dict \"delimiter\" \",\" }} {{ $data = . | transform.Unmarshal $opts }} {{ else }} {{ errorf \"Unable to get resource %q\" $p }} {{ end }} Page resource alternative Consider using the Resources.Get method with transform.Unmarshal when accessing a page resource.\nmy-project/ └── content/ └── posts/ └── my-pets/ ├── index.md └── pets.csv {{ $data := \"\" }} {{ $p := \"pets.csv\" }} {{ with .Resources.Get $p }} {{ $opts := dict \"delimiter\" \",\" }} {{ $data = . | transform.Unmarshal $opts }} {{ else }} {{ errorf \"Unable to get resource %q\" $p }} {{ end }} Remote resource alternative Consider using the resources.GetRemote function with transform.Unmarshal when accessing a remote resource to improve error handling and cache control.\n{{ $data := \"\" }} {{ $u := \"https://example.org/pets.csv\" }} {{ with resources.GetRemote $u }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ $opts := dict \"delimiter\" \",\" }} {{ $data = . | transform.Unmarshal $opts }} {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $u }} {{ end }} "},{"date":"0001-01-01","uri":"/functions/data/getjson/","title":"data.GetJSON","content":"Given the following directory structure:\nmy-project/ └── other-files/ └── books.json Access the data with either of the following:\n{{ $data := getJSON \"other-files/books.json\" }} {{ $data := getJSON \"other-files/\" \"books.json\" }} When working with local data, the filepath is relative to the working directory.\nAccess remote data with either of the following:\n{{ $data := getJSON \"https://example.org/books.json\" }} {{ $data := getJSON \"https://example.org/\" \"books.json\" }} The resulting data structure is a JSON object:\n[ { \"author\": \"Victor Hugo\", \"rating\": 5, \"title\": \"Les Misérables\" }, { \"author\": \"Victor Hugo\", \"rating\": 4, \"title\": \"The Hunchback of Notre Dame\" } ] Options Add headers to the request by providing an options map:\n{{ $opts := dict \"Authorization\" \"Bearer abcd\" }} {{ $data := getJSON \"https://example.org/books.json\" $opts }} Add multiple headers using a slice:\n{{ $opts := dict \"X-List\" (slice \"a\" \"b\" \"c\") }} {{ $data := getJSON \"https://example.org/books.json\" $opts }} Global resource alternative Consider using the resources.Get function with transform.Unmarshal when accessing a global resource.\nmy-project/ └── assets/ └── data/ └── books.json {{ $data := \"\" }} {{ $p := \"data/books.json\" }} {{ with resources.Get $p }} {{ $data = . | transform.Unmarshal }} {{ else }} {{ errorf \"Unable to get resource %q\" $p }} {{ end }} Page resource alternative Consider using the Resources.Get method with transform.Unmarshal when accessing a page resource.\nmy-project/ └── content/ └── posts/ └── reading-list/ ├── books.json └── index.md {{ $data := \"\" }} {{ $p := \"books.json\" }} {{ with .Resources.Get $p }} {{ $data = . | transform.Unmarshal }} {{ else }} {{ errorf \"Unable to get resource %q\" $p }} {{ end }} Remote resource alternative Consider using the resources.GetRemote function with transform.Unmarshal when accessing a remote resource to improve error handling and cache control.\n{{ $data := \"\" }} {{ $u := \"https://example.org/books.json\" }} {{ with resources.GetRemote $u }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ $data = . | transform.Unmarshal }} {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $u }} {{ end }} "},{"date":"0001-01-01","uri":"/methods/page/date/","title":"Date","content":"Set the date in front matter:\ncontent/news/article-1.md\ryaml\r \rtoml\r \rjson\r \r--- date: 2023-10-19T00:40:04-07:00 title: Article 1 ---\r+++ date = 2023-10-19T00:40:04-07:00 title = 'Article 1' +++\r{ \"date\": \"2023-10-19T00:40:04-07:00\", \"title\": \"Article 1\" } The date field in front matter is often considered to be the creation date, You can change its meaning, and its effect on your site, in the site configuration. See details.\nThe date is a time.Time value. Format and localize the value with the time.Format function, or use it with any of the time methods.\n{{ .Date | time.Format \":date_medium\" }} → Oct 19, 2023 In the example above we explicitly set the date in front matter. With Hugo’s default configuration, the Date method returns the front matter value. This behavior is configurable, allowing you to set fallback values if the date is not defined in front matter. See details.\n"},{"date":"0001-01-01","uri":"/methods/time/day/","title":"Day","content":"{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Day }} → 27 "},{"date":"0001-01-01","uri":"/functions/debug/dump/","title":"debug.Dump","content":"{{ $data := \"\" }} {{ $p := \"data/books.json\" }} {{ with resources.Get $p }} {{ $opts := dict \"delimiter\" \",\" }} {{ $data = . | transform.Unmarshal $opts }} {{ else }} {{ errorf \"Unable to get resource %q\" $p }} {{ end }} \u003cpre\u003e{{ debug.Dump $data }}\u003c/pre\u003e []interface {}{ map[string]interface {}{ \"author\": \"Victor Hugo\", \"rating\": 5.0, \"title\": \"Les Misérables\", }, map[string]interface {}{ \"author\": \"Victor Hugo\", \"rating\": 4.0, \"title\": \"The Hunchback of Notre Dame\", }, } Output from this function may change from one release to the next. Use for debugging only.\n"},{"date":"0001-01-01","uri":"/functions/debug/timer/","title":"debug.Timer","content":"\rNew in v0.120.0\rUse the debug.Timer function to determine execution time for a block of code, useful for finding performance bottle necks in templates.\nThe timer starts when you instantiate it, and stops when you call its Stop method.\n{{ $t := debug.Timer \"TestSqrt\" }} {{ range seq 2000 }} {{ $f := math.Sqrt . }} {{ end }} {{ $t.Stop }} Use the --logLevel info command line flag when you build the site.\nhugo --logLevel info The results are displayed in the console at the end of the build. You can have as many timers as you want and if you don’t stop them, they will be stopped at the end of build.\nINFO timer: name TestSqrt total 12.429355ms "},{"date":"0001-01-01","uri":"/functions/go-template/define/","title":"define","content":"Use with the block statement:\n{{ block \"main\" . }} {{ print \"default value if 'main' template is empty\" }} {{ end }} {{ define \"main\" }} \u003ch1\u003e{{ .Title }}\u003c/h1\u003e {{ .Content }} {{ end }} Use with the partial function:\n{{ partial \"inline/foo.html\" (dict \"answer\" 42) }} {{ define \"partials/inline/foo.html\" }} {{ printf \"The answer is %v.\" .answer }} {{ end }} Use with the template function:\n{{ template \"foo\" (dict \"answer\" 42) }} {{ define \"foo\" }} {{ printf \"The answer is %v.\" .answer }} {{ end }} See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/hosting-and-deployment/deployment-with-rclone/","title":"Deploy with Rclone","content":"Assumptions A web host running a web server. This could be a shared hosting environment or a VPS. Access to your web host with any of the protocols supported by rclone, such as SFTP. A functional static website built with Hugo Deploying from an Rclone compatible operating system You have installed Rclone. NB: You can remove --interactive in the commands below once you are comfortable with rclone, if you wish. Also, --gc and --minify are optional in the hugo commands below.\nGetting started The spoiler is that you can even deploy your entire website from any compatible OS with no configuration. Using SFTP for example:\nhugo --gc --minify rclone sync --interactive --sftp-host sftp.example.com --sftp-user www-data --sftp-ask-password public/ :sftp:www/ Configure Rclone for even easier usage The easiest way is simply to run rclone config.\nThe Rclone docs provide an example of configuring Rclone to use SFTP.\nFor the next commands, we will assume you configured a remote you named hugo-www\nThe above ‘spoiler’ commands could become:\nhugo --gc --minify rclone sync --interactive public/ hugo-www:www/ After you issue the above commands (and respond to any prompts), check your website and you will see that it is deployed.\n"},{"date":"0001-01-01","uri":"/hosting-and-deployment/deployment-with-rsync/","title":"Deploy with Rsync","content":"Assumptions A web host running a web server. This could be a shared hosting environment or a VPS. Access to your web host with SSH A functional static website built with Hugo The spoiler is that you can deploy your entire website with a command that looks like the following:\nhugo \u0026\u0026 rsync -avz --delete public/ www-data@ftp.topologix.fr:~/www/ As you will see, we’ll put this command in a shell script file, which makes building and deployment as easy as executing ./deploy.\nCopy Your SSH Key to your host To make logging in to your server more secure and less interactive, you can upload your SSH key. If you have already installed your SSH key to your server, you can move on to the next section.\nFirst, install the ssh client. On Debian distributions, use the following command:\ninstall-openssh.sh\rsudo apt-get install openssh-client\rThen generate your ssh key. First, create the .ssh directory in your home directory if it doesn’t exist:\n~$ cd \u0026\u0026 mkdir .ssh \u0026 cd .ssh Next, execute this command to generate a new keypair called rsa_id:\n~/.ssh/$ ssh-keygen -t rsa -q -C \"For SSH\" -f rsa_id You’ll be prompted for a passphrase, which is an extra layer of protection. Enter the passphrase you’d like to use, and then enter it again when prompted, or leave it blank if you don’t want to have a passphrase. Not using a passphrase will let you transfer files non-interactively, as you won’t be prompted for a password when you log in, but it is slightly less secure.\nTo make logging in easier, add a definition for your web host to the file ~/.ssh/config with the following command, replacing HOST with the IP address or hostname of your web host, and USER with the username you use to log in to your web host when transferring files:\n~/.ssh/$ cat \u003e\u003e config \u003c\u003cEOF Host HOST Hostname HOST Port 22 User USER IdentityFile ~/.ssh/rsa_id EOF Then copy your ssh public key to the remote server with the ssh-copy-id command:\n~/.ssh/$ ssh-copy-id -i rsa_id.pub USER@HOST.com Now you can easily connect to the remote server:\n~$ ssh user@host Enter passphrase for key '/home/mylogin/.ssh/rsa_id': Now that you can log in with your SSH key, let’s create a script to automate deployment of your Hugo site.\nShell script Create a new script called deploy the root of your Hugo tree:\n~/websites/topologix.fr$ editor deploy Add the following content. Replace the USER, HOST, and DIR values with your own values:\n#!/bin/sh USER=my-user HOST=my-server.com DIR=my/directory/to/topologix.fr/ # the directory where your web site files should go hugo \u0026\u0026 rsync -avz --delete public/ ${USER}@${HOST}:~/${DIR} # this will delete everything on the server that's not in the local public folder exit 0 Note that DIR is the relative path from the remote user’s home. If you have to specify a full path (for instance /var/www/mysite/) you must change ~/${DIR} to ${DIR} inside the command-line. For most cases you should not have to.\nSave and close, and make the deploy file executable:\n~/websites/topologix.fr$ chmod +x deploy Now you only have to enter the following command to deploy and update your website:\n~/websites/topologix.fr$ ./deploy Your site builds and deploys:\nStarted building sites ... Built site for language en: 0 draft content 0 future content 0 expired content 5 pages created 0 non-page files copied 0 paginator pages created 0 tags created 0 categories created total in 56 ms sending incremental file list 404.html index.html index.xml sitemap.xml posts/ posts/index.html sent 9,550 bytes received 1,708 bytes 7,505.33 bytes/sec total size is 966,557 speedup is 85.86 You can incorporate other processing tasks into this deployment script as well.\n"},{"date":"0001-01-01","uri":"/methods/page/description/","title":"Description","content":"Conceptually different that a content summary, a page description is typically used in metadata about the page.\ncontent/recipes/sushi.md\ryaml\r \rtoml\r \rjson\r \r--- description: Instructions for making spicy tuna hand rolls. title: How to make spicy tuna hand rolls ---\r+++ description = 'Instructions for making spicy tuna hand rolls.' title = 'How to make spicy tuna hand rolls' +++\r{ \"description\": \"Instructions for making spicy tuna hand rolls.\", \"title\": \"How to make spicy tuna hand rolls\" } layouts/baseof.html\r\u003chead\u003e ... \u003cmeta name=\"description\" content=\"{{ .Description }}\"\u003e ... \u003c/head\u003e\r"},{"date":"0001-01-01","uri":"/functions/diagrams/goat/","title":"diagrams.Goat","content":"Useful in a code block render hook, the diagram.Goat function converts ASCII art to an SVG diagram, returning a GoAT diagram object with the following methods:\nInner (template.HTML) Returns the SVG child elements without a wrapping svg element, allowing you to create your own wrapper. Wrapped (template.HTML) Returns the SVG child elements wrapped in an svg element. Width (int) Returns the width of the rendered diagram, in pixels. Height (int) Returns the height of the rendered diagram, in pixels. GoAT Diagrams Hugo natively supports GoAT diagrams.\nThis markdown:\n```goat\r.---. .-. .-. .-. .---.\r| A +---\u003e| 1 |\u003c---\u003e| 2 |\u003c---\u003e| 3 |\u003c---+ B |\r'---' '-' '+' '+' '---'\r``` Is rendered to:\n\u003cdiv class=\"goat svg-container\"\u003e \u003csvg xmlns=\"http://www.w3.org/2000/svg\" font-family=\"Menlo,Lucida Console,monospace\" viewBox=\"0 0 352 57\"\u003e ... \u003c/svg\u003e \u003c/div\u003e Which appears in your browser as:\nA 1 2 3 B To customize rendering, override Hugo’s built-in code block render hook for GoAT diagrams.\nCode block render hook By way of example, let’s create a code block render hook to render GoAT diagrams as figure elements with an optional caption.\nlayouts/_default/_markup/render-codeblock-goat.html\r{{ $caption := or .Attributes.caption \"\" }} {{ $class := or .Attributes.class \"diagram\" }} {{ $id := or .Attributes.id (printf \"diagram-%d\" (add 1 .Ordinal)) }} \u003cfigure id=\"{{ $id }}\"\u003e {{ with diagrams.Goat (trim .Inner \"\\n\\r\") }} \u003csvg class=\"{{ $class }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"\u003e {{ .Inner }} \u003c/svg\u003e {{ end }} \u003cfigcaption\u003e{{ $caption }}\u003c/figcaption\u003e \u003c/figure\u003e\rThis markdown:\ncontent/example.md\r```goat {class=\"foo\" caption=\"Diagram 1: Example\"} .---. .-. .-. .-. .---. | A +---\u003e| 1 |\u003c---\u003e| 2 |\u003c---\u003e| 3 |\u003c---+ B | '---' '-' '+' '+' '---' ```\rIs rendered to:\n\u003cfigure id=\"diagram-1\"\u003e \u003csvg class=\"foo\" width=\"272\" height=\"57\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"\u003e ... \u003c/svg\u003e \u003cfigcaption\u003eDiagram 1: Example\u003c/figcaption\u003e \u003c/figure\u003e Use CSS to style the SVG as needed:\nsvg.foo { font-family: \"Segoe UI\",\"Noto Sans\",Helvetica,Arial,sans-serif } "},{"date":"0001-01-01","uri":"/methods/site/disqusshortname/","title":"DisqusShortname","content":"\rDeprecated in v0.120.0.\nUse Site.Config.Services.Disqus.Shortname instead.\n"},{"date":"0001-01-01","uri":"/methods/page/draft/","title":"Draft","content":"By default, Hugo does not publish draft pages when you build your site. To include draft pages when you build your site, use the --buildDrafts command line flag.\ncontent/posts/post-1.md\ryaml\r \rtoml\r \rjson\r \r--- draft: true title: Post 1 ---\r+++ draft = true title = 'Post 1' +++\r{ \"draft\": true, \"title\": \"Post 1\" } {{ .Draft }} → true "},{"date":"0001-01-01","uri":"/functions/go-template/else/","title":"else","content":"Use with the if statement:\n{{ $var := \"foo\" }} {{ if $var }} {{ $var }} → foo {{ else }} {{ print \"var is falsy\" }} {{ end }} Use with the with statement:\n{{ $var := \"foo\" }} {{ with $var }} {{ . }} → foo {{ else }} {{ print \"var is falsy\" }} {{ end }} Use with the range statement:\n{{ $var := slice 1 2 3 }} {{ range $var }} {{ . }} → 1 2 3 {{ else }} {{ print \"var is falsy\" }} {{ end }} Use else if to check multiple conditions.\n{{ $var := 12 }} {{ if eq $var 6 }} {{ print \"var is 6\" }} {{ else if eq $var 7 }} {{ print \"var is 7\" }} {{ else if eq $var 42 }} {{ print \"var is 42\" }} {{ else }} {{ print \"var is something else\" }} {{ end }} See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/functions/encoding/base64decode/","title":"encoding.Base64Decode","content":"{{ \"SHVnbw==\" | base64Decode }} → Hugo Use the base64Decode function to decode responses from APIs. For example, the result of this call to GitHub’s API contains the base64-encoded representation of the repository’s README file:\nhttps://api.github.com/repos/gohugoio/hugo/readme To retrieve and render the content:\n{{ $u := \"https://api.github.com/repos/gohugoio/hugo/readme\" }} {{ with resources.GetRemote $u }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ with . | transform.Unmarshal }} {{ .content | base64Decode | markdownify }} {{ end }} {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $u }} {{ end }} "},{"date":"0001-01-01","uri":"/functions/encoding/base64encode/","title":"encoding.Base64Encode","content":"{{ \"Hugo\" | base64Encode }} → SHVnbw== "},{"date":"0001-01-01","uri":"/functions/encoding/jsonify/","title":"encoding.Jsonify","content":"To customize the printing of the JSON, pass an options map as the first argument. Supported options are “prefix” and “indent”. Each JSON element in the output will begin on a new line beginning with prefix followed by one or more copies of indent according to the indentation nesting.\n{{ dict \"title\" .Title \"content\" .Plain | jsonify }} {{ dict \"title\" .Title \"content\" .Plain | jsonify (dict \"indent\" \" \") }} {{ dict \"title\" .Title \"content\" .Plain | jsonify (dict \"prefix\" \" \" \"indent\" \" \") }} Options indent (string) Indentation to use. Default is “”. prefix (string) Indentation prefix. Default is “”. noHTMLEscape (bool) Disable escaping of problematic HTML characters inside JSON quoted strings. The default behavior is to escape \u0026, \u003c, and \u003e to \\u0026, \\u003c, and \\u003e to avoid certain safety problems that can arise when embedding JSON in HTML. Default is false. "},{"date":"0001-01-01","uri":"/functions/go-template/end/","title":"end","content":"Use with the if statement:\n{{ $var := \"foo\" }} {{ if $var }} {{ $var }} → foo {{ end }} Use with the with statement:\n{{ $var := \"foo\" }} {{ with $var }} {{ . }} → foo {{ end }} Use with the range statement:\n{{ $var := slice 1 2 3 }} {{ range $var }} {{ . }} → 1 2 3 {{ end }} Use with the block statement:\n{{ block \"main\" . }}{{ end }} Use with the define statement:\n{{ define \"main\" }} {{ print \"this is the main section\" }} {{ end }} See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/methods/page/eq/","title":"Eq","content":"In this contrived example from a single page template, we list all pages in the current section except for the current page.\n{{ $currentPage := . }} {{ range .CurrentSection.Pages }} {{ if not (.Eq $currentPage) }} \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e {{ end }} {{ end }} "},{"date":"0001-01-01","uri":"/methods/time/equal/","title":"Equal","content":"{{ $t1 := time.AsTime \"2023-01-01T17:00:00-08:00\" }} {{ $t2 := time.AsTime \"2023-01-01T20:00:00-05:00\" }} {{ $t1.Equal $t2 }} → true "},{"date":"0001-01-01","uri":"/methods/resource/err/","title":"Err","content":"The Err method on a resource returned by the resources.GetRemote function returns an error message if the HTTP request fails, else nil. If you do not handle the error yourself, Hugo will fail the build.\nIn this example we send an HTTP request to a nonexistent domain:\n{{ $url := \"https://broken-example.org/images/a.jpg\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} The code above captures the error from the HTTP request, then fails the build:\nERROR error calling resources.GetRemote: Get \"https://broken-example.org/images/a.jpg\": dial tcp: lookup broken-example.org on 127.0.0.53:53: no such host To log an error as a warning instead of an error:\n{{ $url := \"https://broken-example.org/images/a.jpg\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ warnf \"%s\" . }} {{ else }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} An HTTP response with a 404 status code is not an HTTP request error. To handle 404 status codes, code defensively using the nested with-else-end construct as shown above.\n"},{"date":"0001-01-01","uri":"/methods/resource/exif/","title":"Exif","content":"Applicable to JPEG and TIFF images, the Exif method on an image Resource object returns an EXIF object containing image metadata.\nMethods Date (time.Time) Returns the image creation date/time. Format with the time.Formatfunction. Lat (float64) Returns the GPS latitude in degrees. Long (float64) Returns the GPS longitude in degrees. Tags (exif.Tags) Returns a collection of the available EXIF tags for this image. You may include or exclude specific tags from this collection in the site configuration. Examples To list the creation date, location, and EXIF tags:\n{{ with resources.Get \"images/a.jpg\" }} {{ with .Exif }} \u003cp\u003eDate: {{ .Date }}\u003c/p\u003e \u003cp\u003eLat/Long: {{ .Lat }}/{{ .Long }}\u003c/p\u003e {{ with .Tags }} \u003cp\u003eTags\u003c/p\u003e \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e\u003cth\u003eTag\u003c/th\u003e\u003cth\u003eValue\u003c/th\u003e\u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e {{ range $k, $v := . }} \u003ctr\u003e\u003ctd\u003e{{ $k }}\u003c/td\u003e\u003ctd\u003e{{ $v }}\u003c/td\u003e\u003c/tr\u003e {{ end }} \u003c/tbody\u003e \u003c/table\u003e {{ end }} {{ end }} {{ end }} To list specific values:\n{{ with resources.Get \"images/a.jpg\" }} {{ with .Exif }} \u003cul\u003e {{ with .Date }}\u003cli\u003eDate: {{ .Format \"January 02, 2006\" }}\u003c/li\u003e{{ end }} {{ with .Tags.ApertureValue }}\u003cli\u003eAperture: {{ lang.FormatNumber 2 . }}\u003c/li\u003e{{ end }} {{ with .Tags.BrightnessValue }}\u003cli\u003eBrightness: {{ lang.FormatNumber 2 . }}\u003c/li\u003e{{ end }} {{ with .Tags.ExposureTime }}\u003cli\u003eExposure Time: {{ . }}\u003c/li\u003e{{ end }} {{ with .Tags.FNumber }}\u003cli\u003eF Number: {{ . }}\u003c/li\u003e{{ end }} {{ with .Tags.FocalLength }}\u003cli\u003eFocal Length: {{ . }}\u003c/li\u003e{{ end }} {{ with .Tags.ISOSpeedRatings }}\u003cli\u003eISO Speed Ratings: {{ . }}\u003c/li\u003e{{ end }} {{ with .Tags.LensModel }}\u003cli\u003eLens Model: {{ . }}\u003c/li\u003e{{ end }} \u003c/ul\u003e {{ end }} {{ end }} Use this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/methods/page/expirydate/","title":"ExpiryDate","content":"By default, Hugo excludes expired pages when building your site. To include expired pages, use the --buildExpired command line flag.\nSet the expiry date in front matter:\ncontent/news/article-1.md\ryaml\r \rtoml\r \rjson\r \r--- expiryDate: 2024-10-19T00:32:13-07:00 title: Article 1 ---\r+++ expiryDate = 2024-10-19T00:32:13-07:00 title = 'Article 1' +++\r{ \"expiryDate\": \"2024-10-19T00:32:13-07:00\", \"title\": \"Article 1\" } The expiry date is a time.Time value. Format and localize the value with the time.Format function, or use it with any of the time methods.\n{{ .ExpiryDate | time.Format \":date_medium\" }} → Oct 19, 2024 In the example above we explicitly set the expiry date in front matter. With Hugo’s default configuration, the ExpiryDate method returns the front matter value. This behavior is configurable, allowing you to set fallback values if the expiry date is not defined in front matter. See details.\n"},{"date":"0001-01-01","uri":"/methods/page/file/","title":"File","content":"By default, not all pages are backed by a file, including top level section pages, taxonomy pages, and term pages. By definition, you cannot retrieve file information when the file does not exist.\nTo back one of the pages above with a file, create an _index.md file in the corresponding directory. For example:\ncontent/ └── books/ ├── _index.md \u003c-- the top level section page ├── book-1.md └── book-2.md Code defensively by verifying file existence as shown in each of the examples below.\nMethods The path separators (slash or backslash) in Path, Dir, and Filename depend on the operating system.\nBaseFileName (string) The file name, excluding the extension.\n{{ with .File }} {{ .BaseFileName }} {{ end }} ContentBaseName (string) If the page is a branch or leaf bundle, the name of the containing directory, else the TranslationBaseName.\n{{ with .File }} {{ .ContentBaseName }} {{ end }} Dir (string) The file path, excluding the file name, relative to the content directory.\n{{ with .File }} {{ .Dir }} {{ end }} Ext (string) The file extension.\n{{ with .File }} {{ .Ext }} {{ end }} Filename (string) The absolute file path.\n{{ with .File }} {{ .Filename }} {{ end }} Lang (string) The language associated with the given file.\n{{ with .File }} {{ .Lang }} {{ end }} LogicalName (string) The file name.\n{{ with .File }} {{ .LogicalName }} {{ end }} Path (string) The file path, relative to the content directory.\n{{ with .File }} {{ .Path }} {{ end }} TranslationBaseName (string) The file name, excluding the extension and language identifier.\n{{ with .File }} {{ .TranslationBaseName }} {{ end }} UniqueID (string) The MD5 hash of .File.Path.\n{{ with .File }} {{ .UniqueID }} {{ end }} Examples Consider this content structure in a multilingual project:\ncontent/ ├── news/ │ ├── b/ │ │ ├── index.de.md \u003c-- leaf bundle │ │ └── index.en.md \u003c-- leaf bundle │ ├── a.de.md \u003c-- regular content │ ├── a.en.md \u003c-- regular content │ ├── _index.de.md \u003c-- branch bundle │ └── _index.en.md \u003c-- branch bundle ├── _index.de.md └── _index.en.md With the English language site:\nregular content leaf bundle branch bundle BaseFileName a.en index.en _index.en ContentBaseName a b news Dir news/ news/b/ news/ Ext md md md Filename /home/user/… /home/user/… /home/user/… Lang en en en LogicalName a.en.md index.en.md _index.en.md Path news/a.en.md news/b/index.en.md news/_index.en.md TranslationBaseName a index _index UniqueID 15be14b… 186868f… 7d9159d… Defensive coding Some of the pages on a site may not be backed by a file. For example:\nTop level section pages Taxonomy pages Term pages Without a backing file, Hugo will throw a warning if you attempt to access a .File property. For example:\nWARN .File.ContentBaseName on zero object. Wrap it in if or with... To code defensively, first check for file existence:\n{{ with .File }} {{ .ContentBaseName }} {{ end }} "},{"date":"0001-01-01","uri":"/methods/resource/fill/","title":"Fill","content":"Crop and resize an image to match the given dimensions. You must provide both width and height.\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Fill \"200x200\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Use this method with global, page, or remote resources.\nProcess specification The process specification is a space-delimited, case-insensitive list of one or more of the following in any sequence:\naction Applicable to the Process method only. Specify zero or one of crop, fill, fit, or resize. If you specify an action you must also provide dimensions. dimensions Provide width or height when using the Resize method, else provide both width and height. See details. anchor Use with the Crop and Fill methods. Specify zero or one of TopLeft, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight, or Smart. Default is Smart. See details. rotation Typically specify zero or one of r90, r180, or r270. Also supports arbitrary rotation angles. See details. target format Specify zero or one of gif, jpeg, png, tiff, or webp. See details. quality Applicable to JPEG and WebP images. Optionally specify qN where N is an integer in the range [0, 100]. Default is 75. See details. hint Applicable to WebP images and equivalent to the -preset flag for the cwebp encoder. Specify zero or one of drawing, icon, photo, picture, or text. Default is photo. See details. background color When converting a PNG or WebP with transparency to a format that does not support transparency, optionally specify a background color using a 3-digit or a 6-digit hexadecimal color code. Default is #ffffff (white). See details. resampling filter Typically specify zero or one of Box, Lanczos, CatmullRom, MitchellNetravali, Linear, or NearestNeighbor. Other resampling filters are available. See details. Example {{ with resources.Get \"images/original.jpg\" }} {{ with .Fill \"200x200 top webp q85 lanczos\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Original\nProcessed\n"},{"date":"0001-01-01","uri":"/methods/resource/filter/","title":"Filter","content":"Apply one or more image filters to the given image.\nTo apply a single filter:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter images.Grayscale }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} To apply two or more filters, executing from left to right:\n{{ $filters := slice images.Grayscale (images.GaussianBlur 8) }} {{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filters }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply image filters using the images.Filter function.\nUse this method with global, page, or remote resources.\nExample {{ with resources.Get \"images/original.jpg\" }} {{ with .Filter images.Grayscale }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Original\nProcessed\nImage filters Use any of these filters with the Filter method.\nimages.AutoOrient\rReturns an image filter that rotates and flips an image as needed per its EXIF orientation tag.\rimages.Brightness\rReturns an image filter that changes the brightness of an image.\rimages.ColorBalance\rReturns an image filter that changes the color balance of an image.\rimages.Colorize\rReturns an image filter that produces a colorized version of an image.\rimages.Contrast\rReturns an image filter that changes the contrast of an image.\rimages.Gamma\rReturns an image filter that performs gamma correction on an image.\rimages.GaussianBlur\rReturns an image filter that applies a gaussian blur to an image.\rimages.Grayscale\rReturns an image filter that produces a grayscale version of an image.\rimages.Hue\rReturns an image filter that rotates the hue of an image.\rimages.Invert\rReturns an image filter that negates the colors of an image.\rimages.Opacity\rReturns an image filter that changes the opacity of an image.\rimages.Overlay\rReturns an image filter that overlays the source image at the given coordinates, relative to the upper left corner.\rimages.Padding\rReturns an image filter that resizes the image canvas without resizing the image.\rimages.Pixelate\rReturns an image filter that applies a pixelation effect to an image.\rimages.Process\rReturns an image filter that processes the given image using the given specification.\rimages.Saturation\rReturns an image filter that changes the saturation of an image.\rimages.Sepia\rReturns an image filter that produces a sepia-toned version of an image.\rimages.Sigmoid\rReturns an image filter that changes the contrast of an image using a sigmoidal function.\rimages.Text\rReturns an image filter that adds text to an image.\rimages.UnsharpMask\rReturns an image filter that sharpens an image.\r"},{"date":"0001-01-01","uri":"/methods/page/firstsection/","title":"FirstSection","content":"A section is a top-level content directory, or any content directory with an _index.md file.\nWhen called on the home page, the FirstSection method returns the Page object of the home page itself.\nConsider this content structure:\ncontent/ ├── auctions/ │ ├── 2023-11/ │ │ ├── _index.md \u003c-- first section: auctions │ │ ├── auction-1.md │ │ └── auction-2.md \u003c-- first section: auctions │ ├── 2023-12/ │ │ ├── _index.md │ │ ├── auction-3.md │ │ └── auction-4.md │ ├── _index.md \u003c-- first section: auctions │ ├── bidding.md │ └── payment.md \u003c-- first section: auctions ├── books/ │ ├── _index.md \u003c-- first section: books │ ├── book-1.md │ └── book-2.md \u003c-- first section: books ├── films/ │ ├── _index.md \u003c-- first section: films │ ├── film-1.md │ └── film-2.md \u003c-- first section: films └── _index.md \u003c-- first section: home To link to the top level section of which the current page is a descendant:\n\u003ca href=\"{{ .FirstSection.RelPermalink }}\"\u003e{{ .FirstSection.LinkTitle }}\u003c/a\u003e "},{"date":"0001-01-01","uri":"/methods/resource/fit/","title":"Fit","content":"Downscale an image to fit the given dimensions while maintaining aspect ratio. You must provide both width and height.\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Fit \"200x200\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Use this method with global, page, or remote resources.\nProcess specification The process specification is a space-delimited, case-insensitive list of one or more of the following in any sequence:\naction Applicable to the Process method only. Specify zero or one of crop, fill, fit, or resize. If you specify an action you must also provide dimensions. dimensions Provide width or height when using the Resize method, else provide both width and height. See details. anchor Use with the Crop and Fill methods. Specify zero or one of TopLeft, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight, or Smart. Default is Smart. See details. rotation Typically specify zero or one of r90, r180, or r270. Also supports arbitrary rotation angles. See details. target format Specify zero or one of gif, jpeg, png, tiff, or webp. See details. quality Applicable to JPEG and WebP images. Optionally specify qN where N is an integer in the range [0, 100]. Default is 75. See details. hint Applicable to WebP images and equivalent to the -preset flag for the cwebp encoder. Specify zero or one of drawing, icon, photo, picture, or text. Default is photo. See details. background color When converting a PNG or WebP with transparency to a format that does not support transparency, optionally specify a background color using a 3-digit or a 6-digit hexadecimal color code. Default is #ffffff (white). See details. resampling filter Typically specify zero or one of Box, Lanczos, CatmullRom, MitchellNetravali, Linear, or NearestNeighbor. Other resampling filters are available. See details. Example {{ with resources.Get \"images/original.jpg\" }} {{ with .Fit \"300x175 webp q85 lanczos\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/fmt/errorf/","title":"fmt.Errorf","content":"The documentation for Go’s fmt package describes the structure and content of the format string.\nThe errorf function evaluates the format string, then prints the result to the ERROR log and fails the build.\n{{ errorf \"The %q shortcode requires a src parameter. See %s\" .Name .Position }} Use the erroridf function to allow optional suppression of specific errors.\n"},{"date":"0001-01-01","uri":"/functions/fmt/erroridf/","title":"fmt.Erroridf","content":"The documentation for Go’s fmt package describes the structure and content of the format string.\nThe erroridf function evaluates the format string, then prints the result to the ERROR log and fails the build. Unlike the errorf function, you may suppress errors logged by the erroridf function by adding the message ID to the ignoreErrors array in your site configuration.\nThis template code:\n{{ erroridf \"error-42\" \"You should consider fixing this.\" }} Produces this console log:\nERROR You should consider fixing this. You can suppress this error by adding the following to your site configuration: ignoreErrors = ['error-42'] To suppress this message:\nhugo.\ryaml\r \rtoml\r \rjson\r \rignoreErrors: - error-42 ignoreErrors = ['error-42'] { \"ignoreErrors\": [ \"error-42\" ] } "},{"date":"0001-01-01","uri":"/functions/fmt/print/","title":"fmt.Print","content":"{{ print \"foo\" }} → foo {{ print \"foo\" \"bar\" }} → foobar {{ print (slice 1 2 3) }} → [1 2 3] "},{"date":"0001-01-01","uri":"/functions/fmt/printf/","title":"fmt.Printf","content":"The documentation for Go’s fmt package describes the structure and content of the format string.\n{{ $var := \"world\" }} {{ printf \"Hello %s.\" $var }} → Hello world. {{ $pi := 3.14159265 }} {{ printf \"Pi is approximately %.2f.\" $pi }} → 3.14 Use the printf function with the safeHTMLAttr function:\n{{ $desc := \"Eat at Joe's\" }} \u003cmeta name=\"description\" {{ printf \"content=%q\" $desc | safeHTMLAttr }}\u003e Hugo renders this to:\n\u003cmeta name=\"description\" content=\"Eat at Joe's\"\u003e "},{"date":"0001-01-01","uri":"/functions/fmt/println/","title":"fmt.Println","content":"{{ println \"foo\" }} → foo\\n "},{"date":"0001-01-01","uri":"/functions/fmt/warnf/","title":"fmt.Warnf","content":"The documentation for Go’s fmt package describes the structure and content of the format string.\nThe warnf function evaluates the format string, then prints the result to the WARNING log. Hugo prints each unique message once to avoid flooding the log with duplicate warnings.\n{{ warnf \"The %q shortcode was unable to find %s. See %s\" .Name $file .Position }} To prevent suppression of duplicate messages when using warnf for debugging, make each message unique with the math.Counter function. For example:\n{{ range site.RegularPages }} {{ .Section | warnf \"%#[2]v [%[1]d]\" math.Counter }} {{ end }} "},{"date":"0001-01-01","uri":"/methods/time/format/","title":"Format","content":"{{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ $format := \"2 Jan 2006\" }} {{ $t.Format $format }} → 27 Jan 2023 To localize the return value, use the time.Format function instead.\nUse the Format method with any time.Time value, including the four predefined front matter dates:\n{{ $format := \"2 Jan 2006\" }} {{ .Date.Format $format }} {{ .PublishDate.Format $format }} {{ .ExpiryDate.Format $format }} {{ .Lastmod.Format $format }} Use the time.Format function to format string representations of dates, and to format raw TOML dates that exclude time and time zone offset.\nLayout string Format a time.Time value based on Go’s reference time:\nMon Jan 2 15:04:05 MST 2006 Create a layout string using these components:\nDescription Valid components Year \"2006\" \"06\" Month \"Jan\" \"January\" \"01\" \"1\" Day of the week \"Mon\" \"Monday\" Day of the month \"2\" \"_2\" \"02\" Day of the year \"__2\" \"002\" Hour \"15\" \"3\" \"03\" Minute \"4\" \"04\" Second \"5\" \"05\" AM/PM mark \"PM\" Time zone offsets \"-0700\" \"-07:00\" \"-07\" \"-070000\" \"-07:00:00\" Replace the sign in the layout string with a Z to print Z instead of an offset for the UTC zone.\nDescription Valid components Time zone offsets \"Z0700\" \"Z07:00\" \"Z07\" \"Z070000\" \"Z07:00:00\" {{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ $t = $t.Format \"Jan 02, 2006 3:04 PM Z07:00\" }} {{ $t }} → Jan 27, 2023 11:44 PM -08:00 Strings such as PST and CET are not time zones. They are time zone abbreviations.\nStrings such as -07:00 and +01:00 are not time zones. They are time zone offsets.\nA time zone is a geographic area with the same local time. For example, the time zone abbreviated by PST and PDT (depending on Daylight Savings Time) is America/Los_Angeles.\nExamples Given this front matter:\nyaml\r \rtoml\r \rjson\r \r--- date: 2023-01-27T23:44:58-08:00 title: About time ---\r+++ date = 2023-01-27T23:44:58-08:00 title = 'About time' +++\r{ \"date\": \"2023-01-27T23:44:58-08:00\", \"title\": \"About time\" } The examples below were rendered in the America/Los_Angeles time zone:\nFormat string Result Monday, January 2, 2006 Friday, January 27, 2023 Mon Jan 2 2006 Fri Jan 27 2023 January 2006 January 2023 2006-01-02 2023-01-27 Monday Friday 02 Jan 06 15:04 MST 27 Jan 23 23:44 PST Mon, 02 Jan 2006 15:04:05 MST Fri, 27 Jan 2023 23:44:58 PST Mon, 02 Jan 2006 15:04:05 -0700 Fri, 27 Jan 2023 23:44:58 -0800 UTC and local time Convert and format any time.Time value to either Coordinated Universal Time (UTC) or local time.\n{{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ $format := \"2 Jan 2006 3:04:05 PM MST\" }} {{ $t.UTC.Format $format }} → 28 Jan 2023 7:44:58 AM UTC {{ $t.Local.Format $format }} → 27 Jan 2023 11:44:58 PM PST Ordinal representation Use the humanize function to render the day of the month as an ordinal number:\n{{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ humanize $t.Day }} of {{ $t.Format \"January 2006\" }} → 27th of January 2023 "},{"date":"0001-01-01","uri":"/methods/page/fragments/","title":"Fragments","content":"\rNew in v0.111.0\rIn a URL, whether absolute or relative, the fragment links to an id attribute of an HTML element on the page.\n/articles/article-1#section-2 ------------------- --------- path fragment Hugo assigns an id attribute to each markdown ATX and setext heading within the page content. You can override the id with a markdown attribute as needed. This creates the relationship between an entry in the table of contents (TOC) and a heading on the page.\nUse the Fragments method on a Page object to create a table of contents with the Fragments.ToHTML method, or by walking the Fragments.Map data structure.\nMethods Headings (map) A nested map of all headings on the page. Each map contains the following keys: ID, Level, Title and Headings. To inspect the data structure: \u003cpre\u003e{{ .Fragments.Headings | jsonify (dict \"indent\" \" \") }}\u003c/pre\u003e HeadingsMap (slice) A slice of maps of all headings on the page, with first-level keys for each heading. Each map contains the following keys: ID, Level, Title and Headings. To inspect the data structure: \u003cpre\u003e{{ .Fragments.HeadingsMap | jsonify (dict \"indent\" \" \") }}\u003c/pre\u003e Identifiers (slice) A slice containing the id of each heading on the page. To inspect the data structure: \u003cpre\u003e{{ .Fragments.Identifiers | jsonify (dict \"indent\" \" \") }}\u003c/pre\u003e Identifiers.Contains ID (bool) Reports whether one or more headings on the page has the given id attribute, useful for validating fragments within a link render hook. {{ .Fragments.Identifiers.Contains \"section-2\" }} → true Identifiers.Count ID (int) The number of headings on a page with the given id attribute, useful for detecting duplicates. {{ .Fragments.Identifiers.Count \"section-2\" }} → 1 ToHTML (template.HTML) Returns a TOC as a nested list, either ordered or unordered, identical to the HTML returned by the TableOfContents method. This method take three arguments: the start level (int), the end level (int), and a boolean (true to return an ordered list, false to return an unordered list). Use this method when you want to control the start level, end level, or list type independently from the table of contents settings in your site configuration.\n{{ $startLevel := 2 }} {{ $endLevel := 3 }} {{ $ordered := true }} {{ .Fragments.ToHTML $startLevel $endLevel $ordered }} Hugo renders this to:\n\u003cnav id=\"TableOfContents\"\u003e \u003col\u003e \u003cli\u003e\u003ca href=\"#section-1\"\u003eSection 1\u003c/a\u003e \u003col\u003e \u003cli\u003e\u003ca href=\"#section-11\"\u003eSection 1.1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#section-12\"\u003eSection 1.2\u003c/a\u003e\u003c/li\u003e \u003c/ol\u003e \u003c/li\u003e \u003cli\u003e\u003ca href=\"#section-2\"\u003eSection 2\u003c/a\u003e\u003c/li\u003e \u003c/ol\u003e \u003c/nav\u003e It is safe to use the Fragments methods within a render hook, even for the current page.\nWhen using the Fragments methods within a shortcode, call the shortcode using the {{\u003c \u003e}} notation. If you use the {{% %}} notation, the rendered shortcode is included in the creation of the fragments map, resulting in a circular loop.\n"},{"date":"0001-01-01","uri":"/methods/page/fuzzywordcount/","title":"FuzzyWordCount","content":"{{ .FuzzyWordCount }} → 200 To get the exact word count, use the WordCount method.\n"},{"date":"0001-01-01","uri":"/methods/shortcode/get/","title":"Get","content":"Specify the parameter by position or by name. When calling a shortcode within markdown, use either positional or named parameters, but not both.\nSome shortcodes support positional parameters, some support named parameters, and others support both. Refer to the shortcode’s documentation for usage details.\nPositional parameters This shortcode call uses positional parameters:\ncontent/about.md\r{{\u003c myshortcode \"Hello\" \"world\" \u003e}}\rTo retrieve parameters by position:\nlayouts/shortcodes/myshortcode.html\r{{ printf \"%s %s.\" (.Get 0) (.Get 1) }} → Hello world.\rNamed parameters This shortcode call uses named parameters:\ncontent/about.md\r{{\u003c myshortcode greeting=\"Hello\" firstName=\"world\" \u003e}}\rTo retrieve parameters by name:\nlayouts/shortcodes/myshortcode.html\r{{ printf \"%s %s.\" (.Get \"greeting\") (.Get \"firstName\") }} → Hello world.\rParameter names are case-sensitive.\n"},{"date":"0001-01-01","uri":"/methods/taxonomy/get/","title":"Get","content":"The Get method on a Taxonomy object returns a slice of weighted pages to which the given term has been assigned.\nBefore we can use a Taxonomy method, we need to capture a Taxonomy object.\nCapture a taxonomy object Consider this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: author: authors genre: genres [taxonomies] author = 'authors' genre = 'genres' { \"taxonomies\": { \"author\": \"authors\", \"genre\": \"genres\" } } And this content structure:\ncontent/ ├── books/ │ ├── and-then-there-were-none.md --\u003e genres: suspense │ ├── death-on-the-nile.md --\u003e genres: suspense │ └── jamaica-inn.md --\u003e genres: suspense, romance │ └── pride-and-prejudice.md --\u003e genres: romance └── _index.md To capture the “genres” taxonomy object from within any template, use the Taxonomies method on a Site object.\n{{ $taxonomyObject := .Site.Taxonomies.genres }} To capture the “genres” taxonomy object when rendering its page with a taxonomy template, use the Terms method on the page’s Data object:\nlayouts/_default/taxonomy.html\r{{ $taxonomyObject := .Data.Terms }}\rTo inspect the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") $taxonomyObject }}\u003c/pre\u003e Although the Alphabetical and ByCount methods provide a better data structure for ranging through the taxonomy, you can render the weighted pages by term directly from the Taxonomy object:\n{{ range $term, $weightedPages := $taxonomyObject }} \u003ch2\u003e\u003ca href=\"{{ .Page.RelPermalink }}\"\u003e{{ .Page.LinkTitle }}\u003c/a\u003e\u003c/h2\u003e \u003cul\u003e {{ range $weightedPages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} In the example above, the first anchor element is a link to the term page.\nGet the weighted pages Now that we have captured the “genres” Taxonomy object, let’s get the weighted pages to which the “suspense” term has been assigned:\n{{ $weightedPages := $taxonomyObject.Get \"suspense\" }} The above is equivalent to:\n{{ $weightedPages := $taxonomyObject.suspense }} But, if the term is not a valid identifier, you cannot use the chaining syntax. For example, this will throw an error because the identifier contains a hyphen:\n{{ $weightedPages := $taxonomyObject.my-genre }} You could also use the index function, but the syntax is more verbose:\n{{ $weightedPages := index $taxonomyObject \"my-genre\" }} To inspect the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") $weightedPages }}\u003c/pre\u003e Example With this template:\n{{ $weightedPages := $taxonomyObject.Get \"suspense\" }} {{ range $weightedPages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} Hugo renders:\n\u003ch2\u003e\u003ca href=\"/books/jamaica-inn/\"\u003eJamaica inn\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/books/death-on-the-nile/\"\u003eDeath on the nile\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/books/and-then-there-were-none/\"\u003eAnd then there were none\u003c/a\u003e\u003c/h2\u003e "},{"date":"0001-01-01","uri":"/methods/page/getpage/","title":"GetPage","content":"The GetPage method is also available on a Site object. See details.\nWhen using the GetPage method on the Page object, specify a path relative to the current directory or relative to the content directory.\nIf Hugo cannot resolve the path to a page, the method returns nil. If the path is ambiguous, Hugo throws an error and fails the build.\nConsider this content structure:\ncontent/ ├── works/ │ ├── paintings/ │ │ ├── _index.md │ │ ├── starry-night.md │ │ └── the-mona-lisa.md │ ├── sculptures/ │ │ ├── _index.md │ │ ├── david.md │ │ └── the-thinker.md │ └── _index.md └── _index.md The examples below depict the result of rendering works/paintings/the-mona-list.md with a single page template:\n{{ with .GetPage \"starry-night\" }} {{ .Title }} → Starry Night {{ end }} {{ with .GetPage \"./starry-night\" }} {{ .Title }} → Starry Night {{ end }} {{ with .GetPage \"../paintings/starry-night\" }} {{ .Title }} → Starry Night {{ end }} {{ with .GetPage \"/works/paintings/starry-night\" }} {{ .Title }} → Starry Night {{ end }} {{ with .GetPage \"../sculptures/david\" }} {{ .Title }} → David {{ end }} {{ with .GetPage \"/works/sculptures/david\" }} {{ .Title }} → David {{ end }} "},{"date":"0001-01-01","uri":"/methods/site/getpage/","title":"GetPage","content":"The GetPage method is also available on Page objects, allowing you to specify a path relative to the current page. See details.\nWhen using the GetPage method on a Site object, specify a path relative to the content directory.\nIf Hugo cannot resolve the path to a page, the method returns nil.\nConsider this content structure:\ncontent/ ├── works/ │ ├── paintings/ │ │ ├── _index.md │ │ ├── starry-night.md │ │ └── the-mona-lisa.md │ ├── sculptures/ │ │ ├── _index.md │ │ ├── david.md │ │ └── the-thinker.md │ └── _index.md └── _index.md This home page template:\n{{ with .Site.GetPage \"/works/paintings\" }} \u003cul\u003e {{ range .Pages }} \u003cli\u003e{{ .Title }} by {{ .Params.artist }}\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Is rendered to:\n\u003cul\u003e \u003cli\u003eStarry Night by Vincent van Gogh\u003c/li\u003e \u003cli\u003eThe Mona Lisa by Leonardo da Vinci\u003c/li\u003e \u003c/ul\u003e To get a regular page instead of a section page:\n{{ with .Site.GetPage \"/works/paintings/starry-night\" }} {{ .Title }} → Starry Night {{ .Params.artist }} → Vincent van Gogh {{ end }} Multilingual projects With multilingual projects, the GetPage method on a Site object resolves the given path to a page in the current language.\nTo get a page from a different language, query the Sites object:\n{{ with where .Site.Sites \"Language.Lang\" \"eq\" \"de\" }} {{ with index . 0 }} {{ with .GetPage \"/works/paintings/starry-night\" }} {{ .Title }} → Sternenklare Nacht {{ end }} {{ end }} {{ end }} Page bundles Consider this content structure:\ncontent/ ├── headless/ │ ├── a.jpg │ ├── b.jpg │ ├── c.jpg │ └── index.md \u003c-- front matter: headless = true └── _index.md In the home page template, use the GetPage method on a Site object to render all the images in the headless page bundle:\n{{ with .Site.GetPage \"/headless\" }} {{ range .Resources.ByType \"image\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} "},{"date":"0001-01-01","uri":"/methods/page/getterms/","title":"GetTerms","content":"Given this front matter:\ncontent/books/les-miserables.md\ryaml\r \rtoml\r \rjson\r \r--- tags: - historical - classic - fiction title: Les Misérables ---\r+++ tags = ['historical', 'classic', 'fiction'] title = 'Les Misérables' +++\r{ \"tags\": [ \"historical\", \"classic\", \"fiction\" ], \"title\": \"Les Misérables\" } This template code:\n{{ with .GetTerms \"tags\" }} \u003cp\u003eTags\u003c/p\u003e \u003cul\u003e {{ range . }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Is rendered to:\n\u003cp\u003eTags\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"/tags/historical/\"\u003ehistorical\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/tags/classic/\"\u003eclassic\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/tags/fiction/\"\u003efiction\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/gitinfo/","title":"GitInfo","content":"The GitInfo method on a Page object returns an object with additional methods.\nHugo’s Git integration is performant, but may increase build times on large sites.\nPrerequisites Install Git, create a repository, and commit your project files.\nYou must also allow Hugo to access your repository. In your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \renableGitInfo: true enableGitInfo = true { \"enableGitInfo\": true } Alternatively, use the command line flag when building your site:\nhugo --enableGitInfo When you set enableGitInfo to true, or enable the feature with the command line flag, the last modification date for each content page will be the Author Date of the last commit for that file.\nThis is configurable. See details.\nMethods AbbreviatedHash (string) The abbreviated commit hash.\n{{ with .GitInfo }} {{ .AbbreviatedHash }} → aab9ec0b3 {{ end }} AuthorDate (time.Time) The author date.\n{{ with .GitInfo }} {{ .AuthorDate.Format \"2006-01-02\" }} → 2023-10-09 {{ end }} AuthorEmail (string) The author’s email address, respecting gitmailmap.\n{{ with .GitInfo }} {{ .AuthorEmail }} → jsmith@example.org {{ end }} AuthorName (string) The author’s name, respecting gitmailmap.\n{{ with .GitInfo }} {{ .AuthorName }} → John Smith {{ end }} CommitDate (time.Time) The commit date.\n{{ with .GitInfo }} {{ .CommitDate.Format \"2006-01-02\" }} → 2023-10-09 {{ end }} Hash (string) The commit hash.\n{{ with .GitInfo }} {{ .Hash }} → aab9ec0b31ebac916a1468c4c9c305f2bebf78d4 {{ end }} Subject (string) The commit message subject.\n{{ with .GitInfo }} {{ .Subject }} → Add tutorials {{ end }} Last modified date By default, when enableGitInfo is true, the Lastmod method on a Page object returns the Git AuthorDate of the last commit that included the file.\nYou can change this behavior in your site configuration.\nHosting considerations When hosting your site in a CI/CD environment, the step that clones your project repository must perform a deep clone. If the clone is shallow, the Git information for a given file may not be accurate—it may reflect the most recent repository commit, not the commit that last modified the file.\nSome providers perform deep clones by default, others allow you to configure the clone depth, and some providers only perform shallow clones.\nHosting service Default clone depth Configurable Cloudflare Pages Shallow Yes 1 DigitalOcean App Platform Deep N/A GitHub Pages Shallow Yes 2 GitLab Pages Shallow Yes 3 Netlify Deep N/A Render Shallow No Vercel Shallow No To configure a Cloudflare Pages site for deep cloning, preface the site’s normal Hugo build command with git fetch --unshallow \u0026\u0026 (e.g., git fetch --unshallow \u0026\u0026 hugo). ↩︎\nYou can configure the GitHub Action to do a deep clone by specifying fetch-depth: 0 in the applicable “checkout” step of your workflow file, as shown in the Hugo documentation’s example workflow file. ↩︎\nYou can configure the GitLab Runner’s clone depth as explained in the GitLab documentation; see also the Hugo documentation’s example workflow file. ↩︎\n"},{"date":"0001-01-01","uri":"/methods/site/googleanalytics/","title":"GoogleAnalytics","content":"\rDeprecated in v0.120.0.\nUse Site.Config.Services.GoogleAnalytics.ID instead.\n"},{"date":"0001-01-01","uri":"/methods/pages/groupby/","title":"GroupBy","content":"For the optional sort order, specify either asc for ascending order, or desc for descending order.\n{{ range .Pages.GroupBy \"Section\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} To sort the groups in descending order:\n{{ range .Pages.GroupBy \"Section\" \"desc\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/pages/groupbydate/","title":"GroupByDate","content":"When grouping by date, the value is determined by your site configuration, defaulting to the date field in front matter.\nThe layout string has the same format as the layout string for the time.Format function. The resulting group key is localized for language and region.\nFor the optional sort order, specify either asc for ascending order, or desc for descending order.\nTo group content by year and month:\n{{ range .Pages.GroupByDate \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} To sort the groups in ascending order:\n{{ range .Pages.GroupByDate \"January 2006\" \"asc\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} The pages within each group will also be sorted by date, either ascending or descending depending on the grouping option. To sort the pages within each group, use one of the sorting methods. For example, to sort the pages within each group by title:\n{{ range .Pages.GroupByDate \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages.ByTitle }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Layout string Format a time.Time value based on Go’s reference time:\nMon Jan 2 15:04:05 MST 2006 Create a layout string using these components:\nDescription Valid components Year \"2006\" \"06\" Month \"Jan\" \"January\" \"01\" \"1\" Day of the week \"Mon\" \"Monday\" Day of the month \"2\" \"_2\" \"02\" Day of the year \"__2\" \"002\" Hour \"15\" \"3\" \"03\" Minute \"4\" \"04\" Second \"5\" \"05\" AM/PM mark \"PM\" Time zone offsets \"-0700\" \"-07:00\" \"-07\" \"-070000\" \"-07:00:00\" Replace the sign in the layout string with a Z to print Z instead of an offset for the UTC zone.\nDescription Valid components Time zone offsets \"Z0700\" \"Z07:00\" \"Z07\" \"Z070000\" \"Z07:00:00\" {{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ $t = $t.Format \"Jan 02, 2006 3:04 PM Z07:00\" }} {{ $t }} → Jan 27, 2023 11:44 PM -08:00 Strings such as PST and CET are not time zones. They are time zone abbreviations.\nStrings such as -07:00 and +01:00 are not time zones. They are time zone offsets.\nA time zone is a geographic area with the same local time. For example, the time zone abbreviated by PST and PDT (depending on Daylight Savings Time) is America/Los_Angeles.\n"},{"date":"0001-01-01","uri":"/methods/pages/groupbyexpirydate/","title":"GroupByExpiryDate","content":"When grouping by expiration date, the value is determined by your site configuration, defaulting to the expiryDate field in front matter.\nThe layout string has the same format as the layout string for the time.Format function. The resulting group key is localized for language and region.\nFor the optional sort order, specify either asc for ascending order, or desc for descending order.\nTo group content by year and month:\n{{ range .Pages.GroupByExpiryDate \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} To sort the groups in ascending order:\n{{ range .Pages.GroupByExpiryDate \"January 2006\" \"asc\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} The pages within each group will also be sorted by expiration date, either ascending or descending depending on your grouping option. To sort the pages within each group, use one of the sorting methods. For example, to sort the pages within each group by title:\n{{ range .Pages.GroupByExpiryDate \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages.ByTitle }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Layout string Format a time.Time value based on Go’s reference time:\nMon Jan 2 15:04:05 MST 2006 Create a layout string using these components:\nDescription Valid components Year \"2006\" \"06\" Month \"Jan\" \"January\" \"01\" \"1\" Day of the week \"Mon\" \"Monday\" Day of the month \"2\" \"_2\" \"02\" Day of the year \"__2\" \"002\" Hour \"15\" \"3\" \"03\" Minute \"4\" \"04\" Second \"5\" \"05\" AM/PM mark \"PM\" Time zone offsets \"-0700\" \"-07:00\" \"-07\" \"-070000\" \"-07:00:00\" Replace the sign in the layout string with a Z to print Z instead of an offset for the UTC zone.\nDescription Valid components Time zone offsets \"Z0700\" \"Z07:00\" \"Z07\" \"Z070000\" \"Z07:00:00\" {{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ $t = $t.Format \"Jan 02, 2006 3:04 PM Z07:00\" }} {{ $t }} → Jan 27, 2023 11:44 PM -08:00 Strings such as PST and CET are not time zones. They are time zone abbreviations.\nStrings such as -07:00 and +01:00 are not time zones. They are time zone offsets.\nA time zone is a geographic area with the same local time. For example, the time zone abbreviated by PST and PDT (depending on Daylight Savings Time) is America/Los_Angeles.\n"},{"date":"0001-01-01","uri":"/methods/pages/groupbylastmod/","title":"GroupByLastmod","content":"When grouping by last modification date, the value is determined by your site configuration, defaulting to the lastmod field in front matter.\nThe layout string has the same format as the layout string for the time.Format function. The resulting group key is localized for language and region.\nFor the optional sort order, specify either asc for ascending order, or desc for descending order.\nTo group content by year and month:\n{{ range .Pages.GroupByLastmod \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} To sort the groups in ascending order:\n{{ range .Pages.GroupByLastmod \"January 2006\" \"asc\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} The pages within each group will also be sorted by last modification date, either ascending or descending depending on your grouping option. To sort the pages within each group, use one of the sorting methods. For example, to sort the pages within each group by title:\n{{ range .Pages.GroupByLastmod \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages.ByTitle }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Layout string Format a time.Time value based on Go’s reference time:\nMon Jan 2 15:04:05 MST 2006 Create a layout string using these components:\nDescription Valid components Year \"2006\" \"06\" Month \"Jan\" \"January\" \"01\" \"1\" Day of the week \"Mon\" \"Monday\" Day of the month \"2\" \"_2\" \"02\" Day of the year \"__2\" \"002\" Hour \"15\" \"3\" \"03\" Minute \"4\" \"04\" Second \"5\" \"05\" AM/PM mark \"PM\" Time zone offsets \"-0700\" \"-07:00\" \"-07\" \"-070000\" \"-07:00:00\" Replace the sign in the layout string with a Z to print Z instead of an offset for the UTC zone.\nDescription Valid components Time zone offsets \"Z0700\" \"Z07:00\" \"Z07\" \"Z070000\" \"Z07:00:00\" {{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ $t = $t.Format \"Jan 02, 2006 3:04 PM Z07:00\" }} {{ $t }} → Jan 27, 2023 11:44 PM -08:00 Strings such as PST and CET are not time zones. They are time zone abbreviations.\nStrings such as -07:00 and +01:00 are not time zones. They are time zone offsets.\nA time zone is a geographic area with the same local time. For example, the time zone abbreviated by PST and PDT (depending on Daylight Savings Time) is America/Los_Angeles.\n"},{"date":"0001-01-01","uri":"/methods/pages/groupbyparam/","title":"GroupByParam","content":"For the optional sort order, specify either asc for ascending order, or desc for descending order.\n{{ range .Pages.GroupByParam \"color\" }} \u003cp\u003e{{ .Key | title }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} To sort the groups in descending order:\n{{ range .Pages.GroupByParam \"color\" \"desc\" }} \u003cp\u003e{{ .Key | title }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/pages/groupbyparamdate/","title":"GroupByParamDate","content":"The layout string has the same format as the layout string for the time.Format function. The resulting group key is localized for language and region.\nFor the optional sort order, specify either asc for ascending order, or desc for descending order.\nTo group content by year and month:\n{{ range .Pages.GroupByParamDate \"eventDate\" \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} To sort the groups in ascending order:\n{{ range .Pages.GroupByParamDate \"eventDate\" \"January 2006\" \"asc\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} The pages within each group will also be sorted by the parameter date, either ascending or descending depending on your grouping option. To sort the pages within each group, use one of the sorting methods. For example, to sort the pages within each group by title:\n{{ range .Pages.GroupByParamDate \"eventDate\" \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages.ByTitle }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Layout string Format a time.Time value based on Go’s reference time:\nMon Jan 2 15:04:05 MST 2006 Create a layout string using these components:\nDescription Valid components Year \"2006\" \"06\" Month \"Jan\" \"January\" \"01\" \"1\" Day of the week \"Mon\" \"Monday\" Day of the month \"2\" \"_2\" \"02\" Day of the year \"__2\" \"002\" Hour \"15\" \"3\" \"03\" Minute \"4\" \"04\" Second \"5\" \"05\" AM/PM mark \"PM\" Time zone offsets \"-0700\" \"-07:00\" \"-07\" \"-070000\" \"-07:00:00\" Replace the sign in the layout string with a Z to print Z instead of an offset for the UTC zone.\nDescription Valid components Time zone offsets \"Z0700\" \"Z07:00\" \"Z07\" \"Z070000\" \"Z07:00:00\" {{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ $t = $t.Format \"Jan 02, 2006 3:04 PM Z07:00\" }} {{ $t }} → Jan 27, 2023 11:44 PM -08:00 Strings such as PST and CET are not time zones. They are time zone abbreviations.\nStrings such as -07:00 and +01:00 are not time zones. They are time zone offsets.\nA time zone is a geographic area with the same local time. For example, the time zone abbreviated by PST and PDT (depending on Daylight Savings Time) is America/Los_Angeles.\n"},{"date":"0001-01-01","uri":"/methods/pages/groupbypublishdate/","title":"GroupByPublishDate","content":"When grouping by publish date, the value is determined by your site configuration, defaulting to the publishDate field in front matter.\nThe layout string has the same format as the layout string for the time.Format function. The resulting group key is localized for language and region.\nFor the optional sort order, specify either asc for ascending order, or desc for descending order.\nTo group content by year and month:\n{{ range .Pages.GroupByPublishDate \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} To sort the groups in ascending order:\n{{ range .Pages.GroupByPublishDate \"January 2006\" \"asc\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} The pages within each group will also be sorted by publish date, either ascending or descending depending on your grouping option. To sort the pages within each group, use one of the sorting methods. For example, to sort the pages within each group by title:\n{{ range .Pages.GroupByPublishDate \"January 2006\" }} \u003cp\u003e{{ .Key }}\u003c/p\u003e \u003cul\u003e {{ range .Pages.ByTitle }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Layout string Format a time.Time value based on Go’s reference time:\nMon Jan 2 15:04:05 MST 2006 Create a layout string using these components:\nDescription Valid components Year \"2006\" \"06\" Month \"Jan\" \"January\" \"01\" \"1\" Day of the week \"Mon\" \"Monday\" Day of the month \"2\" \"_2\" \"02\" Day of the year \"__2\" \"002\" Hour \"15\" \"3\" \"03\" Minute \"4\" \"04\" Second \"5\" \"05\" AM/PM mark \"PM\" Time zone offsets \"-0700\" \"-07:00\" \"-07\" \"-070000\" \"-07:00:00\" Replace the sign in the layout string with a Z to print Z instead of an offset for the UTC zone.\nDescription Valid components Time zone offsets \"Z0700\" \"Z07:00\" \"Z07\" \"Z070000\" \"Z07:00:00\" {{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ $t = $t.Format \"Jan 02, 2006 3:04 PM Z07:00\" }} {{ $t }} → Jan 27, 2023 11:44 PM -08:00 Strings such as PST and CET are not time zones. They are time zone abbreviations.\nStrings such as -07:00 and +01:00 are not time zones. They are time zone offsets.\nA time zone is a geographic area with the same local time. For example, the time zone abbreviated by PST and PDT (depending on Daylight Savings Time) is America/Los_Angeles.\n"},{"date":"0001-01-01","uri":"/methods/menu-entry/haschildren/","title":"HasChildren","content":"Use the HasChildren method when rendering a nested menu.\nWith this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: Products pageRef: /product weight: 10 - name: Product 1 pageRef: /products/product-1 parent: Products weight: 1 - name: Product 2 pageRef: /products/product-2 parent: Products weight: 2 [menus] [[menus.main]] name = 'Products' pageRef = '/product' weight = 10 [[menus.main]] name = 'Product 1' pageRef = '/products/product-1' parent = 'Products' weight = 1 [[menus.main]] name = 'Product 2' pageRef = '/products/product-2' parent = 'Products' weight = 2 { \"menus\": { \"main\": [ { \"name\": \"Products\", \"pageRef\": \"/product\", \"weight\": 10 }, { \"name\": \"Product 1\", \"pageRef\": \"/products/product-1\", \"parent\": \"Products\", \"weight\": 1 }, { \"name\": \"Product 2\", \"pageRef\": \"/products/product-2\", \"parent\": \"Products\", \"weight\": 2 } ] } } And this template:\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e \u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ if .HasChildren }} \u003cul\u003e {{ range .Children }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} \u003c/li\u003e {{ end }} \u003c/ul\u003e Hugo renders this HTML:\n\u003cul\u003e \u003cli\u003e \u003ca href=\"/products/\"\u003eProducts\u003c/a\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"/products/product-1/\"\u003eProduct 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/products/product-2/\"\u003eProduct 2\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/hasmenucurrent/","title":"HasMenuCurrent","content":"If the page object associated with the menu entry is a section, this method also returns true for any descendant of that section.\n{{ $currentPage := . }} {{ range site.Menus.main }} {{ if $currentPage.IsMenuCurrent .Menu . }} \u003ca class=\"active\" aria-current=\"page\" href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ else if $currentPage.HasMenuCurrent .Menu . }} \u003ca class=\"ancestor\" aria-current=\"true\" href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ else }} \u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ end }} {{ end }} See menu templates for a complete example.\n"},{"date":"0001-01-01","uri":"/methods/page/hasshortcode/","title":"HasShortcode","content":"By example, let’s use Plotly to render a chart:\ncontents/example.md\r{{\u003c plotly \u003e}} { \"data\": [ { \"x\": [\"giraffes\", \"orangutans\", \"monkeys\"], \"y\": [20, 14, 23], \"type\": \"bar\" } ], } {{\u003c /plotly \u003e}}\rThe shortcode is simple:\nlayouts/shortcodes/plotly.html\r{{ $id := printf \"plotly-%02d\" .Ordinal }} \u003cdiv id=\"{{ $id }}\"\u003e\u003c/div\u003e \u003cscript\u003e Plotly.newPlot(document.getElementById({{ $id }}), {{ .Inner | safeJS }}); \u003c/script\u003e\rNow we can selectively load the required JavaScript on pages that call the “plotly” shortcode:\nlayouts/baseof.html\r\u003chead\u003e ... {{ if .HasShortcode \"plotly\" }} \u003cscript src=\"https://cdn.plot.ly/plotly-2.28.0.min.js\"\u003e\u003c/script\u003e {{ end }} ... \u003c/head\u003e\r"},{"date":"0001-01-01","uri":"/methods/page/headingsfiltered/","title":"HeadingsFiltered","content":"Use in conjunction with the Related method on a Pages object. See details.\n"},{"date":"0001-01-01","uri":"/methods/resource/height/","title":"Height","content":"{{ with resources.Get \"images/a.jpg\" }} {{ .Height }} → 400 {{ end }} Use the Width and Height methods together when rendering an img element:\n{{ with resources.Get \"images/a.jpg\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\"\u003e {{ end }} Use this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/methods/site/home/","title":"Home","content":"This method is useful for obtaining a link to the home page.\nSite configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rbaseURL: https://example.org/docs/ baseURL = 'https://example.org/docs/' { \"baseURL\": \"https://example.org/docs/\" } Template:\n{{ .Site.Home.Permalink }} → https://example.org/docs/ {{ .Site.Home.RelPermalink }} → /docs/ "},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-21yunbox/","title":"Host on 21YunBox","content":"21YunBox is a fully-managed cloud platform dedicated to make web deployment easy within the Chinese Great Firewall where you can host static sites, backend APIs, databases, cron jobs, and all your other apps in one place. It provides blazing fast Chinese CDN, continuous deployment, one-click HTTPS and other services like managed databases and backend web services, providing an avenue to launch web projects in China.\n21YunBox includes the following features:\nContinuous, automatic builds \u0026 deploys from GitHub and Gitee Automatic SSL certificates through Let’s Encrypt Instant cache invalidation with a blazing fast, Chinese CDN Unlimited custom domains Automatic Brotli compression for faster sites Native HTTP/2 support Automatic HTTP → HTTPS redirects Custom URL redirects and rewrites Prerequisites This guide assumes you already have a Hugo project to deploy. If you need a project, use the Quick Start to get started or fork 21YunBox’s Hugo Example before continuing.\nSetup You can set up a Hugo site on 21YunBox in two quick steps:\nCreate a new web service on 21YunBox, and give 21YunBox permission to access your GitHub or Gitee repo. Use the following values during creation: Field Value Environment Static Site Build Command hugo --gc --minify (or your own build command) Publish Directory ./public (or your own output directory) That’s it! Your site will be live on your 21YunBox URL (which looks like yoursite.21yunbox.com) as soon as the build is done.\nContinuous deploys Now that 21YunBox is connected to your repo, it will automatically build and publish your site any time you push to GitHub.\nEvery deploy automatically and instantly invalidates the CDN cache, so your users can always access the latest content on your site.\nCustom domains Add your own domains to your site easily using 21YunBox’s custom domains guide.\nSupport Click here to contact with 21YunBox’ experts if you need help.\n"},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-aws-amplify/","title":"Host on AWS Amplify","content":"In this guide we’ll walk through how to deploy and host your Hugo site using the AWS Amplify Console.\nAWS Amplify is a combination of client library, CLI toolchain, and a Console for continuous deployment and hosting. The Amplify CLI and library allow developers to get up \u0026 running with full-stack cloud-powered applications with features like authentication, storage, serverless GraphQL or REST APIs, analytics, Lambda functions, \u0026 more. The Amplify Console provides continuous deployment and hosting for modern web apps (single page apps and static site generators). Continuous deployment allows developers to deploy updates to their web app on every code commit to their Git repository. Hosting includes features such as globally available CDNs, easy custom domain setup + HTTPS, feature branch deployments, and password protection.\nPre-requisites Sign up for an AWS Account. There are no upfront charges or any term commitments to create an AWS account and signing up gives you immediate access to the AWS Free Tier. You have an account with GitHub, GitLab, or Bitbucket. You have completed the Quick Start or have a Hugo website you are ready to deploy and share with the world. Hosting Log in to the AWS Amplify Console and choose Get Started under Deploy. Connect a branch from your GitHub, Bitbucket, GitLab, or AWS CodeCommit repository. Connecting your repository allows Amplify to deploy updates on every code commit to a branch. Accept the default build settings. The Amplify Console automatically detects your Hugo build settings and output directory. Review your changes and then choose Save and deploy. The Amplify Console will pull code from your repository, build changes to the backend and frontend, and deploy your build artifacts at https://master.unique-id.amplifyapp.com. Bonus: Screenshots of your app on different devices to find layout issues.\nUsing a newer version of Hugo If you need to use a different, perhaps newer, version of Hugo than the version currently supported by AWS Amplify:\nVisit the AWS Amplify Console, and click the app you would like to modify In the side navigation bar, Under App Settings, click Build settings On the Build settings page, near the bottom, there is a section called Build image settings. Click Edit Under Live package updates, click Add package version override From the selection, click Hugo and ensure the version field says latest Click Save to save the changes. "},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-azure-static-web-apps/","title":"Host on Azure Static Web Apps","content":"You can create and deploy a Hugo web application to Azure Static Web Apps. The final result is a new Azure Static Web App with associated GitHub Actions that give you control over how the app is built and published. You’ll learn how to create a Hugo app, set up an Azure Static Web App and deploy the Hugo app to Azure.\nHere’s the tutorial on how to Publish a Hugo site to Azure Static Web Apps.\n"},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-cloudflare-pages/","title":"Host on Cloudflare Pages","content":"Cloudflare Pages are super fast, always up-to-date, and deployed directly from your Git provider.\nCloudflare Pages docs have a detailed tutorial on how to deploy a Hugo site.\n"},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-firebase/","title":"Host on Firebase","content":"Assumptions You have an account with Firebase. (If you don’t, you can sign up for free using your Google account.) You have completed the Quick Start or have a completed Hugo website ready for deployment. Initial setup Go to the Firebase console and create a new project (unless you already have a project). You will need to globally install firebase-tools (node.js):\nnpm install -g firebase-tools Log in to Firebase (setup on your local machine) using firebase login, which opens a browser where you can select your account. Use firebase logout in case you are already logged in but to the wrong account.\nfirebase login In the root of your Hugo project, initialize the Firebase project with the firebase init command:\nfirebase init From here:\nChoose Hosting in the feature question Choose the project you just set up Accept the default for your database rules file Accept the default for the publish directory, which is public Choose “No” in the question if you are deploying a single-page app Using Firebase \u0026 GitHub CI/CD In new versions of Firebase, some other questions apply:\nSet up automatic builds and deploys with GitHub? Here you will be redirected to login in your GitHub account to get permissions. Confirm.\nFor which GitHub repository would you like to set up a GitHub workflow? (format: user/repository) Include the repository you will use in the format above (Account/Repo) Firebase script with retrieve credentials, create a service account you can later manage in your GitHub settings.\nSet up the workflow to run a build script before every deploy? Here is your opportunity to include some commands before you run the deploy.\nSet up automatic deployment to your site’s live channel when a PR is merged? You can let in the default option (main)\nAfter that Firebase has been set in your project with CI/CD. After that run:\nhugo \u0026\u0026 firebase deploy With this you will have the app initialized manually. After that you can manage and fix your GitHub workflow from: https://github.com/your-account/your-repo/actions\nDon’t forget to update your static pages before push!\nManual deploy To deploy your Hugo site, execute the firebase deploy command, and your site will be up in no time:\nhugo \u0026\u0026 firebase deploy CI setup (other tools) You can generate a deploy token using\nfirebase login:ci You can also set up your CI and add the token to a private variable like $FIREBASE_DEPLOY_TOKEN.\nThis is a private secret and it should not appear in a public repository. Make sure you understand your chosen CI and that it’s not visible to others.\nYou can then add a step in your build to do the deployment using the token:\nfirebase deploy --token $FIREBASE_DEPLOY_TOKEN Reference links Firebase CLI Reference "},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-github/","title":"Host on GitHub Pages","content":"GitHub provides free and fast static hosting over SSL for personal, organization, or project pages directly from a GitHub repository via its GitHub Pages service and automating development workflows and build with GitHub Actions.\nPrerequisites Create a GitHub account Install Git Create a Hugo site and test it locally with hugo server. Types of sites There are three types of GitHub Pages sites: project, user, and organization. Project sites are connected to a specific project hosted on GitHub. User and organization sites are connected to a specific account on GitHub.com.\nSee the GitHub Pages documentation to understand the requirements for repository ownership and naming.\nProcedure Step 1 Create a GitHub repository. Step 2 Push your local repository to GitHub. Step 3 Visit your GitHub repository. From the main menu choose Settings \u003e Pages. In the center of your screen you will see this: Step 4 Change the Source to GitHub Actions. The change is immediate; you do not have to press a Save button. Step 5 Create an empty file in your local repository. .github/workflows/hugo.yaml Step 6 Copy and paste the YAML below into the file you created. Change the branch name and Hugo version as needed. .github/workflows/hugo.yaml\r# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - main # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \"pages\" cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.122.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v4 - name: Install Node.js dependencies run: \"[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026\u0026 npm ci || true\" - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc \\ --minify \\ --baseURL \"${{ steps.pages.outputs.base_url }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v2 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v3\rStep 7 Commit the change to your local repository with a commit message of something like “Add workflow”, and push to GitHub. Step 8 From GitHub’s main menu, choose Actions. You will see something like this: Step 9 When GitHub has finished building and deploying your site, the color of the status indicator will change to green. Step 10 Click on the commit message as shown above. You will see this: Under the deploy step, you will see a link to your live site.\nIn the future, whenever you push a change from your local repository, GitHub will rebuild your site and deploy the changes.\nCustomize the workflow The example workflow above includes this step, which typically takes 10‑15 seconds:\n- name: Install Dart Sass run: sudo snap install dart-sass You may remove this step if your site, themes, and modules do not transpile Sass to CSS using the Dart Sass transpiler.\nAdditional resources Learn more about GitHub Actions Caching dependencies to speed up workflows Manage a custom domain for your GitHub Pages site "},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-gitlab/","title":"Host on GitLab Pages","content":"Assumptions Working familiarity with Git for version control Completion of the Hugo Quick Start A GitLab account A Hugo website on your local machine that you are ready to publish BaseURL The baseURL in your site configuration must reflect the full URL of your GitLab pages repository if you are using the default GitLab Pages URL (e.g., https://\u003cYourUsername\u003e.gitlab.io/\u003cyour-hugo-site\u003e/) and not a custom domain.\nConfigure GitLab CI/CD Define your CI/CD jobs by creating a .gitlab-ci.yml file in the root of your project.\n.gitlab-ci.yml\rvariables: DART_SASS_VERSION: 1.70.0 HUGO_VERSION: 0.122.0 NODE_VERSION: 20.x GIT_DEPTH: 0 GIT_STRATEGY: clone GIT_SUBMODULE_STRATEGY: recursive TZ: America/Los_Angeles image: name: golang:1.20.6-bookworm pages: script: # Install brotli - apt-get update - apt-get install -y brotli # Install Dart Sass - curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz - tar -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz - cp -r dart-sass/ /usr/local/bin - rm -rf dart-sass* - export PATH=/usr/local/bin/dart-sass:$PATH # Install Hugo - curl -LJO https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb - apt-get install -y ./hugo_extended_${HUGO_VERSION}_linux-amd64.deb - rm hugo_extended_${HUGO_VERSION}_linux-amd64.deb # Install Node.js - curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | bash - - apt-get install -y nodejs # Install Node.js dependencies - \"[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026\u0026 npm ci || true\" # Build - hugo --gc --minify # Compress - find public -type f -regex '.*\\.\\(css\\|html\\|js\\|txt\\|xml\\)$' -exec gzip -f -k {} \\; - find public -type f -regex '.*\\.\\(css\\|html\\|js\\|txt\\|xml\\)$' -exec brotli -f -k {} \\; artifacts: paths: - public rules: - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\rPush your Hugo website to GitLab Next, create a new repository on GitLab. It is not necessary to make the repository public. In addition, you might want to add /public to your .gitignore file, as there is no need to push compiled assets to GitLab or keep your output website in version control.\n# initialize new git repository git init # add /public directory to our .gitignore file echo \"/public\" \u003e\u003e .gitignore # commit and push code to master branch git add . git commit -m \"Initial commit\" git remote add origin https://gitlab.com/YourUsername/your-hugo-site.git git push -u origin master Wait for your page to build That’s it! You can now follow the CI agent building your page at https://gitlab.com/\u003cYourUsername\u003e/\u003cyour-hugo-site\u003e/pipelines.\nAfter the build has passed, your new website is available at https://\u003cYourUsername\u003e.gitlab.io/\u003cyour-hugo-site\u003e/.\nNext steps GitLab supports using custom CNAME’s and TLS certificates. For more details on GitLab Pages, see the GitLab Pages setup documentation.\n"},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-keycdn/","title":"Host on KeyCDN","content":"KeyCDN provides a multitude of features to help accelerate and secure your Hugo site globally including Brotli compression, Let’s Encrypt support, Origin Shield, and more.\nAssumptions You already have a Hugo page configured You have a GitLab account You have a KeyCDN account Create a KeyCDN Pull Zone The first step will be to log in to your KeyCDN account and create a new zone. Name this whatever you like and select the Pull Zone option. As for the origin URL, your site will be running on GitLab Pages with a URL of https://youruser.gitlab.io/reponame/. Use this as the Origin URL.\nWhile the origin location doesn’t exist yet, you will need to use your new Zone URL address (or Zone Alias) in the .gitlab-ci.yml file that will be uploaded to your GitLab project.\nEnsure that you use your Zone URL or Zone alias as the BASEURL variable in the example below. This will be the user-visible website address.\nConfigure Your .gitlab-ci.yml File Your .gitlab-ci.yml file should look similar to the example below. Be sure to modify any variables that are specific to your setup.\nimage: alpine:latest variables: BASEURL: \"https://cipull-7bb7.kxcdn.com/\" HUGO_VERSION: \"0.26\" HUGO_CHECKSUM: \"67e4ba5ec2a02c8164b6846e30a17cc765b0165a5b183d5e480149baf54e1a50\" KEYCDN_ZONE_ID: \"75544\" before_script: - apk update - apk add curl pages: stage: deploy script: - apk add git - git submodule update --init - curl -sSL https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_${HUGO_VERSION}_Linux-64bit.tar.gz -o /tmp/hugo.tar.gz - echo \"${HUGO_CHECKSUM} /tmp/hugo.tar.gz\" | sha256sum -c - tar xf /tmp/hugo.tar.gz hugo -C /tmp/ \u0026\u0026 cp /tmp/hugo /usr/bin - hugo --baseURL ${BASEURL} - curl \"https://api.keycdn.com/zones/purge/${KEYCDN_ZONE_ID}.json\" -u \"${KEYCDN_API_KEY}:\" artifacts: paths: - public only: - master Using this integration method, you will have to specify the Zone ID and your KeyCDN API key as secret variables. To do this, navigate to the top-left menu bar in GitLab and select Projects. Then, select your project and click on the Settings page. Finally, select Pipelines from the sub-menu and scroll down to the Secret Variable section.\nThe Secret Variable for your Zone ID should look similar to:\nWhile the Secret Variable for your API Key will look similar to:\nThe Zone ID and API key are used to purge your zone – it’s not strictly needed but otherwise, the CDN might deliver older versions of your assets for quite a while.\nPush your changes to GitLab Now it’s time to push the newly created repository to GitLab:\ngit remote add origin git@gitlab.com:youruser/ci-example.git git push -u origin master You can watch the progress and CI job output in your GitLab project under “Pipelines”.\nAfter verifying your CI job ran without issues, first check that your GitLab page shows up under https://youruser.gitlab.io/reponame/ (it might look broken depending on your browser settings as all links point to your KeyCDN zone – don’t worry about that) and then by heading to whatever Zone alias / Zone URL you defined.\nTo learn more about Hugo hosting options with KeyCDN, check out the complete Hugo hosting with KeyCDN integration guide.\n"},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-netlify/","title":"Host on Netlify","content":"Netlify provides continuous deployment services, global CDN, ultra-fast DNS, atomic deploys, instant cache invalidation, one-click SSL, a browser-based interface, a CLI, and many other features for managing your Hugo website.\nAssumptions You have an account with GitHub, GitLab, or Bitbucket. You have completed the Quick Start or have a Hugo website you are ready to deploy and share with the world. You do not already have a Netlify account. Create a Netlify account Go to app.netlify.com and select your preferred sign up method. This will likely be a hosted Git provider, although you also have the option to sign up with an email address.\nThe following examples use GitHub, but other git providers will follow a similar process.\nSelecting GitHub will bring up an authorization modal for authentication. Select “Authorize application.”\nCreate a new site with continuous deployment You’re now already a Netlify member and should be brought to your new dashboard. Select “New site from git.”\nNetlify will then start walking you through the steps necessary for continuous deployment. First, you’ll need to select your git provider again, but this time you are giving Netlify added permissions to your repositories.\nAnd then again with the GitHub authorization modal:\nSelect the repo you want to use for continuous deployment. If you have a large number of repositories, you can filter through them in real time using repo search:\nOnce selected, you’ll be brought to a screen for basic setup. Here you can select the branch you want to publish, your build command, and your publish (i.e. deploy) directory. The publish directory should mirror that of what you’ve set in your site configuration, the default of which is public. The following steps assume you are publishing from the master branch.\nConfigure Hugo version in Netlify You can set Hugo version for your environments in netlify.toml file or set HUGO_VERSION as a build environment variable in the Netlify console.\nFor production:\nnetlify.toml\r[context.production.environment] HUGO_VERSION = \"0.122.0\"\rFor testing:\nnetlify.toml\r[context.deploy-preview.environment] HUGO_VERSION = \"0.122.0\"\rThe Netlify configuration file can be a little hard to understand and get right for the different environment, and you may get some inspiration and tips from this site’s netlify.toml:\n[build] publish = \"public\" command = \"hugo --gc --minify\" [build.environment] HUGO_VERSION = \"0.122.0\" [context.production.environment] HUGO_ENV = \"production\" HUGO_ENABLEGITINFO = \"true\" [context.split1] command = \"hugo --gc --minify --enableGitInfo\" [context.split1.environment] HUGO_ENV = \"production\" [context.deploy-preview] command = \"hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\" [context.branch-deploy] command = \"hugo --gc --minify -b $DEPLOY_PRIME_URL\" [context.next.environment] HUGO_ENABLEGITINFO = \"true\" [[redirects]] from = \"/npmjs/*\" to = \"/npmjs/\" status = 200\rBuild and deploy site In the Netlify console, selecting “Deploy site” will immediately take you to a terminal for your build:.\nOnce the build is finished—this should only take a few seconds–you should now see a “Hero Card” at the top of your screen letting you know the deployment is successful. The Hero Card is the first element that you see in most pages. It allows you to see a quick summary of the page and gives access to the most common/pertinent actions and information. You’ll see that the URL is automatically generated by Netlify. You can update the URL in “Settings.”\nVisit the live site.\nNow every time you push changes to your hosted git repository, Netlify will rebuild and redeploy your site.\nSee this blog post for more details about how Netlify handles Hugo versions.\nUse Hugo themes with Netlify The git clone method for installing themes is not supported by Netlify. If you were to use git clone, it would require you to recursively remove the .git subdirectory from the theme folder and would therefore prevent compatibility with future versions of the theme.\nA better approach is to install a theme as a proper git submodule. You can read the GitHub documentation for submodules or those found on Git’s website for more information, but the command is similar to that of git clone:\ncd themes git submodule add https://github.com/\u003cTHEMECREATOR\u003e/\u003cTHEMENAME\u003e It is recommended to only use stable versions of a theme (if it’s versioned) and always check the changelog. This can be done by checking out a specific release within the theme’s directory.\nSwitch to the theme’s directory and list all available versions:\ncd themes/\u003ctheme\u003e git tag # exit with q You can checkout a specific version as follows:\ngit checkout tags/\u003cversion-name\u003e You can update a theme to the latest version by executing the following command in the root directory of your project:\ngit submodule update --rebase --remote Next steps You now have a live website served over HTTPS, distributed through CDN, and configured for continuous deployment. Dig deeper into the Netlify documentation:\nUsing a Custom Domain Setting up HTTPS on Custom Domains Redirects and Rewrite Rules "},{"date":"0001-01-01","uri":"/hosting-and-deployment/hosting-on-render/","title":"Host on Render","content":"Introduction Render is a fully-managed cloud platform where you can host static sites, backend APIs, databases, cron jobs, and all your other apps in one place.\nStatic sites are completely free on Render and include the following:\nContinuous, automatic builds \u0026 deploys from GitHub and GitLab. Automatic SSL certificates through Let’s Encrypt. Instant cache invalidation with a lightning fast, global CDN. Unlimited collaborators. Unlimited custom domains. Automatic Brotli compression for faster sites. Native HTTP/2 support. Pull Request Previews. Automatic HTTP → HTTPS redirects. Custom URL redirects and rewrites. Assumptions You have an account with GitHub or GitLab. You have completed the Quick Start or have a Hugo website you are ready to deploy and share with the world. You have a Render account. You can sign up at https://render.com/register. Deployment You can set up a Hugo site on Render in two quick steps:\nCreate a new Static Site on Render, and give Render permission to access your GitHub/GitLab repo. Use the following values during creation: Field Value Build Command hugo --gc --minify (or your own build command) Publish Directory public (or your own output directory) That’s it! Your site will be live on your Render URL (which looks like yoursite.onrender.com) as soon as the build is done.\nContinuous deploys Now that Render is connected to your repo, it will automatically build and publish your site any time you push to your GitHub/GitLab.\nYou can choose to disable auto deploys under the Settings section for your site and deploy it manually from the Render dashboard.\nCDN and cache invalidation Render hosts your site on a global, lightning fast CDN which ensures the fastest possible download times for all your users across the globe.\nEvery deploy automatically and instantly invalidates the CDN cache, so your users can always access the latest content on your site.\nCustom domains Add your own domains to your site easily using Render’s custom domains guide.\nPull Request previews With Pull Request (PR) previews, you can visualize changes introduced in a pull request instead of simply relying on code reviews.\nOnce enabled, every PR for your site will automatically generate a new static site based on the code in the PR. It will have its own URL, and it will be deleted automatically when the PR is closed.\nRead more about Pull Request Previews on Render.\nHugo themes Render automatically downloads all Git submodules defined in your Git repo on every build. This way Hugo themes added as submodules work as expected.\nSupport Chat with Render developers at https://render.com/chat or email support@render.com if you need help.\n"},{"date":"0001-01-01","uri":"/methods/time/hour/","title":"Hour","content":"{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Hour }} → 23 "},{"date":"0001-01-01","uri":"/methods/duration/hours/","title":"Hours","content":"{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }} {{ $d.Hours }} → 3.5420833333333333 "},{"date":"0001-01-01","uri":"/commands/hugo/","title":"hugo","content":"hugo hugo builds your site\nSynopsis hugo is the main command, used to build your Hugo site.\nHugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go.\nComplete documentation is available at https://gohugo.io/.\nhugo [flags] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r-D, --buildDrafts include content marked as draft\r-E, --buildExpired include expired content\r-F, --buildFuture include content with publishdate in the future\r--cacheDir string filesystem path to cache directory\r--cleanDestinationDir remove files from destination not found in static directories\r--clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r-c, --contentDir string filesystem path to content directory\r--debug debug output\r-d, --destination string filesystem path to write files to\r--disableKinds strings disable different kind of pages (home, RSS etc.)\r--enableGitInfo add Git revision, date, author, and CODEOWNERS info to the pages\r-e, --environment string build environment\r--forceSyncStatic copy all files when static is changed.\r--gc enable to run some cleanup tasks (remove unused cache files) after the build\r-h, --help help for hugo\r--ignoreCache ignores the cache directory\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r-l, --layoutDir string filesystem path to layout directory\r--logLevel string log level (debug|info|warn|error)\r--minify minify any supported output format (HTML, XML etc.)\r--noBuildLock don't create .hugo_build.lock file\r--noChmod don't sync permission mode of files\r--noTimes don't sync modification time of files\r--panicOnWarning panic on first WARNING log\r--poll string set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes\r--printI18nWarnings print missing translations\r--printMemoryUsage print memory usage to screen at intervals\r--printPathWarnings print warnings on duplicate target paths etc.\r--printUnusedTemplates print warnings on unused templates.\r--quiet build in quiet mode\r--renderToMemory render to memory (only useful for benchmark testing)\r-s, --source string filesystem path to read files relative from\r--templateMetrics display metrics about template executions\r--templateMetricsHints calculate some improvement hints when combined with --templateMetrics\r-t, --theme strings themes to use (located in /themes/THEMENAME/)\r--themesDir string filesystem path to themes directory\r--trace file write trace to file (not useful in general)\r-v, --verbose verbose output\r-w, --watch watch filesystem for changes and recreate as needed SEE ALSO hugo completion\t- Generate the autocompletion script for the specified shell hugo config\t- Print the site configuration hugo convert\t- Convert your content to different formats hugo deploy\t- Deploy your site to a Cloud provider. hugo env\t- Print Hugo version and environment info hugo gen\t- A collection of several useful generators. hugo import\t- Import your site from others. hugo list\t- Listing out various types of content hugo mod\t- Various Hugo Modules helpers. hugo new\t- Create new content for your site hugo server\t- A high performance webserver hugo version\t- Print Hugo version and environment info "},{"date":"0001-01-01","uri":"/commands/hugo_completion/","title":"hugo completion","content":"hugo completion Generate the autocompletion script for the specified shell\nSynopsis Generate the autocompletion script for hugo for the specified shell. See each sub-command’s help for details on how to use the generated script.\nOptions -h, --help help for completion Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site hugo completion bash\t- Generate the autocompletion script for bash hugo completion fish\t- Generate the autocompletion script for fish hugo completion powershell\t- Generate the autocompletion script for powershell hugo completion zsh\t- Generate the autocompletion script for zsh "},{"date":"0001-01-01","uri":"/commands/hugo_completion_bash/","title":"hugo completion bash","content":"hugo completion bash Generate the autocompletion script for bash\nSynopsis Generate the autocompletion script for the bash shell.\nThis script depends on the ‘bash-completion’ package. If it is not installed already, you can install it via your OS’s package manager.\nTo load completions in your current shell session:\nsource \u003c(hugo completion bash)\rTo load completions for every new session, execute once:\nLinux: hugo completion bash \u003e /etc/bash_completion.d/hugo\rmacOS: hugo completion bash \u003e $(brew --prefix)/etc/bash_completion.d/hugo\rYou will need to start a new shell for this setup to take effect.\nhugo completion bash Options -h, --help help for bash\r--no-descriptions disable completion descriptions Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo completion\t- Generate the autocompletion script for the specified shell "},{"date":"0001-01-01","uri":"/commands/hugo_completion_fish/","title":"hugo completion fish","content":"hugo completion fish Generate the autocompletion script for fish\nSynopsis Generate the autocompletion script for the fish shell.\nTo load completions in your current shell session:\nhugo completion fish | source\rTo load completions for every new session, execute once:\nhugo completion fish \u003e ~/.config/fish/completions/hugo.fish\rYou will need to start a new shell for this setup to take effect.\nhugo completion fish [flags] Options -h, --help help for fish\r--no-descriptions disable completion descriptions Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo completion\t- Generate the autocompletion script for the specified shell "},{"date":"0001-01-01","uri":"/commands/hugo_completion_powershell/","title":"hugo completion powershell","content":"hugo completion powershell Generate the autocompletion script for powershell\nSynopsis Generate the autocompletion script for powershell.\nTo load completions in your current shell session:\nhugo completion powershell | Out-String | Invoke-Expression\rTo load completions for every new session, add the output of the above command to your powershell profile.\nhugo completion powershell [flags] Options -h, --help help for powershell\r--no-descriptions disable completion descriptions Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo completion\t- Generate the autocompletion script for the specified shell "},{"date":"0001-01-01","uri":"/commands/hugo_completion_zsh/","title":"hugo completion zsh","content":"hugo completion zsh Generate the autocompletion script for zsh\nSynopsis Generate the autocompletion script for the zsh shell.\nIf shell completion is not already enabled in your environment you will need to enable it. You can execute the following once:\necho \"autoload -U compinit; compinit\" \u003e\u003e ~/.zshrc\rTo load completions in your current shell session:\nsource \u003c(hugo completion zsh)\rTo load completions for every new session, execute once:\nLinux: hugo completion zsh \u003e \"${fpath[1]}/_hugo\"\rmacOS: hugo completion zsh \u003e $(brew --prefix)/share/zsh/site-functions/_hugo\rYou will need to start a new shell for this setup to take effect.\nhugo completion zsh [flags] Options -h, --help help for zsh\r--no-descriptions disable completion descriptions Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo completion\t- Generate the autocompletion script for the specified shell "},{"date":"0001-01-01","uri":"/commands/hugo_config/","title":"hugo config","content":"hugo config Print the site configuration\nSynopsis Print the site configuration, both default and custom settings.\nhugo config [command] [flags] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r-c, --contentDir string filesystem path to content directory\r--format string preferred file format (toml, yaml or json) (default \"toml\")\r-h, --help help for config\r--lang string the language to display config for. Defaults to the first language defined.\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site hugo config mounts\t- Print the configured file mounts "},{"date":"0001-01-01","uri":"/commands/hugo_config_mounts/","title":"hugo config mounts","content":"hugo config mounts Print the configured file mounts\nhugo config mounts [flags] [args] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r-c, --contentDir string filesystem path to content directory\r-h, --help help for mounts\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo config\t- Print the site configuration "},{"date":"0001-01-01","uri":"/commands/hugo_convert/","title":"hugo convert","content":"hugo convert Convert your content to different formats\nSynopsis Convert your content (e.g. front matter) to different formats.\nSee convert’s subcommands toJSON, toTOML and toYAML for more information.\nOptions -h, --help help for convert\r-o, --output string filesystem path to write files to\r--unsafe enable less safe operations, please backup first Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site hugo convert toJSON\t- Convert front matter to JSON hugo convert toTOML\t- Convert front matter to TOML hugo convert toYAML\t- Convert front matter to YAML "},{"date":"0001-01-01","uri":"/commands/hugo_convert_tojson/","title":"hugo convert toJSON","content":"hugo convert toJSON Convert front matter to JSON\nSynopsis toJSON converts all front matter in the content directory to use JSON for the front matter.\nhugo convert toJSON [flags] [args] Options -h, --help help for toJSON Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r-o, --output string filesystem path to write files to\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r--unsafe enable less safe operations, please backup first\r-v, --verbose verbose output SEE ALSO hugo convert\t- Convert your content to different formats "},{"date":"0001-01-01","uri":"/commands/hugo_convert_totoml/","title":"hugo convert toTOML","content":"hugo convert toTOML Convert front matter to TOML\nSynopsis toTOML converts all front matter in the content directory to use TOML for the front matter.\nhugo convert toTOML [flags] [args] Options -h, --help help for toTOML Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r-o, --output string filesystem path to write files to\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r--unsafe enable less safe operations, please backup first\r-v, --verbose verbose output SEE ALSO hugo convert\t- Convert your content to different formats "},{"date":"0001-01-01","uri":"/commands/hugo_convert_toyaml/","title":"hugo convert toYAML","content":"hugo convert toYAML Convert front matter to YAML\nSynopsis toYAML converts all front matter in the content directory to use YAML for the front matter.\nhugo convert toYAML [flags] [args] Options -h, --help help for toYAML Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r-o, --output string filesystem path to write files to\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r--unsafe enable less safe operations, please backup first\r-v, --verbose verbose output SEE ALSO hugo convert\t- Convert your content to different formats "},{"date":"0001-01-01","uri":"/commands/hugo_deploy/","title":"hugo deploy","content":"hugo deploy Deploy your site to a Cloud provider.\nSynopsis Deploy your site to a Cloud provider.\nSee https://gohugo.io/hosting-and-deployment/hugo-deploy/ for detailed documentation.\nhugo deploy [flags] [args] Options --confirm ask for confirmation before making changes to the target\r--dryRun dry run\r--force force upload of all files\r-h, --help help for deploy\r--invalidateCDN invalidate the CDN cache listed in the deployment target (default true)\r--maxDeletes int maximum # of files to delete, or -1 to disable (default 256)\r--target string target deployment from deployments section in config file; defaults to the first one\r--workers int number of workers to transfer files. defaults to 10 (default 10) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site "},{"date":"0001-01-01","uri":"/commands/hugo_env/","title":"hugo env","content":"hugo env Print Hugo version and environment info\nSynopsis Print Hugo version and environment info. This is useful in Hugo bug reports\nhugo env [flags] [args] Options -h, --help help for env Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site "},{"date":"0001-01-01","uri":"/commands/hugo_gen/","title":"hugo gen","content":"hugo gen A collection of several useful generators.\nOptions -h, --help help for gen Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site hugo gen chromastyles\t- Generate CSS stylesheet for the Chroma code highlighter hugo gen doc\t- Generate Markdown documentation for the Hugo CLI. hugo gen man\t- Generate man pages for the Hugo CLI "},{"date":"0001-01-01","uri":"/commands/hugo_gen_chromastyles/","title":"hugo gen chromastyles","content":"hugo gen chromastyles Generate CSS stylesheet for the Chroma code highlighter\nSynopsis Generate CSS stylesheet for the Chroma code highlighter for a given style. This stylesheet is needed if markup.highlight.noClasses is disabled in config.\nSee https://xyproto.github.io/splash/docs/all.html for a preview of the available styles\nhugo gen chromastyles [flags] [args] Options -h, --help help for chromastyles\r--highlightStyle string style used for highlighting lines (see https://github.com/alecthomas/chroma)\r--linesStyle string style used for line numbers (see https://github.com/alecthomas/chroma)\r--style string highlighter style (see https://xyproto.github.io/splash/docs/) (default \"friendly\") Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo gen\t- A collection of several useful generators. "},{"date":"0001-01-01","uri":"/commands/hugo_gen_doc/","title":"hugo gen doc","content":"hugo gen doc Generate Markdown documentation for the Hugo CLI.\nSynopsis Generate Markdown documentation for the Hugo CLI. This command is, mostly, used to create up-to-date documentation of Hugo’s command-line interface for https://gohugo.io/.\nIt creates one Markdown file per command with front matter suitable\rfor rendering in Hugo.\rhugo gen doc [flags] [args] Options --dir string the directory to write the doc. (default \"/tmp/hugodoc/\")\r-h, --help help for doc Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo gen\t- A collection of several useful generators. "},{"date":"0001-01-01","uri":"/commands/hugo_gen_man/","title":"hugo gen man","content":"hugo gen man Generate man pages for the Hugo CLI\nSynopsis This command automatically generates up-to-date man pages of Hugo’s command-line interface. By default, it creates the man page files in the “man” directory under the current directory.\nhugo gen man [flags] [args] Options --dir string the directory to write the man pages. (default \"man/\")\r-h, --help help for man Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo gen\t- A collection of several useful generators. "},{"date":"0001-01-01","uri":"/commands/hugo_import/","title":"hugo import","content":"hugo import Import your site from others.\nSynopsis Import your site from other web site generators like Jekyll.\nImport requires a subcommand, e.g. hugo import jekyll jekyll_root_path target_path.\nOptions -h, --help help for import Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site hugo import jekyll\t- hugo import from Jekyll "},{"date":"0001-01-01","uri":"/commands/hugo_import_jekyll/","title":"hugo import jekyll","content":"hugo import jekyll hugo import from Jekyll\nSynopsis hugo import from Jekyll.\nImport from Jekyll requires two paths, e.g. hugo import jekyll jekyll_root_path target_path.\nhugo import jekyll [flags] [args] Options --force allow import into non-empty target directory\r-h, --help help for jekyll Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo import\t- Import your site from others. "},{"date":"0001-01-01","uri":"/commands/hugo_list/","title":"hugo list","content":"hugo list Listing out various types of content\nSynopsis Listing out various types of content.\nList requires a subcommand, e.g. hugo list drafts\nOptions -h, --help help for list Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site hugo list all\t- List all posts hugo list drafts\t- List all drafts hugo list expired\t- List all posts already expired hugo list future\t- List all posts dated in the future "},{"date":"0001-01-01","uri":"/commands/hugo_list_all/","title":"hugo list all","content":"hugo list all List all posts\nSynopsis List all of the posts in your content directory, include drafts, future and expired pages.\nhugo list all [flags] [args] Options -h, --help help for all Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo list\t- Listing out various types of content "},{"date":"0001-01-01","uri":"/commands/hugo_list_drafts/","title":"hugo list drafts","content":"hugo list drafts List all drafts\nSynopsis List all of the drafts in your content directory.\nhugo list drafts [flags] [args] Options -h, --help help for drafts Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo list\t- Listing out various types of content "},{"date":"0001-01-01","uri":"/commands/hugo_list_expired/","title":"hugo list expired","content":"hugo list expired List all posts already expired\nSynopsis List all of the posts in your content directory which has already expired.\nhugo list expired [flags] [args] Options -h, --help help for expired Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo list\t- Listing out various types of content "},{"date":"0001-01-01","uri":"/commands/hugo_list_future/","title":"hugo list future","content":"hugo list future List all posts dated in the future\nSynopsis List all of the posts in your content directory which will be posted in the future.\nhugo list future [flags] [args] Options -h, --help help for future Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo list\t- Listing out various types of content "},{"date":"0001-01-01","uri":"/commands/hugo_mod/","title":"hugo mod","content":"hugo mod Various Hugo Modules helpers.\nSynopsis Various helpers to help manage the modules in your project’s dependency graph. Most operations here requires a Go version installed on your system (\u003e= Go 1.12) and the relevant VCS client (typically Git). This is not needed if you only operate on modules inside /themes or if you have vendored them via “hugo mod vendor”.\nNote that Hugo will always start out by resolving the components defined in the site configuration, provided by a _vendor directory (if no –ignoreVendorPaths flag provided), Go Modules, or a folder inside the themes directory, in that order.\nSee https://gohugo.io/hugo-modules/ for more information.\nOptions -h, --help help for mod Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site hugo mod clean\t- Delete the Hugo Module cache for the current project. hugo mod get\t- Resolves dependencies in your current Hugo Project. hugo mod graph\t- Print a module dependency graph. hugo mod init\t- Initialize this project as a Hugo Module. hugo mod npm\t- Various npm helpers. hugo mod tidy\t- Remove unused entries in go.mod and go.sum. hugo mod vendor\t- Vendor all module dependencies into the _vendor directory. hugo mod verify\t- Verify dependencies. "},{"date":"0001-01-01","uri":"/commands/hugo_mod_clean/","title":"hugo mod clean","content":"hugo mod clean Delete the Hugo Module cache for the current project.\nSynopsis Delete the Hugo Module cache for the current project.\nhugo mod clean [flags] [args] Options --all clean entire module cache\r-b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r-c, --contentDir string filesystem path to content directory\r-h, --help help for clean\r--pattern string pattern matching module paths to clean (all if not set), e.g. \"**hugo*\"\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo mod\t- Various Hugo Modules helpers. "},{"date":"0001-01-01","uri":"/commands/hugo_mod_get/","title":"hugo mod get","content":"hugo mod get Resolves dependencies in your current Hugo Project.\nSynopsis Resolves dependencies in your current Hugo Project.\nSome examples:\nInstall the latest version possible for a given module:\nhugo mod get github.com/gohugoio/testshortcodes\rInstall a specific version:\nhugo mod get github.com/gohugoio/testshortcodes@v0.3.0\rInstall the latest versions of all direct module dependencies:\nhugo mod get\rhugo mod get ./... (recursive)\rInstall the latest versions of all module dependencies (direct and indirect):\nhugo mod get -u\rhugo mod get -u ./... (recursive)\rRun “go help get” for more information. All flags available for “go get” is also relevant here.\nNote that Hugo will always start out by resolving the components defined in the site configuration, provided by a _vendor directory (if no –ignoreVendorPaths flag provided), Go Modules, or a folder inside the themes directory, in that order.\nSee https://gohugo.io/hugo-modules/ for more information.\nhugo mod get [flags] [args] Options -h, --help help for get Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo mod\t- Various Hugo Modules helpers. "},{"date":"0001-01-01","uri":"/commands/hugo_mod_graph/","title":"hugo mod graph","content":"hugo mod graph Print a module dependency graph.\nSynopsis Print a module dependency graph with information about module status (disabled, vendored). Note that for vendored modules, that is the version listed and not the one from go.mod.\nhugo mod graph [flags] [args] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r--clean delete module cache for dependencies that fail verification\r-c, --contentDir string filesystem path to content directory\r-h, --help help for graph\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo mod\t- Various Hugo Modules helpers. "},{"date":"0001-01-01","uri":"/commands/hugo_mod_init/","title":"hugo mod init","content":"hugo mod init Initialize this project as a Hugo Module.\nSynopsis Initialize this project as a Hugo Module. It will try to guess the module path, but you may help by passing it as an argument, e.g:\nhugo mod init github.com/gohugoio/testshortcodes\rNote that Hugo Modules supports multi-module projects, so you can initialize a Hugo Module\rinside a subfolder on GitHub, as one example.\rhugo mod init [flags] [args] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r-c, --contentDir string filesystem path to content directory\r-h, --help help for init\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo mod\t- Various Hugo Modules helpers. "},{"date":"0001-01-01","uri":"/commands/hugo_mod_npm/","title":"hugo mod npm","content":"hugo mod npm Various npm helpers.\nSynopsis Various npm (Node package manager) helpers.\nhugo mod npm [command] [flags] Options -h, --help help for npm Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo mod\t- Various Hugo Modules helpers. hugo mod npm pack\t- Experimental: Prepares and writes a composite package.json file for your project. "},{"date":"0001-01-01","uri":"/commands/hugo_mod_npm_pack/","title":"hugo mod npm pack","content":"hugo mod npm pack Experimental: Prepares and writes a composite package.json file for your project.\nSynopsis Prepares and writes a composite package.json file for your project.\nOn first run it creates a “package.hugo.json” in the project root if not already there. This file will be used as a template file with the base dependency set.\nThis set will be merged with all “package.hugo.json” files found in the dependency tree, picking the version closest to the project.\nThis command is marked as ‘Experimental’. We think it’s a great idea, so it’s not likely to be removed from Hugo, but we need to test this out in “real life” to get a feel of it, so this may/will change in future versions of Hugo.\nhugo mod npm pack [flags] [args] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r-c, --contentDir string filesystem path to content directory\r-h, --help help for pack\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo mod npm\t- Various npm helpers. "},{"date":"0001-01-01","uri":"/commands/hugo_mod_tidy/","title":"hugo mod tidy","content":"hugo mod tidy Remove unused entries in go.mod and go.sum.\nhugo mod tidy [flags] [args] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r-c, --contentDir string filesystem path to content directory\r-h, --help help for tidy\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo mod\t- Various Hugo Modules helpers. "},{"date":"0001-01-01","uri":"/commands/hugo_mod_vendor/","title":"hugo mod vendor","content":"hugo mod vendor Vendor all module dependencies into the _vendor directory.\nSynopsis Vendor all module dependencies into the _vendor directory. If a module is vendored, that is where Hugo will look for it’s dependencies.\nhugo mod vendor [flags] [args] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r-c, --contentDir string filesystem path to content directory\r-h, --help help for vendor\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo mod\t- Various Hugo Modules helpers. "},{"date":"0001-01-01","uri":"/commands/hugo_mod_verify/","title":"hugo mod verify","content":"hugo mod verify Verify dependencies.\nSynopsis Verify checks that the dependencies of the current module, which are stored in a local downloaded source cache, have not been modified since being downloaded.\nhugo mod verify [flags] [args] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r--clean delete module cache for dependencies that fail verification\r-c, --contentDir string filesystem path to content directory\r-h, --help help for verify\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo mod\t- Various Hugo Modules helpers. "},{"date":"0001-01-01","uri":"/commands/hugo_new/","title":"hugo new","content":"hugo new Create new content for your site\nSynopsis Create a new content file and automatically set the date and title. It will guess which kind of file to create based on the path provided.\nYou can also specify the kind with -k KIND.\nIf archetypes are provided in your theme or site, they will be used.\nEnsure you run this within the root directory of your site.\nOptions -h, --help help for new Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site hugo new content\t- Create new content for your site hugo new site\t- Create a new site (skeleton) hugo new theme\t- Create a new theme (skeleton) "},{"date":"0001-01-01","uri":"/commands/hugo_new_content/","title":"hugo new content","content":"hugo new content Create new content for your site\nSynopsis Create a new content file and automatically set the date and title. It will guess which kind of file to create based on the path provided.\nYou can also specify the kind with -k KIND.\nIf archetypes are provided in your theme or site, they will be used.\nEnsure you run this within the root directory of your site.\nhugo new content [path] [flags] Options -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--cacheDir string filesystem path to cache directory\r-c, --contentDir string filesystem path to content directory\r--editor string edit new content with this editor, if provided\r-f, --force overwrite file if it already exists\r-h, --help help for content\r-k, --kind string content type to create\r-t, --theme strings themes to use (located in /themes/THEMENAME/) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo new\t- Create new content for your site "},{"date":"0001-01-01","uri":"/commands/hugo_new_site/","title":"hugo new site","content":"hugo new site Create a new site (skeleton)\nSynopsis Create a new site in the provided directory. The new site will have the correct structure, but no content or theme yet. Use hugo new [contentPath] to create new content.\nhugo new site [path] [flags] Options -f, --force init inside non-empty directory\r--format string preferred file format (toml, yaml or json) (default \"toml\")\r-h, --help help for site Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo new\t- Create new content for your site "},{"date":"0001-01-01","uri":"/commands/hugo_new_theme/","title":"hugo new theme","content":"hugo new theme Create a new theme (skeleton)\nSynopsis Create a new theme (skeleton) called [name] in ./themes. New theme is a skeleton. Please add content to the touched files. Add your name to the copyright line in the license and adjust the theme.toml file according to your needs.\nhugo new theme [name] [flags] Options -h, --help help for theme Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo new\t- Create new content for your site "},{"date":"0001-01-01","uri":"/commands/hugo_server/","title":"hugo server","content":"hugo server A high performance webserver\nSynopsis Hugo provides its own webserver which builds and serves the site. While hugo server is high performance, it is a webserver with limited options.\n‘hugo server’ will avoid writing the rendered and served content to disk, preferring to store it in memory.\nBy default hugo will also watch your files for any changes you make and automatically rebuild the site. It will then live reload any open browser pages and push the latest content to them. As most Hugo sites are built in a fraction of a second, you will be able to save and see your changes nearly instantly.\nhugo server [command] [flags] Options --appendPort append port to baseURL (default true)\r-b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/\r--bind string interface to which the server will bind (default \"127.0.0.1\")\r-D, --buildDrafts include content marked as draft\r-E, --buildExpired include expired content\r-F, --buildFuture include content with publishdate in the future\r--cacheDir string filesystem path to cache directory\r--cleanDestinationDir remove files from destination not found in static directories\r-c, --contentDir string filesystem path to content directory\r--disableBrowserError do not show build errors in the browser\r--disableFastRender enables full re-renders on changes\r--disableKinds strings disable different kind of pages (home, RSS etc.)\r--disableLiveReload watch without enabling live browser reload on rebuild\r--enableGitInfo add Git revision, date, author, and CODEOWNERS info to the pages\r--forceSyncStatic copy all files when static is changed.\r--gc enable to run some cleanup tasks (remove unused cache files) after the build\r-h, --help help for server\r--ignoreCache ignores the cache directory\r-l, --layoutDir string filesystem path to layout directory\r--liveReloadPort int port for live reloading (i.e. 443 in HTTPS proxy situations) (default -1)\r--meminterval string interval to poll memory usage (requires --memstats), valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". (default \"100ms\")\r--memstats string log memory usage to this file\r--minify minify any supported output format (HTML, XML etc.)\r--navigateToChanged navigate to changed content file on live browser reload\r--noBuildLock don't create .hugo_build.lock file\r--noChmod don't sync permission mode of files\r--noHTTPCache prevent HTTP caching\r--noTimes don't sync modification time of files\r--panicOnWarning panic on first WARNING log\r--poll string set this to a poll interval, e.g --poll 700ms, to use a poll based approach to watch for file system changes\r-p, --port int port on which the server will listen (default 1313)\r--printI18nWarnings print missing translations\r--printMemoryUsage print memory usage to screen at intervals\r--printPathWarnings print warnings on duplicate target paths etc.\r--printUnusedTemplates print warnings on unused templates.\r--renderStaticToDisk serve static files from disk and dynamic files from memory\r--renderToDisk serve all files from disk (default is from memory)\r--templateMetrics display metrics about template executions\r--templateMetricsHints calculate some improvement hints when combined with --templateMetrics\r-t, --theme strings themes to use (located in /themes/THEMENAME/)\r--tlsAuto generate and use locally-trusted certificates.\r--tlsCertFile string path to TLS certificate file\r--tlsKeyFile string path to TLS key file\r--trace file write trace to file (not useful in general)\r-w, --watch watch filesystem for changes and recreate as needed (default true) Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site hugo server trust\t- Install the local CA in the system trust store. "},{"date":"0001-01-01","uri":"/commands/hugo_server_trust/","title":"hugo server trust","content":"hugo server trust Install the local CA in the system trust store.\nhugo server trust [flags] [args] Options -h, --help help for trust\r--uninstall Uninstall the local CA (but do not delete it). Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo server\t- A high performance webserver "},{"date":"0001-01-01","uri":"/commands/hugo_version/","title":"hugo version","content":"hugo version Print Hugo version and environment info\nSynopsis Print Hugo version and environment info. This is useful in Hugo bug reports.\nhugo version [flags] [args] Options -h, --help help for version Options inherited from parent commands --clock string set the clock used by Hugo, e.g. --clock 2021-11-06T22:30:00.00+09:00\r--config string config file (default is hugo.yaml|json|toml)\r--configDir string config dir (default \"config\")\r--debug debug output\r-d, --destination string filesystem path to write files to\r-e, --environment string build environment\r--ignoreVendorPaths string ignores any _vendor for module paths matching the given Glob pattern\r--logLevel string log level (debug|info|warn|error)\r--quiet build in quiet mode\r-s, --source string filesystem path to read files relative from\r--themesDir string filesystem path to themes directory\r-v, --verbose verbose output SEE ALSO hugo\t- hugo builds your site "},{"date":"0001-01-01","uri":"/functions/hugo/builddate/","title":"hugo.BuildDate","content":"The hugo.BuildDate function returns the compile date of the Hugo binary, formatted per RFC 3339.\n{{ hugo.BuildDate }} → 2023-11-01T17:57:00Z "},{"date":"0001-01-01","uri":"/functions/hugo/commithash/","title":"hugo.CommitHash","content":"{{ hugo.CommitHash }} → a4892a07b41b7b3f1f143140ee4ec0a9a5cf3970 "},{"date":"0001-01-01","uri":"/functions/hugo/deps/","title":"hugo.Deps","content":"The hugo.Deps function returns a slice of project dependencies, either Hugo Modules or local theme components. Each dependency contains:\nOwner (hugo.Dependency) In the dependency tree, this is the first module that defines this module as a dependency (e.g., github.com/gohugoio/hugo-mod-bootstrap-scss/v5). Path (string) The module path or the path below your themes directory (e.g., github.com/gohugoio/hugo-mod-jslibs-dist/popperjs/v2). Replace (hugo.Dependency) Replaced by this dependency. Time (time.Time) The time that the version was created (e.g., 2022-02-13 15:11:28 +0000 UTC). Vendor (bool) Reports whether the dependency is vendored. Version (string) The module version (e.g., v2.21100.20000). An example table listing the dependencies:\n\u003ch2\u003eDependencies\u003c/h2\u003e \u003ctable class=\"table table-dark\"\u003e \u003cthead\u003e \u003ctr\u003e \u003cth scope=\"col\"\u003e#\u003c/th\u003e \u003cth scope=\"col\"\u003eOwner\u003c/th\u003e \u003cth scope=\"col\"\u003ePath\u003c/th\u003e \u003cth scope=\"col\"\u003eVersion\u003c/th\u003e \u003cth scope=\"col\"\u003eTime\u003c/th\u003e \u003cth scope=\"col\"\u003eVendor\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e {{ range $index, $element := hugo.Deps }} \u003ctr\u003e \u003cth scope=\"row\"\u003e{{ add $index 1 }}\u003c/th\u003e \u003ctd\u003e{{ with $element.Owner }}{{ .Path }}{{ end }}\u003c/td\u003e \u003ctd\u003e {{ $element.Path }} {{ with $element.Replace }} =\u003e {{ .Path }} {{ end }} \u003c/td\u003e \u003ctd\u003e{{ $element.Version }}\u003c/td\u003e \u003ctd\u003e{{ with $element.Time }}{{ . }}{{ end }}\u003c/td\u003e \u003ctd\u003e{{ $element.Vendor }}\u003c/td\u003e \u003c/tr\u003e {{ end }} \u003c/tbody\u003e \u003c/table\u003e "},{"date":"0001-01-01","uri":"/functions/hugo/environment/","title":"hugo.Environment","content":"The hugo.Environment function returns the current running environment as defined through the --environment command line flag.\n{{ hugo.Environment }} → production Command line examples:\nCommand Environment hugo production hugo --environment staging staging hugo server development hugo server --environment staging staging "},{"date":"0001-01-01","uri":"/functions/hugo/generator/","title":"hugo.Generator","content":"{{ hugo.Generator }} → \u003cmeta name=\"generator\" content=\"Hugo 0.122.0\"\u003e "},{"date":"0001-01-01","uri":"/functions/hugo/goversion/","title":"hugo.GoVersion","content":"\rNew in v0.101.0\r{{ hugo.GoVersion }} → go1.21.1 "},{"date":"0001-01-01","uri":"/functions/hugo/isdevelopment/","title":"hugo.IsDevelopment","content":"\rNew in v0.120.0\r{{ hugo.IsDevelopment }} → true/false "},{"date":"0001-01-01","uri":"/functions/hugo/isextended/","title":"hugo.IsExtended","content":"{{ hugo.IsExtended }} → true/false "},{"date":"0001-01-01","uri":"/functions/hugo/isproduction/","title":"hugo.IsProduction","content":"{{ hugo.IsProduction }} → true/false "},{"date":"0001-01-01","uri":"/functions/hugo/isserver/","title":"hugo.IsServer","content":"\rNew in v0.120.0\r{{ hugo.IsServer }} → true/false "},{"date":"0001-01-01","uri":"/functions/hugo/version/","title":"hugo.Version","content":"{{ hugo.Version }} → 0.122.0 "},{"date":"0001-01-01","uri":"/functions/hugo/workingdir/","title":"hugo.WorkingDir","content":"{{ hugo.WorkingDir }} → /home/user/projects/my-hugo-site "},{"date":"0001-01-01","uri":"/methods/menu-entry/identifier/","title":"Identifier","content":"The Identifier method returns the identifier property of the menu entry. If you define the menu entry automatically, it returns the page’s section.\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - identifier: about name: About pageRef: /about weight: 10 - identifier: contact name: Contact pageRef: /contact weight: 20 [menus] [[menus.main]] identifier = 'about' name = 'About' pageRef = '/about' weight = 10 [[menus.main]] identifier = 'contact' name = 'Contact' pageRef = '/contact' weight = 20 { \"menus\": { \"main\": [ { \"identifier\": \"about\", \"name\": \"About\", \"pageRef\": \"/about\", \"weight\": 10 }, { \"identifier\": \"contact\", \"name\": \"Contact\", \"pageRef\": \"/contact\", \"weight\": 20 } ] } } This example uses the Identifier method when querying the translation table on a multilingual site, falling back the name property if a matching key in the translation table does not exist:\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ or (T .Identifier) .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e In the menu definition above, note that the identifier property is only required when two or more menu entries have the same name, or when localizing the name using translation tables.\n"},{"date":"0001-01-01","uri":"/functions/go-template/if/","title":"if","content":"In Go templates, the falsy values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. Everything else is truthy.\n{{ $var := \"foo\" }} {{ if $var }} {{ $var }} → foo {{ end }} Use with the else statement:\n{{ $var := \"foo\" }} {{ if $var }} {{ $var }} → foo {{ else }} {{ print \"var is falsy\" }} {{ end }} Use else if to check multiple conditions.\n{{ $var := 12 }} {{ if eq $var 6 }} {{ print \"var is 6\" }} {{ else if eq $var 7 }} {{ print \"var is 7\" }} {{ else if eq $var 42 }} {{ print \"var is 42\" }} {{ else }} {{ print \"var is something else\" }} {{ end }} See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/functions/images/autoorient/","title":"images.AutoOrient","content":"\rNew in v0.121.2\rUsage Create the filter:\n{{ $filter := images.AutoOrient }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} When using with other filters, specify images.AutoOrient first.\n{{ $filters := slice images.AutoOrient (images.Process \"resize 200x\") }} {{ with resources.Get \"images/original.jpg\" }} {{ with images.Filter $filters . }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/brightness/","title":"images.Brightness","content":"The percentage must be in the range [-100, 100] where 0 has no effect. A value of -100 produces a solid black image, and a value of 100 produces a solid white image.\nUsage Create the image filter:\n{{ $filter := images.Brightness 12 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/colorbalance/","title":"images.ColorBalance","content":"The percentage for each channel (red, green, blue) must be in the range [-100, 500].\nUsage Create the filter:\n{{ $filter := images.ColorBalance -10 10 50 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/colorize/","title":"images.Colorize","content":"The hue is the angle on the color wheel, typically in the range [0, 360].\nThe saturation must be in the range [0, 100].\nThe percentage specifies the strength of the effect, and must be in the range [0, 100].\nUsage Create the filter:\n{{ $filter := images.Colorize 180 50 20 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/config/","title":"images.Config","content":"See image processing for an overview of Hugo’s image pipeline.\n{{ $ic := images.Config \"/static/images/a.jpg\" }} {{ $ic.Width }} → 600 (int) {{ $ic.Height }} → 400 (int) Supported image formats include GIF, JPEG, PNG, TIFF, and WebP.\nThis is a legacy function, superseded by the Width and Height methods for global, page, and remote resources. See the image processing section for details.\n"},{"date":"0001-01-01","uri":"/functions/images/contrast/","title":"images.Contrast","content":"The percentage must be in the range [-100, 100] where 0 has no effect. A value of -100 produces a solid grey image, and a value of 100 produces an over-contrasted image.\nUsage Create the filter:\n{{ $filter := images.Contrast -20 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/filter/","title":"images.Filter","content":"Apply one or more image filters to the given image.\nTo apply a single filter:\n{{ with resources.Get \"images/original.jpg\" }} {{ with images.Filter images.Grayscale . }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} To apply two or more filters, executing from left to right:\n{{ $filters := slice images.Grayscale (images.GaussianBlur 8) }} {{ with resources.Get \"images/original.jpg\" }} {{ with images.Filter $filters . }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply image filters using the Filter method on a Resource object.\nExample {{ with resources.Get \"images/original.jpg\" }} {{ with images.Filter images.Grayscale . }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Original\nProcessed\nImage filters Use any of these filters with the images.Filter function, or with the Filter method on a Resource object.\nimages.AutoOrient\rReturns an image filter that rotates and flips an image as needed per its EXIF orientation tag.\rimages.Brightness\rReturns an image filter that changes the brightness of an image.\rimages.ColorBalance\rReturns an image filter that changes the color balance of an image.\rimages.Colorize\rReturns an image filter that produces a colorized version of an image.\rimages.Contrast\rReturns an image filter that changes the contrast of an image.\rimages.Gamma\rReturns an image filter that performs gamma correction on an image.\rimages.GaussianBlur\rReturns an image filter that applies a gaussian blur to an image.\rimages.Grayscale\rReturns an image filter that produces a grayscale version of an image.\rimages.Hue\rReturns an image filter that rotates the hue of an image.\rimages.Invert\rReturns an image filter that negates the colors of an image.\rimages.Opacity\rReturns an image filter that changes the opacity of an image.\rimages.Overlay\rReturns an image filter that overlays the source image at the given coordinates, relative to the upper left corner.\rimages.Padding\rReturns an image filter that resizes the image canvas without resizing the image.\rimages.Pixelate\rReturns an image filter that applies a pixelation effect to an image.\rimages.Process\rReturns an image filter that processes the given image using the given specification.\rimages.Saturation\rReturns an image filter that changes the saturation of an image.\rimages.Sepia\rReturns an image filter that produces a sepia-toned version of an image.\rimages.Sigmoid\rReturns an image filter that changes the contrast of an image using a sigmoidal function.\rimages.Text\rReturns an image filter that adds text to an image.\rimages.UnsharpMask\rReturns an image filter that sharpens an image.\r"},{"date":"0001-01-01","uri":"/functions/images/gamma/","title":"images.Gamma","content":"The gamma value must be positive. A value greater than 1 lightens the image, while a value less than 1 darkens the image. The filter has no effect when the gamma value is 1.\nUsage Create the filter:\n{{ $filter := images.Gamma 1.667 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/gaussianblur/","title":"images.GaussianBlur","content":"The sigma value must be positive, and indicates how much the image will be blurred. The blur-affected radius is approximately 3 times the sigma value.\nUsage Create the filter:\n{{ $filter := images.GaussianBlur 5 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/grayscale/","title":"images.Grayscale","content":"Usage Create the filter:\n{{ $filter := images.Grayscale }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/hue/","title":"images.Hue","content":"The hue angle shift is typically in the range [-180, 180] where 0 has no effect.\nUsage Create the filter:\n{{ $filter := images.Hue -15 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/invert/","title":"images.Invert","content":"Usage Create the filter:\n{{ $filter := images.Invert }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/opacity/","title":"images.Opacity","content":"\rNew in v0.119.0\rThe opacity value must be in the range [0, 1]. A value of 0 produces a transparent image, and a value of 1 produces an opaque image (no transparency).\nUsage Create the filter:\n{{ $filter := images.Opacity 0.65 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} The images.Opacity filter is most useful for target formats such as PNG and WebP that support transparency. If the source image does not support transparency, combine this filter with the images.Process filter:\n{{ with resources.Get \"images/original.jpg\" }} {{ $filters := slice (images.Opacity 0.65) (images.Process \"png\") }} {{ with . | images.Filter $filters }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/overlay/","title":"images.Overlay","content":"Usage Capture the overlay image as a resource:\n{{ $overlay := \"\" }} {{ $path := \"images/logo.png\" }} {{ with resources.Get $path }} {{ $overlay = . }} {{ else }} {{ errorf \"Unable to get resource %q\" $path }} {{ end }} The overlay image can be a global resource, a page resource, or a remote resource.\nCreate the filter:\n{{ $filter := images.Overlay $overlay 20 20 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/padding/","title":"images.Padding","content":"\rNew in v0.120.0\rThe last argument is the canvas color, expressed as an RGB or RGBA hexadecimal color. The default value is ffffffff (opaque white). The preceding arguments are the padding values, in pixels, using the CSS shorthand property syntax. Negative padding values will crop the image.\nUsage Create the filter:\n{{ $filter := images.Padding 20 40 \"#976941\" }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Combine with the Colors method to create a border with one of the image’s most dominant colors:\n{{ with resources.Get \"images/original.jpg\" }} {{ $filter := images.Padding 20 40 (index .Colors 2) }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\nOther recipes This example resizes an image to 300px wide, converts it to the WebP format, adds 20px vertical padding and 50px horizontal padding, then sets the canvas color to dark green with 33% opacity.\nConversion to WebP is required to support transparency. PNG and WebP images have an alpha channel; JPEG and GIF do not.\n{{ $img := resources.Get \"images/a.jpg\" }} {{ $filters := slice (images.Process \"resize 300x webp\") (images.Padding 20 50 \"#0705\") }} {{ $img = $img.Filter $filters }} To add a 2px gray border to an image:\n{{ $img = $img.Filter (images.Padding 2 \"#777\") }} "},{"date":"0001-01-01","uri":"/functions/images/pixelate/","title":"images.Pixelate","content":"Usage Create the filter:\n{{ $filter := images.Pixelate 4 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/process/","title":"images.Process","content":"\rNew in v0.119.0\rThis filter has the same options as the Process method on a Resource object, but using it as a filter may be more effective if you need to apply multiple filters to an image.\nThe process specification is a space-delimited, case-insensitive list of one or more of the following in any sequence:\naction Specify zero or one of crop, fill, fit, or resize. If you specify an action you must also provide dimensions. See details. {{ $filter := images.Process \"resize 300x\" }} dimensions Required if you specify an action. Provide width or height when using resize, else provide both width and height. See details. {{ $filter := images.Process \"crop 200x200\" }} anchor Use with the crop or fill action. Specify zero or one of TopLeft, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight, or Smart. Default is Smart. See details. {{ $filter := images.Process \"crop 200x200 center\" }} rotation Typically specify zero or one of r90, r180, or r270. Also supports arbitrary rotation angles. See details. {{ $filter := images.Process \"r90\" }} {{ $filter := images.Process \"crop 200x200 center r90\" }} target format Specify zero or one of gif, jpeg, png, tiff, or webp. See details. {{ $filter := images.Process \"webp\" }} {{ $filter := images.Process \"crop 200x200 center r90 webp\" }} quality Applicable to JPEG and WebP images. Optionally specify qN where N is an integer in the range [0, 100]. Default is 75. See details. {{ $filter := images.Process \"q50\" }} {{ $filter := images.Process \"crop 200x200 center r90 webp q50\" }} hint Applicable to WebP images and equivalent to the -preset flag for the cwebp encoder. Specify zero or one of drawing, icon, photo, picture, or text. Default is photo. See details. {{ $filter := images.Process \"webp\" \"icon\" }} {{ $filter := images.Process \"crop 200x200 center r90 webp q50 icon\" }} background color When converting a PNG or WebP with transparency to a format that does not support transparency, optionally specify a background color using a 3-digit or a 6-digit hexadecimal color code. Default is #ffffff (white). See details. {{ $filter := images.Process \"jpeg #000\" }} {{ $filter := images.Process \"crop 200x200 center r90 q50 jpeg #000\" }} resampling filter Typically specify zero or one of Box, Lanczos, CatmullRom, MitchellNetravali, Linear, or NearestNeighbor. Other resampling filters are available. See details. {{ $filter := images.Process \"resize 300x lanczos\" }} {{ $filter := images.Process \"resize 300x r90 q50 jpeg #000 lanczos\" }} Usage Create a filter:\n{{ $filter := images.Process \"resize 256x q40 webp\" }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/saturation/","title":"images.Saturation","content":"The percentage must be in the range [-100, 500] where 0 has no effect.\nUsage Create the filter:\n{{ $filter := images.Saturation 65 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/sepia/","title":"images.Sepia","content":"The percentage must be in the range [0, 100] where 0 has no effect.\nUsage Create the filter:\n{{ $filter := images.Sepia 75 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/sigmoid/","title":"images.Sigmoid","content":"This is a non-linear contrast change useful for photo adjustments; it preserves highlight and shadow detail.\nThe midpoint is the midpoint of contrast. It must be in the range [0, 1], typically 0.5.\nThe factor indicates how much to increase or decrease the contrast, typically in the range [-10, 10] where 0 has no effect. A positive value increases contrast, while a negative value decrease contrast.\nUsage Create the filter:\n{{ $filter := images.Sigmoid 0.6 -4 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/text/","title":"images.Text","content":"Options Although none of the options are required, at a minimum you will want to set the size to be some reasonable percentage of the image height.\ncolor (string) The font color, either a 3-digit or 6-digit hexadecimal color code. Default is #ffffff (white). font (resource.Resource) The font can be a global resource, a page resource, or a remote resource. Default is Go Regular, a proportional sans-serif TrueType font. linespacing (int) The number of pixels between each line. For a line height of 1.4, set the linespacing to 0.4 multiplied by the size. Default is 2. size (int) The font size in pixels. Default is 20. x (int) The horizontal offset, in pixels, relative to the left of the image. Default is 10. y (int) The vertical offset, in pixels, relative to the top of the image. Default is 10. Usage Capture the font as a resource:\n{{ $font := \"\" }} {{ $path := \"https://github.com/google/fonts/raw/main/ofl/lato/Lato-Regular.ttf\" }} {{ with resources.GetRemote $path }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ $font = . }} {{ end }} {{ else }} {{ errorf \"Unable to get resource %q\" $path }} {{ end }} Create the options map:\n{{ $opts := dict \"color\" \"#fbfaf5\" \"font\" $font \"linespacing\" 8 \"size\" 40 \"x\" 25 \"y\" 190 }} Set the text:\n{{ $text := \"Zion National Park\" }} Create the filter:\n{{ $filter := images.Text $text $opts }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/images/unsharpmask/","title":"images.UnsharpMask","content":"The sigma parameter is used in a gaussian function and affects the radius of effect. Sigma must be positive. The sharpen radius is approximately 3 times the sigma value.\nThe amount parameter controls how much darker and how much lighter the edge borders become. Typically between 0.5 and 1.5.\nThe threshold parameter controls the minimum brightness change that will be sharpened. Typically between 0 and 0.05.\nUsage Create the filter:\n{{ $filter := images.UnsharpMask 10 0.4 0.03 }} Apply the filter using the images.Filter function:\n{{ with resources.Get \"images/original.jpg\" }} {{ with . | images.Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also apply the filter using the Filter method on a Resource object:\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Filter $filter }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Example Original\nProcessed\n"},{"date":"0001-01-01","uri":"/functions/inflect/humanize/","title":"inflect.Humanize","content":"{{ humanize \"my-first-post\" }} → My first post {{ humanize \"myCamelPost\" }} → My camel post If the input is an integer or a string representation of an integer, humanize returns the number with the proper ordinal appended.\n{{ humanize \"52\" }} → 52nd {{ humanize 103 }} → 103rd "},{"date":"0001-01-01","uri":"/functions/inflect/pluralize/","title":"inflect.Pluralize","content":"{{ \"cat\" | pluralize }} → cats "},{"date":"0001-01-01","uri":"/functions/inflect/singularize/","title":"inflect.Singularize","content":"{{ \"cats\" | singularize }} → cat See also the .Data.Singular taxonomy variable for singularizing taxonomy names.\n"},{"date":"0001-01-01","uri":"/methods/shortcode/inner/","title":"Inner","content":"This content:\ncontent/services.md\r{{\u003c card title=\"Product Design\" \u003e}} We design the **best** widgets in the world. {{\u003c /card \u003e}}\rWith this shortcode:\nlayouts/shortcodes/card.html\r\u003cdiv class=\"card\"\u003e {{ with .Get \"title\" }} \u003cdiv class=\"card-title\"\u003e{{ . }}\u003c/div\u003e {{ end }} \u003cdiv class=\"card-content\"\u003e {{ trim .Inner \"\\r\\n\" }} \u003c/div\u003e \u003c/div\u003e\rIs rendered to:\n\u003cdiv class=\"card\"\u003e \u003cdiv class=\"card-title\"\u003eProduct Design\u003c/div\u003e \u003cdiv class=\"card-content\"\u003e We design the **best** widgets in the world. \u003c/div\u003e \u003c/div\u003e Content between opening and closing shortcode tags may include leading and/or trailing newlines, depending on placement within the markdown. Use the trim function as shown above to remove both carriage returns and newlines.\nIn the example above, the value returned by Inner is markdown, but it was rendered as plain text. Use either of the following approaches to render markdown to HTML.\nUse the RenderString method Let’s modify the example above to pass the value returned by Inner through the RenderString method on the Page object:\nlayouts/shortcodes/card.html\r\u003cdiv class=\"card\"\u003e {{ with .Get \"title\" }} \u003cdiv class=\"card-title\"\u003e{{ . }}\u003c/div\u003e {{ end }} \u003cdiv class=\"card-content\"\u003e {{ trim .Inner \"\\r\\n\" | .Page.RenderString }} \u003c/div\u003e \u003c/div\u003e\rHugo renders this to:\n\u003cdiv class=\"card\"\u003e \u003cdiv class=\"card-title\"\u003eProduct design\u003c/div\u003e \u003cdiv class=\"card-content\"\u003e We produce the \u003cstrong\u003ebest\u003c/strong\u003e widgets in the world. \u003c/div\u003e \u003c/div\u003e You can use the markdownify function instead of the RenderString method, but the latter is more flexible. See details.\nUse alternate notation Instead of calling the shortcode with the {{\u003c \u003e}} notation, use the {{% %}} notation:\ncontent/services.md\r{{% card title=\"Product Design\" %}} We design the **best** widgets in the world. {{% /card %}}\rWhen you use the {{% %}} notation, Hugo renders the entire shortcode as markdown, requiring the following changes.\nFirst, configure the renderer to allow raw HTML within markdown:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: goldmark: renderer: unsafe: true [markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true { \"markup\": { \"goldmark\": { \"renderer\": { \"unsafe\": true } } } } This configuration is not unsafe if you control the content. Read more about Hugo’s security model.\nSecond, because we are rendering the entire shortcode as markdown, we must adhere to the rules governing indentation and inclusion of raw HTML blocks as provided in the CommonMark specification.\nlayouts/shortcodes/card.html\r\u003cdiv class=\"card\"\u003e {{ with .Get \"title\" }} \u003cdiv class=\"card-title\"\u003e{{ . }}\u003c/div\u003e {{ end }} \u003cdiv class=\"card-content\"\u003e {{ trim .Inner \"\\r\\n\" }} \u003c/div\u003e \u003c/div\u003e\rThe difference between this and the previous example is subtle but required. Note the change in indentation, the addition of a blank line, and removal of the RenderString method.\n--- layouts/shortcodes/a.html +++ layouts/shortcodes/b.html @@ -1,8 +1,9 @@ \u003cdiv class=\"card\"\u003e {{ with .Get \"title\" }} - \u003cdiv class=\"card-title\"\u003e{{ . }}\u003c/div\u003e + \u003cdiv class=\"card-title\"\u003e{{ . }}\u003c/div\u003e {{ end }} \u003cdiv class=\"card-content\"\u003e - {{ trim .Inner \"\\r\\n\" | .Page.RenderString }} + + {{ trim .Inner \"\\r\\n\" }} \u003c/div\u003e \u003c/div\u003e When using the {{% %}} notation, do not pass the value returned by Inner through the RenderString method or the markdownify function.\n"},{"date":"0001-01-01","uri":"/methods/shortcode/innerdeindent/","title":"InnerDeindent","content":"Similar to the Inner method, InnerDeindent returns the content between opening and closing shortcode tags. However, with InnerDeindent, indentation before the content is removed.\nThis allows us to effectively bypass the rules governing indentation as provided in the CommonMark specification.\nConsider this markdown, an unordered list with a small gallery of thumbnail images within each list item:\ncontent/about.md\r- Gallery one {{\u003c gallery \u003e}} ![kitten a](thumbnails/a.jpg) ![kitten b](thumbnails/b.jpg) {{\u003c /gallery \u003e}} - Gallery two {{\u003c gallery \u003e}} ![kitten c](thumbnails/c.jpg) ![kitten d](thumbnails/d.jpg) {{\u003c /gallery \u003e}}\rIn the example above, notice that the content between the opening and closing shortcode tags is indented by four spaces. Per the CommonMark specification, this is treated as an indented code block.\nWith this shortcode, calling Inner instead of InnerDeindent:\nlayouts/shortcodes/gallery.html\r\u003cdiv class=\"gallery\"\u003e {{ trim .Inner \"\\r\\n\" | .Page.RenderString }} \u003c/div\u003e\rHugo renders the markdown to:\n\u003cul\u003e \u003cli\u003e \u003cp\u003eGallery one\u003c/p\u003e \u003cdiv class=\"gallery\"\u003e \u003cpre\u003e\u003ccode\u003e![kitten a](images/a.jpg) ![kitten b](images/b.jpg) \u003c/code\u003e\u003c/pre\u003e \u003c/div\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eGallery two\u003c/p\u003e \u003cdiv class=\"gallery\"\u003e \u003cpre\u003e\u003ccode\u003e![kitten c](images/c.jpg) ![kitten d](images/d.jpg) \u003c/code\u003e\u003c/pre\u003e \u003c/div\u003e \u003c/li\u003e \u003c/ul\u003e Although technically correct per the CommonMark specification, this is not what we want. If we remove the indentation using the InnerDeindent method:\nlayouts/shortcodes/gallery.html\r\u003cdiv class=\"gallery\"\u003e {{ trim .InnerDeindent \"\\r\\n\" | .Page.RenderString }} \u003c/div\u003e\rHugo renders the markdown to:\n\u003cul\u003e \u003cli\u003e \u003cp\u003eGallery one\u003c/p\u003e \u003cdiv class=\"gallery\"\u003e \u003cimg src=\"images/a.jpg\" alt=\"kitten a\"\u003e \u003cimg src=\"images/b.jpg\" alt=\"kitten b\"\u003e \u003c/div\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eGallery two\u003c/p\u003e \u003cdiv class=\"gallery\"\u003e \u003cimg src=\"images/c.jpg\" alt=\"kitten c\"\u003e \u003cimg src=\"images/d.jpg\" alt=\"kitten d\"\u003e \u003c/div\u003e \u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/insection/","title":"InSection","content":"The InSection method on a page object reports whether the given page is in the given section. Note that the method returns true when comparing a page to a sibling.\nA section is a top-level content directory, or any content directory with an _index.md file.\nWith this content structure:\ncontent/ ├── auctions/ │ ├── 2023-11/ │ │ ├── _index.md │ │ ├── auction-1.md │ │ └── auction-2.md │ ├── 2023-12/ │ │ ├── _index.md │ │ ├── auction-3.md │ │ └── auction-4.md │ ├── _index.md │ ├── bidding.md │ └── payment.md └── _index.md When rendering the “auction-1” page:\n{{ with .Site.GetPage \"/\" }} {{ $.InSection . }} → false {{ end }} {{ with .Site.GetPage \"/auctions\" }} {{ $.InSection . }} → false {{ end }} {{ with .Site.GetPage \"/auctions/2023-11\" }} {{ $.InSection . }} → true {{ end }} {{ with .Site.GetPage \"/auctions/2023-11/auction-2\" }} {{ $.InSection . }} → true {{ end }} In the examples above we are coding defensively using the with statement, returning nothing if the page does not exist. By adding an else clause we can do some error reporting:\n{{ $path := \"/auctions/2023-11\" }} {{ with .Site.GetPage $path }} {{ $.InSection . }} → true {{ else }} {{ errorf \"Unable to find the section with path %s\" $path }} {{ end }} Understanding context Inside of the with block, the context (the dot) is the section Page object, not the Page object passed into the template. If we were to use this syntax:\n{{ with .Site.GetPage \"/auctions\" }} {{ .InSection . }} → true {{ end }} The result would be wrong when rendering the “auction-1” page because we are comparing the section page to itself.\nUse the $ to get the context passed into the template.\n{{ with .Site.GetPage \"/auctions\" }} {{ $.InSection . }} → true {{ end }} Gaining a thorough understanding of context is critical for anyone writing template code.\n"},{"date":"0001-01-01","uri":"/methods/page/isancestor/","title":"IsAncestor","content":"A section is a top-level content directory, or any content directory with an _index.md file.\nWith this content structure:\ncontent/ ├── auctions/ │ ├── 2023-11/ │ │ ├── _index.md │ │ ├── auction-1.md │ │ └── auction-2.md │ ├── 2023-12/ │ │ ├── _index.md │ │ ├── auction-3.md │ │ └── auction-4.md │ ├── _index.md │ ├── bidding.md │ └── payment.md └── _index.md When rendering the “auctions” page:\n{{ with .Site.GetPage \"/\" }} {{ $.IsAncestor . }} → false {{ end }} {{ with .Site.GetPage \"/auctions\" }} {{ $.IsAncestor . }} → false {{ end }} {{ with .Site.GetPage \"/auctions/2023-11\" }} {{ $.IsAncestor . }} → true {{ end }} {{ with .Site.GetPage \"/auctions/2023-11/auction-2\" }} {{ $.IsAncestor . }} → true {{ end }} In the examples above we are coding defensively using the with statement, returning nothing if the page does not exist. By adding an else clause we can do some error reporting:\n{{ $path := \"/auctions/2023-11\" }} {{ with .Site.GetPage $path }} {{ $.IsAncestor . }} → true {{ else }} {{ errorf \"Unable to find the section with path %s\" $path }} {{ end }} Understanding context Inside of the with block, the context (the dot) is the section Page object, not the Page object passed into the template. If we were to use this syntax:\n{{ with .Site.GetPage \"/auctions\" }} {{ .IsAncestor . }} → true {{ end }} The result would be wrong when rendering the “auction-1” page because we are comparing the section page to itself.\nUse the $ to get the context passed into the template.\n{{ with .Site.GetPage \"/auctions\" }} {{ $.IsAncestor . }} → true {{ end }} Gaining a thorough understanding of context is critical for anyone writing template code.\n"},{"date":"0001-01-01","uri":"/methods/page/isdescendant/","title":"IsDescendant","content":"A section is a top-level content directory, or any content directory with an _index.md file.\nWith this content structure:\ncontent/ ├── auctions/ │ ├── 2023-11/ │ │ ├── _index.md │ │ ├── auction-1.md │ │ └── auction-2.md │ ├── 2023-12/ │ │ ├── _index.md │ │ ├── auction-3.md │ │ └── auction-4.md │ ├── _index.md │ ├── bidding.md │ └── payment.md └── _index.md When rendering the “auctions” page:\n{{ with .Site.GetPage \"/\" }} {{ $.IsDescendant . }} → true {{ end }} {{ with .Site.GetPage \"/auctions\" }} {{ $.IsDescendant . }} → false {{ end }} {{ with .Site.GetPage \"/auctions/2023-11\" }} {{ $.IsDescendant . }} → false {{ end }} {{ with .Site.GetPage \"/auctions/2023-11/auction-2\" }} {{ $.IsDescendant . }} → false {{ end }} In the examples above we are coding defensively using the with statement, returning nothing if the page does not exist. By adding an else clause we can do some error reporting:\n{{ $path := \"/auctions/2023-11\" }} {{ with .Site.GetPage $path }} {{ $.IsDescendant . }} → true {{ else }} {{ errorf \"Unable to find the section with path %s\" $path }} {{ end }} Understanding context Inside of the with block, the context (the dot) is the section Page object, not the Page object passed into the template. If we were to use this syntax:\n{{ with .Site.GetPage \"/auctions\" }} {{ .IsDescendant . }} → true {{ end }} The result would be wrong when rendering the “auction-1” page because we are comparing the section page to itself.\nUse the $ to get the context passed into the template.\n{{ with .Site.GetPage \"/auctions\" }} {{ $.IsDescendant . }} → true {{ end }} Gaining a thorough understanding of context is critical for anyone writing template code.\n"},{"date":"0001-01-01","uri":"/methods/site/isdevelopment/","title":"IsDevelopment","content":"\rDeprecated in v0.120.0.\nUse hugo.IsDevelopment instead.\n{{ .Site.IsDevelopment }} → true/false "},{"date":"0001-01-01","uri":"/methods/time/isdst/","title":"IsDST","content":"{{ $t1 := time.AsTime \"2023-01-01T00:00:00-08:00\" }} {{ $t2 := time.AsTime \"2023-07-01T00:00:00-07:00\" }} {{ $t1.IsDST }} → false {{ $t2.IsDST }} → true "},{"date":"0001-01-01","uri":"/methods/page/ishome/","title":"IsHome","content":"The IsHome method on a Page object returns true if the page kind is home.\ncontent/ ├── books/ │ ├── book-1/ │ │ └── index.md \u003c-- kind = page │ ├── book-2.md \u003c-- kind = page │ └── _index.md \u003c-- kind = section └── _index.md \u003c-- kind = home {{ .IsHome }} "},{"date":"0001-01-01","uri":"/methods/page/ismenucurrent/","title":"IsMenuCurrent","content":"{{ $currentPage := . }} {{ range site.Menus.main }} {{ if $currentPage.IsMenuCurrent .Menu . }} \u003ca class=\"active\" aria-current=\"page\" href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ else if $currentPage.HasMenuCurrent .Menu . }} \u003ca class=\"ancestor\" aria-current=\"true\" href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ else }} \u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ end }} {{ end }} See menu templates for a complete example.\n"},{"date":"0001-01-01","uri":"/methods/site/ismultilingual/","title":"IsMultiLingual","content":"Site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: de defaultContentLanguageInSubdir: true languages: de: languageCode: de-DE languageName: Deutsch title: Projekt Dokumentation weight: 1 en: languageCode: en-US languageName: English title: Project Documentation weight: 2 defaultContentLanguage = 'de' defaultContentLanguageInSubdir = true [languages] [languages.de] languageCode = 'de-DE' languageName = 'Deutsch' title = 'Projekt Dokumentation' weight = 1 [languages.en] languageCode = 'en-US' languageName = 'English' title = 'Project Documentation' weight = 2 { \"defaultContentLanguage\": \"de\", \"defaultContentLanguageInSubdir\": true, \"languages\": { \"de\": { \"languageCode\": \"de-DE\", \"languageName\": \"Deutsch\", \"title\": \"Projekt Dokumentation\", \"weight\": 1 }, \"en\": { \"languageCode\": \"en-US\", \"languageName\": \"English\", \"title\": \"Project Documentation\", \"weight\": 2 } } } Template:\n{{ .Site.IsMultiLingual }} → true "},{"date":"0001-01-01","uri":"/methods/shortcode/isnamedparams/","title":"IsNamedParams","content":"To support both positional and named parameters when calling a shortcode, use the IsNamedParams method to determine how the shortcode was called.\nWith this shortcode template:\nlayouts/shortcodes/myshortcode.html\r{{ if .IsNamedParams }} {{ printf \"%s %s.\" (.Get \"greeting\") (.Get \"firstName\") }} {{ else }} {{ printf \"%s %s.\" (.Get 0) (.Get 1) }} {{ end }}\rBoth of these calls return the same value:\ncontent/about.md\r{{\u003c myshortcode greeting=\"Hello\" firstName=\"world\" \u003e}} {{\u003c myshortcode \"Hello\" \"world\" \u003e}}\r"},{"date":"0001-01-01","uri":"/methods/page/isnode/","title":"IsNode","content":"The IsNode method on a Page object returns true if the page kind is home, section, taxonomy, or term.\nIt returns false is the page kind is page.\ncontent/ ├── books/ │ ├── book-1/ │ │ └── index.md \u003c-- kind = page, node = false │ ├── book-2.md \u003c-- kind = page, node = false │ └── _index.md \u003c-- kind = section, node = true ├── tags/ │ ├── fiction/ │ │ └── _index.md \u003c-- kind = term, node = true │ └── _index.md \u003c-- kind = taxonomy, node = true └── _index.md \u003c-- kind = home, node = true {{ .IsNode }} "},{"date":"0001-01-01","uri":"/methods/page/ispage/","title":"IsPage","content":"The IsPage method on a Page object returns true if the page kind is page.\ncontent/ ├── books/ │ ├── book-1/ │ │ └── index.md \u003c-- kind = page │ ├── book-2.md \u003c-- kind = page │ └── _index.md \u003c-- kind = section └── _index.md \u003c-- kind = home {{ .IsPage }} "},{"date":"0001-01-01","uri":"/methods/page/issection/","title":"IsSection","content":"The IsSection method on a Page object returns true if the page kind is section.\ncontent/ ├── books/ │ ├── book-1/ │ │ └── index.md \u003c-- kind = page │ ├── book-2.md \u003c-- kind = page │ └── _index.md \u003c-- kind = section └── _index.md \u003c-- kind = home {{ .IsSection }} "},{"date":"0001-01-01","uri":"/methods/site/isserver/","title":"IsServer","content":"\rDeprecated in v0.120.0.\nUse hugo.IsServer instead.\n{{ .Site.IsServer }} → true/false "},{"date":"0001-01-01","uri":"/methods/page/istranslated/","title":"IsTranslated","content":"With this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: en languages: de: contentDir: content/de languageCode: de-DE languageName: Deutsch weight: 2 en: contentDir: content/en languageCode: en-US languageName: English weight: 1 defaultContentLanguage = 'en' [languages] [languages.de] contentDir = 'content/de' languageCode = 'de-DE' languageName = 'Deutsch' weight = 2 [languages.en] contentDir = 'content/en' languageCode = 'en-US' languageName = 'English' weight = 1 { \"defaultContentLanguage\": \"en\", \"languages\": { \"de\": { \"contentDir\": \"content/de\", \"languageCode\": \"de-DE\", \"languageName\": \"Deutsch\", \"weight\": 2 }, \"en\": { \"contentDir\": \"content/en\", \"languageCode\": \"en-US\", \"languageName\": \"English\", \"weight\": 1 } } } And this content:\ncontent/ ├── de/ │ ├── books/ │ │ └── book-1.md │ └── _index.md ├── en/ │ ├── books/ │ │ ├── book-1.md │ │ └── book-2.md │ └── _index.md └── _index.md When rendering content/en/books/book-1.md:\n{{ .IsTranslated }} → true When rendering content/en/books/book-2.md:\n{{ .IsTranslated }} → false "},{"date":"0001-01-01","uri":"/methods/time/iszero/","title":"IsZero","content":"{{ $t1 := time.AsTime \"2023-01-01T00:00:00-08:00\" }} {{ $t2 := time.AsTime \"0001-01-01T00:00:00-00:00\" }} {{ $t1.IsZero }} → false {{ $t2.IsZero }} → true ``` "},{"date":"0001-01-01","uri":"/functions/js/build/","title":"js.Build","content":"The js.Build function uses the evanw/esbuild package to:\nBundle Transpile (TypeScript and JSX) Tree shake Minify Create source maps {{ with resources.Get \"js/main.js\" }} {{ if hugo.IsDevelopment }} {{ with . | js.Build }} \u003cscript src=\"{{ .RelPermalink }}\"\u003e\u003c/script\u003e {{ end }} {{ else }} {{ $opts := dict \"minify\" true }} {{ with . | js.Build $opts | fingerprint }} \u003cscript src=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e {{ end }} {{ end }} {{ end }} Options targetPath (string) If not set, the source path will be used as the base target path. Note that the target path’s extension may change if the target MIME type is different, e.g. when the source is TypeScript. params (map or slice) Params that can be imported as JSON in your JS files, e.g. {{ $js := resources.Get \"js/main.js\" | js.Build (dict \"params\" (dict \"api\" \"https://example.org/api\")) }} And then in your JS file:\nimport * as params from '@params'; Note that this is meant for small data sets, e.g. configuration settings. For larger data, please put/mount the files into /assets and import them directly.\nminify (bool)Let js.Build handle the minification. inject (slice) This option allows you to automatically replace a global variable with an import from another file. The path names must be relative to assets. See https://esbuild.github.io/api/#inject shims (map) This option allows swapping out a component with another. A common use case is to load dependencies like React from a CDN (with shims) when in production, but running with the full bundled node_modules dependency during development: {{ $shims := dict \"react\" \"js/shims/react.js\" \"react-dom\" \"js/shims/react-dom.js\" }} {{ $js = $js | js.Build dict \"shims\" $shims }} The shim files may look like these:\n// js/shims/react.js module.exports = window.React; // js/shims/react-dom.js module.exports = window.ReactDOM; With the above, these imports should work in both scenarios:\nimport * as React from 'react' import * as ReactDOM from 'react-dom'; target (string) The language target. One of: es5, es2015, es2016, es2017, es2018, es2019, es2020 or esnext. Default is esnext. externals (slice) External dependencies. Use this to trim dependencies you know will never be executed. See https://esbuild.github.io/api/#external defines (map) Allow to define a set of string replacement to be performed when building. Should be a map where each key is to be replaced by its value. {{ $defines := dict \"process.env.NODE_ENV\" `\"development\"` }} format (string) The output format. One of: iife, cjs, esm. Default is iife, a self-executing function, suitable for inclusion as a \u003cscript\u003e tag. sourceMap (string) Whether to generate inline or external source maps from esbuild. External source maps will be written to the target with the output file name + “.map”. Input source maps can be read from js.Build and node modules and combined into the output source maps. By default, source maps are not created. Import JS code from /assets js.Build has full support for the virtual union file system in Hugo Modules. You can see some simple examples in this test project, but in short this means that you can do this:\nimport { hello } from 'my/module'; And it will resolve to the top-most index.{js,ts,tsx,jsx} inside assets/my/module in the layered file system.\nimport { hello3 } from 'my/module/hello3'; Will resolve to hello3.{js,ts,tsx,jsx} inside assets/my/module.\nAny imports starting with . is resolved relative to the current file:\nimport { hello4 } from './lib'; For other files (e.g. JSON, CSS) you need to use the relative path including any extension, e.g:\nimport * as data from 'my/module/data.json'; Any imports in a file outside /assets or that does not resolve to a component inside /assets will be resolved by ESBuild with the project directory as the resolve directory (used as the starting point when looking for node_modules etc.). Also see hugo mod npm pack. If you have any imported npm dependencies in your project, you need to make sure to run npm install before you run hugo.\nAlso note the new params option that can be passed from template to your JS files, e.g.:\n{{ $js := resources.Get \"js/main.js\" | js.Build (dict \"params\" (dict \"api\" \"https://example.org/api\")) }} And then in your JS file:\nimport * as params from '@params'; Hugo will, by default, generate a assets/jsconfig.json file that maps the imports. This is useful for navigation/intellisense help inside code editors, but if you don’t need/want it, you can turn it off.\nNode.js dependencies Use the js.Build function to include Node.js dependencies.\nAny imports in a file outside /assets or that does not resolve to a component inside /assets will be resolved by esbuild with the project directory as the resolve directory (used as the starting point when looking for node_modules etc.). Also see hugo mod npm pack. If you have any imported npm dependencies in your project, you need to make sure to run npm install before you run hugo.\nThe start directory for resolving npm packages (aka. packages that live inside a node_modules folder) is always the main project folder.\nIf you’re developing a theme/component that is supposed to be imported and depends on dependencies inside package.json, we recommend reading about hugo mod npm pack, a tool to consolidate all the npm dependencies in a project.\nExamples {{ $built := resources.Get \"js/index.js\" | js.Build \"main.js\" }} Or with options:\n{{ $externals := slice \"react\" \"react-dom\" }} {{ $defines := dict \"process.env.NODE_ENV\" `\"development\"` }} {{ $opts := dict \"targetPath\" \"main.js\" \"externals\" $externals \"defines\" $defines }} {{ $built := resources.Get \"scripts/main.js\" | js.Build $opts }} \u003cscript src=\"{{ $built.RelPermalink }}\" defer\u003e\u003c/script\u003e "},{"date":"0001-01-01","uri":"/methods/resource/key/","title":"Key","content":"By way of example, consider this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rbaseURL: https://example.org/docs/ baseURL = 'https://example.org/docs/' { \"baseURL\": \"https://example.org/docs/\" } And this template:\n{{ with resources.Get \"images/a.jpg\" }} {{ with resources.Copy \"foo/bar/b.jpg\" . }} {{ .Key }} → foo/bar/b.jpg {{ .Name }} → images/a.jpg {{ .Title }} → images/a.jpg {{ .RelPermalink }} → /docs/foo/bar/b.jpg {{ end }} {{ end }} We used the resources.Copy function to change the publishing path. The Key method returns the updated path, but note that it is different than the value returned by RelPermalink. The RelPermalink value includes the subdirectory segment of the baseURL in the site configuration.\nThe Key method is useful if you need to get the resource’s publishing path without publishing the resource. Unlike the Permalink, RelPermalink, or Publish methods, calling Key will not publish the resource.\nUse this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/methods/menu-entry/keyname/","title":"KeyName","content":"In this menu definition, the second entry does not contain an identifier, so the Identifier method returns its name property instead:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - identifier: about name: About pageRef: /about weight: 10 - name: Contact pageRef: /contact weight: 20 [menus] [[menus.main]] identifier = 'about' name = 'About' pageRef = '/about' weight = 10 [[menus.main]] name = 'Contact' pageRef = '/contact' weight = 20 { \"menus\": { \"main\": [ { \"identifier\": \"about\", \"name\": \"About\", \"pageRef\": \"/about\", \"weight\": 10 }, { \"name\": \"Contact\", \"pageRef\": \"/contact\", \"weight\": 20 } ] } } This example uses the KeyName method when querying the translation table on a multilingual site, falling back the name property if a matching key in the translation table does not exist:\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ or (T (.KeyName | lower)) .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e In the example above, we need to pass the value returned by .KeyName through the lower function because the keys in the translation table are lowercase.\n"},{"date":"0001-01-01","uri":"/methods/page/keywords/","title":"Keywords","content":"By default, Hugo evaluates the keywords when creating collections of related content.\ncontent/recipes/sushi.md\ryaml\r \rtoml\r \rjson\r \r--- keywords: - tuna - sriracha - nori - rice title: How to make spicy tuna hand rolls ---\r+++ keywords = ['tuna', 'sriracha', 'nori', 'rice'] title = 'How to make spicy tuna hand rolls' +++\r{ \"keywords\": [ \"tuna\", \"sriracha\", \"nori\", \"rice\" ], \"title\": \"How to make spicy tuna hand rolls\" } To list the keywords within a template:\n{{ range .Keywords }} {{ . }} {{ end }} Or use the delimit function:\n{{ delimit .Keywords \", \" \", and \" }} → tuna, sriracha, nori, and rice Keywords are also a useful taxonomy:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: category: categories keyword: keywords tag: tags [taxonomies] category = 'categories' keyword = 'keywords' tag = 'tags' { \"taxonomies\": { \"category\": \"categories\", \"keyword\": \"keywords\", \"tag\": \"tags\" } } "},{"date":"0001-01-01","uri":"/methods/page/kind/","title":"Kind","content":"The page kind is one of home, page, section, taxonomy, or term.\ncontent/ ├── books/ │ ├── book-1/ │ │ └── index.md \u003c-- kind = page │ ├── book-2.md \u003c-- kind = page │ └── _index.md \u003c-- kind = section ├── tags/ │ ├── fiction/ │ │ └── _index.md \u003c-- kind = term │ └── _index.md \u003c-- kind = taxonomy └── _index.md \u003c-- kind = home To get the value within a template:\n{{ .Kind }} "},{"date":"0001-01-01","uri":"/functions/lang/formataccounting/","title":"lang.FormatAccounting","content":"{{ 512.5032 | lang.FormatAccounting 2 \"NOK\" }} → NOK512.50 Localization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.\n"},{"date":"0001-01-01","uri":"/functions/lang/formatcurrency/","title":"lang.FormatCurrency","content":"{{ 512.5032 | lang.FormatCurrency 2 \"USD\" }} → $512.50 Localization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.\n"},{"date":"0001-01-01","uri":"/functions/lang/formatnumber/","title":"lang.FormatNumber","content":"{{ 512.5032 | lang.FormatNumber 2 }} → 512.50 Localization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.\n"},{"date":"0001-01-01","uri":"/functions/lang/formatnumbercustom/","title":"lang.FormatNumberCustom","content":"This function formats a number with the given precision. The first options parameter is a space-delimited string of characters to represent negativity, the decimal point, and grouping. The default value is - . ,. The second options parameter defines an alternate delimiting character.\nNote that numbers are rounded up at 5 or greater. So, with precision set to 0, 1.5 becomes 2, and 1.4 becomes 1.\nFor a simpler function that adapts to the current language, see lang.FormatNumber.\n{{ lang.FormatNumberCustom 2 12345.6789 }} → 12,345.68 {{ lang.FormatNumberCustom 2 12345.6789 \"- , .\" }} → 12.345,68 {{ lang.FormatNumberCustom 6 -12345.6789 \"- .\" }} → -12345.678900 {{ lang.FormatNumberCustom 0 -12345.6789 \"- . ,\" }} → -12,346 {{ lang.FormatNumberCustom 0 -12345.6789 \"-|.| \" \"|\" }} → -12 346 Localization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.\n"},{"date":"0001-01-01","uri":"/functions/lang/formatpercent/","title":"lang.FormatPercent","content":"{{ 512.5032 | lang.FormatPercent 2 }} → 512.50% Localization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.\n"},{"date":"0001-01-01","uri":"/functions/lang/merge/","title":"lang.Merge","content":"As an example:\n{{ $pages := .Site.RegularPages | lang.Merge $frSite.RegularPages | lang.Merge $enSite.RegularPages }} Will “fill in the gaps” in the current site with, from left to right, content from the French site, and lastly the English.\nA more practical example is to fill in the missing translations from the other languages:\n{{ $pages := .Site.RegularPages }} {{ range .Site.Home.Translations }} {{ $pages = $pages | lang.Merge .Site.RegularPages }} {{ end }} "},{"date":"0001-01-01","uri":"/functions/lang/translate/","title":"lang.Translate","content":"The lang.Translate function returns the value associated with given key as defined in the translation table for the current language.\nIf the key is not found in the translation table for the current language, the lang.Translate function falls back to the translation table for the defaultContentLanguage.\nIf the key is not found in the translation table for the defaultContentLanguage, the lang.Translate function returns an empty string.\nTo list missing and fallback translations, use the --printI18nWarnings flag when building your site.\nTo render placeholders for missing and fallback translations, set enableMissingTranslationPlaceholders to true in your site configuration.\nTranslation tables Create translation tables in the i18n directory, naming each file according to RFC 5646. Translation tables may be JSON, TOML, or YAML. For example:\ni18n/en.toml i18n/en-US.toml The base name must match the language key as defined in your site configuration.\nArtificial languages with private use subtags as defined in RFC 5646 § 2.2.7 are also supported. You may omit the art-x- prefix for brevity. For example:\ni18n/art-x-hugolang.toml i18n/hugolang.toml Private use subtags must not exceed 8 alphanumeric characters.\nSimple translations Let’s say your multilingual site supports two languages, English and Polish. Create a translation table for each language in the i18n directory.\ni18n/ ├── en.toml └── pl.toml The English translation table:\ni18n/en.\ryaml\r \rtoml\r \rjson\r \rprivacy: privacy security: security privacy = 'privacy' security = 'security' { \"privacy\": \"privacy\", \"security\": \"security\" } The Polish translation table:\ni18n/pl.\ryaml\r \rtoml\r \rjson\r \rprivacy: prywatność security: bezpieczeństwo privacy = 'prywatność' security = 'bezpieczeństwo' { \"privacy\": \"prywatność\", \"security\": \"bezpieczeństwo\" } The examples below use the T alias for brevity.\nWhen viewing the English language site:\n{{ T \"privacy\" }} → privacy {{ T \"security\" }} → security When viewing the Polish language site:\n{{ T \"privacy\" }} → prywatność {{ T \"security\" }} → bezpieczeństwo Translations with pluralization Let’s say your multilingual site supports two languages, English and Polish. Create a translation table for each language in the i18n directory.\ni18n/ ├── en.toml └── pl.toml The Unicode CLDR Plural Rules chart describes the pluralization categories for each language.\nThe English translation table:\ni18n/en.\ryaml\r \rtoml\r \rjson\r \rday: one: day other: days day_with_count: one: '{{ . }} day' other: '{{ . }} days' [day] one = 'day' other = 'days' [day_with_count] one = '{{ . }} day' other = '{{ . }} days' { \"day\": { \"one\": \"day\", \"other\": \"days\" }, \"day_with_count\": { \"one\": \"{{ . }} day\", \"other\": \"{{ . }} days\" } } The Polish translation table:\ni18n/pl.\ryaml\r \rtoml\r \rjson\r \rday: few: miesiące many: miesięcy one: miesiąc other: miesiąca day_with_count: few: '{{ . }} miesiące' many: '{{ . }} miesięcy' one: '{{ . }} miesiąc' other: '{{ . }} miesiąca' [day] few = 'miesiące' many = 'miesięcy' one = 'miesiąc' other = 'miesiąca' [day_with_count] few = '{{ . }} miesiące' many = '{{ . }} miesięcy' one = '{{ . }} miesiąc' other = '{{ . }} miesiąca' { \"day\": { \"few\": \"miesiące\", \"many\": \"miesięcy\", \"one\": \"miesiąc\", \"other\": \"miesiąca\" }, \"day_with_count\": { \"few\": \"{{ . }} miesiące\", \"many\": \"{{ . }} miesięcy\", \"one\": \"{{ . }} miesiąc\", \"other\": \"{{ . }} miesiąca\" } } The examples below use the T alias for brevity.\nWhen viewing the English language site:\n{{ T \"day\" 0 }} → days {{ T \"day\" 1 }} → day {{ T \"day\" 2 }} → days {{ T \"day\" 5 }} → days {{ T \"day_with_count\" 0 }} → 0 days {{ T \"day_with_count\" 1 }} → 1 day {{ T \"day_with_count\" 2 }} → 2 days {{ T \"day_with_count\" 5 }} → 5 days When viewing the Polish language site:\n{{ T \"day\" 0 }} → miesięcy {{ T \"day\" 1 }} → miesiąc {{ T \"day\" 2 }} → miesiące {{ T \"day\" 5 }} → miesięcy {{ T \"day_with_count\" 0 }} → 0 miesięcy {{ T \"day_with_count\" 1 }} → 1 miesiąc {{ T \"day_with_count\" 2 }} → 2 miesiące {{ T \"day_with_count\" 5 }} → 5 miesięcy In the pluralization examples above, we passed an integer in context (the second argument). You can also pass a map in context, providing a count key to control pluralization.\nTranslation table:\ni18n/en.\ryaml\r \rtoml\r \rjson\r \rage: one: '{{ .name }} is {{ .count }} year old.' other: '{{ .name }} is {{ .count }} years old.' [age] one = '{{ .name }} is {{ .count }} year old.' other = '{{ .name }} is {{ .count }} years old.' { \"age\": { \"one\": \"{{ .name }} is {{ .count }} year old.\", \"other\": \"{{ .name }} is {{ .count }} years old.\" } } Template code:\n{{ T \"age\" (dict \"name\" \"Will\" \"count\" 1) }} → Will is 1 year old. {{ T \"age\" (dict \"name\" \"John\" \"count\" 3) }} → John is 3 years old. Translation tables may contain both simple translations and translations with pluralization.\nReserved keys Hugo uses the go-i18n package to look up values in translation tables. This package reserves the following keys for internal use:\nid (string) Uniquely identifies the message. description (string) Describes the message to give additional context to translators that may be relevant for translation. hash (string) Uniquely identifies the content of the message that this message was translated from. leftdelim (string) The left Go template delimiter. rightdelim (string) The right Go template delimiter. zero (string) The content of the message for the CLDR plural form “zero”. one (string) The content of the message for the CLDR plural form “one”. two (string) The content of the message for the CLDR plural form “two”. few (string) The content of the message for the CLDR plural form “few”. many (string) The content of the message for the CLDR plural form “many”. other (string) The content of the message for the CLDR plural form “other”. If you need to provide a translation for one of the reserved keys, you can prepend the word with an underscore. For example:\ni18n/es.\ryaml\r \rtoml\r \rjson\r \r_description: descripción _few: pocos _many: muchos _one: uno _other: otro _two: dos _zero: cero _description = 'descripción' _few = 'pocos' _many = 'muchos' _one = 'uno' _other = 'otro' _two = 'dos' _zero = 'cero' { \"_description\": \"descripción\", \"_few\": \"pocos\", \"_many\": \"muchos\", \"_one\": \"uno\", \"_other\": \"otro\", \"_two\": \"dos\", \"_zero\": \"cero\" } Then in your templates:\n{{ T \"_description\" }} → descripción {{ T \"_few\" }} → pocos {{ T \"_many\" }} → muchos {{ T \"_one\" }} → uno {{ T \"_two\" }} → dos {{ T \"_zero\" }} → cero {{ T \"_other\" }} → otro "},{"date":"0001-01-01","uri":"/methods/page/language/","title":"Language","content":"The Language method on a Page object returns the language object for the given page. The language object points to the language definition in the site configuration.\nYou can also use the Language method on a Site object. See details.\nMethods The examples below assume the following in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rlanguages: de: languageCode: de-DE languageDirection: ltr languageName: Deutsch weight: 2 [languages] [languages.de] languageCode = 'de-DE' languageDirection = 'ltr' languageName = 'Deutsch' weight = 2 { \"languages\": { \"de\": { \"languageCode\": \"de-DE\", \"languageDirection\": \"ltr\", \"languageName\": \"Deutsch\", \"weight\": 2 } } } Lang (string) The language tag as defined by RFC 5646. {{ .Language.Lang }} → de LanguageCode (string) The language code from the site configuration. {{ .Language.LanguageCode }} → de-DE LanguageDirection (string) The language direction from the site configuration, either ltr or rtl. {{ .Language.LanguageDirection }} → ltr LanguageName (string) The language name from the site configuration. {{ .Language.LanguageName }} → Deutsch Weight (int) The language weight from the site configuration which determines its order in the slice of languages returned by the Languages method on a Site object. {{ .Language.Weight }} → 2 "},{"date":"0001-01-01","uri":"/methods/site/language/","title":"Language","content":"The Language method on a Site object returns the language object for the given site. The language object points to the language definition in the site configuration.\nYou can also use the Language method on a Page object. See details.\nMethods The examples below assume the following in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rlanguages: de: languageCode: de-DE languageDirection: ltr languageName: Deutsch weight: 1 [languages] [languages.de] languageCode = 'de-DE' languageDirection = 'ltr' languageName = 'Deutsch' weight = 1 { \"languages\": { \"de\": { \"languageCode\": \"de-DE\", \"languageDirection\": \"ltr\", \"languageName\": \"Deutsch\", \"weight\": 1 } } } Lang (string) The language tag as defined by RFC 5646. {{ .Site.Language.Lang }} → de LanguageCode (string) The language code from the site configuration. {{ .Site.Language.LanguageCode }} → de-DE LanguageDirection (string) The language direction from the site configuration, either ltr or rtl. {{ .Site.Language.LanguageDirection }} → ltr LanguageName (string) The language name from the site configuration. {{ .Site.Language.LanguageName }} → Deutsch Weight (int) The language weight from the site configuration which determines its order in the slice of languages returned by the Languages method on a Site object. {{ .Site.Language.Weight }} → 1 Example Some of the methods above are commonly used in a base template as attributes for the html element.\n\u003chtml lang=\"{{ or site.Language.LanguageCode site.Language.Lang }}\" dir=\"{{ or site.Language.LanguageDirection `ltr` }} \u003e The example above uses the global site function instead of accessing the Site object via the .Site notation.\nAlso note that each attribute has a fallback value assigned via the or operator.\n"},{"date":"0001-01-01","uri":"/methods/site/languageprefix/","title":"LanguagePrefix","content":"Consider this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: de defaultContentLanguageInSubdir: false languages: de: languageCode: de-DE languageDirection: ltr languageName: Deutsch title: Projekt Dokumentation weight: 1 en: languageCode: en-US languageDirection: ltr languageName: English title: Project Documentation weight: 2 defaultContentLanguage = 'de' defaultContentLanguageInSubdir = false [languages] [languages.de] languageCode = 'de-DE' languageDirection = 'ltr' languageName = 'Deutsch' title = 'Projekt Dokumentation' weight = 1 [languages.en] languageCode = 'en-US' languageDirection = 'ltr' languageName = 'English' title = 'Project Documentation' weight = 2 { \"defaultContentLanguage\": \"de\", \"defaultContentLanguageInSubdir\": false, \"languages\": { \"de\": { \"languageCode\": \"de-DE\", \"languageDirection\": \"ltr\", \"languageName\": \"Deutsch\", \"title\": \"Projekt Dokumentation\", \"weight\": 1 }, \"en\": { \"languageCode\": \"en-US\", \"languageDirection\": \"ltr\", \"languageName\": \"English\", \"title\": \"Project Documentation\", \"weight\": 2 } } } When visiting the German language site:\n{{ .Site.LanguagePrefix }} → \"\" When visiting the English language site:\n{{ .Site.LanguagePrefix }} → /en If you change defaultContentLanguageInSubdir to true, when visiting the German language site:\n{{ .Site.LanguagePrefix }} → /de You may use the LanguagePrefix method with both monolingual and multilingual sites.\n"},{"date":"0001-01-01","uri":"/methods/site/languages/","title":"Languages","content":"The Languages method on a Site object returns a collection of language objects for all sites, ordered by language weight. Each language object points to its language definition in the site configuration.\nTo view the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") .Site.Languages }}\u003c/pre\u003e With this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: de defaultContentLanguageInSubdir: false languages: de: languageCode: de-DE languageDirection: ltr languageName: Deutsch title: Projekt Dokumentation weight: 1 en: languageCode: en-US languageDirection: ltr languageName: English title: Project Documentation weight: 2 defaultContentLanguage = 'de' defaultContentLanguageInSubdir = false [languages] [languages.de] languageCode = 'de-DE' languageDirection = 'ltr' languageName = 'Deutsch' title = 'Projekt Dokumentation' weight = 1 [languages.en] languageCode = 'en-US' languageDirection = 'ltr' languageName = 'English' title = 'Project Documentation' weight = 2 { \"defaultContentLanguage\": \"de\", \"defaultContentLanguageInSubdir\": false, \"languages\": { \"de\": { \"languageCode\": \"de-DE\", \"languageDirection\": \"ltr\", \"languageName\": \"Deutsch\", \"title\": \"Projekt Dokumentation\", \"weight\": 1 }, \"en\": { \"languageCode\": \"en-US\", \"languageDirection\": \"ltr\", \"languageName\": \"English\", \"title\": \"Project Documentation\", \"weight\": 2 } } } This template:\n\u003cul\u003e {{ range .Site.Languages }} \u003cli\u003e{{ .Title }} ({{ .LanguageName }})\u003c/li\u003e {{ end }} \u003c/ul\u003e Is rendered to:\n\u003cul\u003e \u003cli\u003eProjekt Dokumentation (Deutsch)\u003c/li\u003e \u003cli\u003eProject Documentation (English)\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/site/lastchange/","title":"LastChange","content":"The LastChange method on a Site object returns a time.Time value. Use this with time functions and methods. For example:\n{{ .Site.LastChange | time.Format \":date_long\" }} → October 16, 2023 "},{"date":"0001-01-01","uri":"/methods/page/lastmod/","title":"Lastmod","content":"Set the last modification date in front matter:\ncontent/news/article-1.md\ryaml\r \rtoml\r \rjson\r \r--- lastmod: 2023-10-19T00:40:04-07:00 title: Article 1 ---\r+++ lastmod = 2023-10-19T00:40:04-07:00 title = 'Article 1' +++\r{ \"lastmod\": \"2023-10-19T00:40:04-07:00\", \"title\": \"Article 1\" } The last modification date is a time.Time value. Format and localize the value with the time.Format function, or use it with any of the time methods.\n{{ .Lastmod | time.Format \":date_medium\" }} → Oct 19, 2023 In the example above we explicitly set the last modification date in front matter. With Hugo’s default configuration, the Lastmod method returns the front matter value. This behavior is configurable, allowing you to:\nSet the last modification date to the Author Date of the last Git commit for that file. See GitInfo for details. Set fallback values if the last modification date is not defined in front matter. Learn more about date configuration.\n"},{"date":"0001-01-01","uri":"/methods/page/layout/","title":"Layout","content":"Specify the layout field in front matter to target a particular template. See details.\ncontent/contact.md.\ryaml\r \rtoml\r \rjson\r \rlayout: contact title: Contact layout = 'contact' title = 'Contact' { \"layout\": \"contact\", \"title\": \"Contact\" } Hugo will render the page using contact.html.\nlayouts/ └── _default/ ├── baseof.html ├── contact.html ├── home.html ├── list.html └── single.html Although rarely used within a template, you can access the value with:\n{{ .Layout }} The Layout method returns an empty string if the layout field in front matter is not defined.\n"},{"date":"0001-01-01","uri":"/functions/go-template/len/","title":"len","content":"With a string:\n{{ \"ab\" | len }} → 2 {{ \"\" | len }} → 0 With a slice:\n{{ slice \"a\" \"b\" | len }} → 2 {{ slice | len }} → 0 With a map:\n{{ dict \"a\" 1 \"b\" 2 | len }} → 2 {{ dict | len }} → 0 With a collection:\n{{ site.RegularPages | len }} → 42 You may also determine the number of pages in a collection with:\n{{ site.RegularPages.Len }} → 42 See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/methods/page/len/","title":"Len","content":"{{ .Len }} → 42 "},{"date":"0001-01-01","uri":"/methods/pages/len/","title":"Len","content":"{{ .Pages.Len }} → 42 "},{"date":"0001-01-01","uri":"/methods/menu/limit/","title":"Limit","content":"The Limit method returns the given menu, limited to the first N entries.\nConsider this menu definition:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: Services pageRef: /services weight: 10 - name: About pageRef: /about weight: 20 - name: Contact pageRef: /contact weight: 30 [menus] [[menus.main]] name = 'Services' pageRef = '/services' weight = 10 [[menus.main]] name = 'About' pageRef = '/about' weight = 20 [[menus.main]] name = 'Contact' pageRef = '/contact' weight = 30 { \"menus\": { \"main\": [ { \"name\": \"Services\", \"pageRef\": \"/services\", \"weight\": 10 }, { \"name\": \"About\", \"pageRef\": \"/about\", \"weight\": 20 }, { \"name\": \"Contact\", \"pageRef\": \"/contact\", \"weight\": 30 } ] } } To sort the entries by name, and limit to the first 2 entries:\n\u003cul\u003e {{ range .Site.Menus.main.ByName.Limit 2 }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Hugo renders this to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/about/\"\u003eAbout\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/contact\"\u003eContact\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/pages/limit/","title":"Limit","content":"{{ range .Pages.Limit 3 }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/page/linktitle/","title":"LinkTitle","content":"The LinkTitle method returns the linkTitle field as defined in front matter, falling back to the value returned by the Title method.\ncontent/articles/healthy-desserts.md\ryaml\r \rtoml\r \rjson\r \r--- linkTitle: Dessert recipes title: Seventeen delightful recipes for healthy desserts ---\r+++ linkTitle = 'Dessert recipes' title = 'Seventeen delightful recipes for healthy desserts' +++\r{ \"linkTitle\": \"Dessert recipes\", \"title\": \"Seventeen delightful recipes for healthy desserts\" } {{ .LinkTitle }} → Dessert recipes As demonstrated above, defining a link title in front matter is advantageous when the page title is long. Use it when generating anchor elements in your templates:\n\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e "},{"date":"0001-01-01","uri":"/methods/time/local/","title":"Local","content":"{{ $t := time.AsTime \"2023-01-28T07:44:58+00:00\" }} {{ $t.Local }} → 2023-01-27 23:44:58 -0800 PST "},{"date":"0001-01-01","uri":"/methods/site/mainsections/","title":"MainSections","content":"Site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: mainSections: - books - films [params] mainSections = ['books', 'films'] { \"params\": { \"mainSections\": [ \"books\", \"films\" ] } } Template:\n{{ .Site.MainSections }} → [books films] If params.mainSections is not defined in the site configuration, this method returns a slice with one element—the top level section with the most pages.\nWith this content structure, the “films” section has the most pages:\ncontent/ ├── books/ │ ├── book-1.md │ └── book-2.md ├── films/ │ ├── film-1.md │ ├── film-2.md │ └── film-3.md └── _index.md Template:\n{{ .Site.MainSections }} → [films] When creating a theme, instead of hardcoding section names when listing the most relevant pages on the front page, instruct site authors to set params.mainSections in their site configuration.\nThen your home page template can do something like this:\n{{ range where .Site.RegularPages \"Section\" \"in\" .Site.MainSections }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/functions/math/abs/","title":"math.Abs","content":"\rNew in v0.112.0\r{{ math.Abs -2.1 }} → 2.1 "},{"date":"0001-01-01","uri":"/functions/math/add/","title":"math.Add","content":"If one of the numbers is a float, the result is a float.\n{{ add 12 3 2 }} → 17 You can also use the add function to concatenate strings.\n{{ add \"hu\" \"go\" }} → hugo "},{"date":"0001-01-01","uri":"/functions/math/ceil/","title":"math.Ceil","content":"{{ math.Ceil 2.1 }} → 3 "},{"date":"0001-01-01","uri":"/functions/math/counter/","title":"math.Counter","content":"The counter is global for both monolingual and multilingual sites, and its initial value for each build is 1.\n{{ warnf \"single.html called %d times\" math.Counter }} WARN single.html called 1 times WARN single.html called 2 times WARN single.html called 3 times Use this function to:\nCreate unique warnings as shown above; the warnf function suppresses duplicate messages Create unique target paths for the resources.FromString function where the target path is also the cache key Due to concurrency, the value returned in a given template for a given page will vary from one build to the next. You cannot use this function to assign a static id to each page.\n"},{"date":"0001-01-01","uri":"/functions/math/div/","title":"math.Div","content":"If one of the numbers is a float, the result is a float.\n{{ div 12 3 2 }} → 2 "},{"date":"0001-01-01","uri":"/functions/math/floor/","title":"math.Floor","content":"{{ math.Floor 1.9 }} → 1 "},{"date":"0001-01-01","uri":"/functions/math/log/","title":"math.Log","content":"{{ math.Log 42 }} → 3.737 "},{"date":"0001-01-01","uri":"/functions/math/max/","title":"math.Max","content":"{{ math.Max 1 (slice 2 3) 4 }} → 4 "},{"date":"0001-01-01","uri":"/functions/math/min/","title":"math.Min","content":"{{ math.Min 1 (slice 2 3) 4 }} → 1 "},{"date":"0001-01-01","uri":"/functions/math/mod/","title":"math.Mod","content":"{{ mod 15 3 }} → 0 "},{"date":"0001-01-01","uri":"/functions/math/modbool/","title":"math.ModBool","content":"{{ modBool 15 3 }} → true "},{"date":"0001-01-01","uri":"/functions/math/mul/","title":"math.Mul","content":"If one of the numbers is a float, the result is a float.\n{{ mul 12 3 2 }} → 72 "},{"date":"0001-01-01","uri":"/functions/math/pow/","title":"math.Pow","content":"{{ math.Pow 2 3 }} → 8 "},{"date":"0001-01-01","uri":"/functions/math/product/","title":"math.Product","content":"\rNew in v0.114.0\r{{ math.Product 1 (slice 2 3) 4 }} → 24 "},{"date":"0001-01-01","uri":"/functions/math/rand/","title":"math.Rand","content":"\rNew in v0.121.2\rThe math.Rand function returns a pseudo-random number in the half-open interval [0.0, 1.0).\n{{ math.Rand }} → 0.6312770459590062 To generate a random integer in the closed interval [0, 5]:\n{{ math.Rand | mul 6 | math.Floor }} To generate a random integer in the closed interval [1, 6]:\n{{ math.Rand | mul 6 | math.Ceil }} To generate a random float, with one digit after the decimal point, in the closed interval [0, 4.9]:\n{{ div (math.Rand | mul 50 | math.Floor) 10 }} To generate a random float, with one digit after the decimal point, in the closed interval [0.1, 5.0]:\n{{ div (math.Rand | mul 50 | math.Ceil) 10 }} "},{"date":"0001-01-01","uri":"/functions/math/round/","title":"math.Round","content":"{{ math.Round 1.5 }} → 2 "},{"date":"0001-01-01","uri":"/functions/math/sqrt/","title":"math.Sqrt","content":"{{ math.Sqrt 81 }} → 9 "},{"date":"0001-01-01","uri":"/functions/math/sub/","title":"math.Sub","content":"If one of the numbers is a float, the result is a float.\n{{ sub 12 3 2 }} → 7 "},{"date":"0001-01-01","uri":"/functions/math/sum/","title":"math.Sum","content":"\rNew in v0.114.0\r{{ math.Sum 1 (slice 2 3) 4 }} → 10 "},{"date":"0001-01-01","uri":"/methods/resource/mediatype/","title":"MediaType","content":"The MediaType method on a Resource object returns an object with additional methods.\nMethods Type (string) The resource’s media type. {{ with resources.Get \"images/a.jpg\" }} {{ .MediaType.Type }} → image/jpeg {{ end }} MainType (string) The main type of the resource’s media type. {{ with resources.Get \"images/a.jpg\" }} {{ .MediaType.MainType }} → image {{ end }} SubType (string) The subtype of the resource’s media type. This may or may not correspond to the file suffix. {{ with resources.Get \"images/a.jpg\" }} {{ .MediaType.SubType }} → jpeg {{ end }} Suffixes (slice) A slice of possible file suffixes for the resource’s media type. {{ with resources.Get \"images/a.jpg\" }} {{ .MediaType.Suffixes }} → [jpg jpeg jpe jif jfif] {{ end }} Use this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/methods/menu-entry/menu/","title":"Menu","content":"{{ range .Site.Menus.main }} {{ .Menu }} → main {{ end }} Use this method with the IsMenuCurrent and HasMenuCurrent methods on a Page object to set “active” and “ancestor” classes on a rendered entry. See this example.\n"},{"date":"0001-01-01","uri":"/methods/site/menus/","title":"Menus","content":"The Menus method on a Site object returns a collection of menus, where each menu contains one or more entries, either flat or nested. Each entry points to a page within the site, or to an external resource.\nMenus can be defined and localized in several ways. Please see the menus section for a complete explanation and examples.\nA site can have multiple menus. For example, a main menu and a footer menu:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: footer: - name: Legal pageRef: /legal weight: 10 - name: Privacy pageRef: /privacy weight: 20 main: - name: Home pageRef: / weight: 10 - name: Books pageRef: /books weight: 20 - name: Films pageRef: /films weight: 30 [menus] [[menus.footer]] name = 'Legal' pageRef = '/legal' weight = 10 [[menus.footer]] name = 'Privacy' pageRef = '/privacy' weight = 20 [[menus.main]] name = 'Home' pageRef = '/' weight = 10 [[menus.main]] name = 'Books' pageRef = '/books' weight = 20 [[menus.main]] name = 'Films' pageRef = '/films' weight = 30 { \"menus\": { \"footer\": [ { \"name\": \"Legal\", \"pageRef\": \"/legal\", \"weight\": 10 }, { \"name\": \"Privacy\", \"pageRef\": \"/privacy\", \"weight\": 20 } ], \"main\": [ { \"name\": \"Home\", \"pageRef\": \"/\", \"weight\": 10 }, { \"name\": \"Books\", \"pageRef\": \"/books\", \"weight\": 20 }, { \"name\": \"Films\", \"pageRef\": \"/films\", \"weight\": 30 } ] } } This template renders the main menu:\n{{ with site.Menus.main }} \u003cnav class=\"menu\"\u003e {{ range . }} {{ if $.IsMenuCurrent .Menu . }} \u003ca class=\"active\" aria-current=\"page\" href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ else }} \u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ end }} {{ end }} \u003c/nav\u003e {{ end }} When viewing the home page, the result is:\n\u003cnav class=\"menu\"\u003e \u003ca class=\"active\" aria-current=\"page\" href=\"/\"\u003eHome\u003c/a\u003e \u003ca href=\"/books/\"\u003eBooks\u003c/a\u003e \u003ca href=\"/films/\"\u003eFilms\u003c/a\u003e \u003c/nav\u003e When viewing the “books” page, the result is:\n\u003cnav class=\"menu\"\u003e \u003ca href=\"/\"\u003eHome\u003c/a\u003e \u003ca class=\"active\" aria-current=\"page\" href=\"/books/\"\u003eBooks\u003c/a\u003e \u003ca href=\"/films/\"\u003eFilms\u003c/a\u003e \u003c/nav\u003e You will typically render a menu using a partial template. As the active menu entry will be different on each page, use the partial function to call the template. Do not use the partialCached function.\nThe example above is simplistic. Please see the menu templates section for more information.\n"},{"date":"0001-01-01","uri":"/methods/duration/microseconds/","title":"Microseconds","content":"{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }} {{ $d.Microseconds }} → 12751500000 "},{"date":"0001-01-01","uri":"/methods/duration/milliseconds/","title":"Milliseconds","content":"{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }} {{ $d.Milliseconds }} → 12751500 "},{"date":"0001-01-01","uri":"/methods/time/minute/","title":"Minute","content":"{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Minute }} → 44 "},{"date":"0001-01-01","uri":"/methods/duration/minutes/","title":"Minutes","content":"{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }} {{ $d.Minutes }} → 212.525 "},{"date":"0001-01-01","uri":"/methods/time/month/","title":"Month","content":"To convert the time.Month value to a string:\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Month.String }} → January To convert the time.Month value to an integer.\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Month | int }} → 1 "},{"date":"0001-01-01","uri":"/methods/menu-entry/name/","title":"Name","content":"If you define the menu entry automatically, the Name method returns the page’s LinkTitle, falling back to its Title.\nIf you define the menu entry in front matter or in site configuration, the Name method returns the name property, falling back to the page’s LinkTitle, then to its Title.\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/resource/name/","title":"Name","content":"The value returned by the Name method on a Resource object depends on the resource type.\nGlobal resource With a global resource, the Name method returns the path to the resource, relative to the assets directory.\nassets/ └── images/ └── a.jpg {{ with resources.Get \"images/a.jpg\" }} {{ .Name }} → images/a.jpg {{ end }} Page resource With a page resource, the Name method returns the path to the resource, relative to the page bundle.\ncontent/ ├── posts/ │ ├── post-1/ │ │ ├── images/ │ │ │ └── a.jpg │ │ └── index.md │ └── _index.md └── _index.md {{ with .Resources.Get \"images/a.jpg\" }} {{ .Name }} → images/a.jpg {{ end }} If you create an element in the resources array in front matter, the Name method returns the value of the name parameter:\ncontent/posts/post-1.md\ryaml\r \rtoml\r \rjson\r \r--- resources: - name: cat params: temperament: malicious src: images/a.jpg title: Felix the cat title: Post 1 ---\r+++ title = 'Post 1' [[resources]] name = 'cat' src = 'images/a.jpg' title = 'Felix the cat' [resources.params] temperament = 'malicious' +++\r{ \"resources\": [ { \"name\": \"cat\", \"params\": { \"temperament\": \"malicious\" }, \"src\": \"images/a.jpg\", \"title\": \"Felix the cat\" } ], \"title\": \"Post 1\" } {{ with .Resources.Get \"cat\" }} {{ .Name }} → cat {{ end }} Remote resource With a remote resource, the Name method returns a hashed file name.\n{{ with resources.GetRemote \"https://example.org/images/a.jpg\" }} {{ .Name }} → a_18432433023265451104.jpg {{ end }} "},{"date":"0001-01-01","uri":"/methods/shortcode/name/","title":"Name","content":"The Name method is useful for error reporting. For example, if your shortcode requires a “greeting” parameter:\nlayouts/shortcodes/myshortcode.html\r{{ $greeting := \"\" }} {{ with .Get \"greeting\" }} {{ $greeting = . }} {{ else }} {{ errorf \"The %q shortcode requires a 'greeting' parameter. See %s\" .Name .Position }} {{ end }}\rIn the absence of a “greeting” parameter, Hugo will throw an error message and fail the build:\nERROR The \"myshortcode\" shortcode requires a 'greeting' parameter. See \"/home/user/project/content/about.md:11:1\" "},{"date":"0001-01-01","uri":"/methods/time/nanosecond/","title":"Nanosecond","content":"{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Nanosecond }} → 0 "},{"date":"0001-01-01","uri":"/methods/duration/nanoseconds/","title":"Nanoseconds","content":"{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }} {{ $d.Nanoseconds }} → 12751500000000 "},{"date":"0001-01-01","uri":"/methods/page/next/","title":"Next","content":"The behavior of the Prev and Next methods on a Page object is probably the reverse of what you expect.\nWith this content structure:\ncontent/ ├── pages/ │ ├── _index.md │ ├── page-1.md \u003c-- front matter: weight = 10 │ ├── page-2.md \u003c-- front matter: weight = 20 │ └── page-3.md \u003c-- front matter: weight = 30 └── _index.md When you visit page-2:\nThe Prev method points to page-3 The Next method points to page-1 Use the opposite label in your navigation links as shown in the example below.\n{{ with .Next }} \u003ca href=\"{{ .RelPermalink }}\"\u003ePrev\u003c/a\u003e {{ end }} {{ with .Prev }} \u003ca href=\"{{ .RelPermalink }}\"\u003eNext\u003c/a\u003e {{ end }} Compare to Pages methods The Next and Prev methods on a Pages object are more flexible than the Next and Prev methods on a Page object.\nPage collection Custom sort order PAGES.Next and PAGES.Prev locally defined ✔️ PAGE.Next and PAGE.Prev globally defined ❌ locally defined Build the page collection every time you call PAGES.Next and PAGES.Prev. Navigation between pages is relative to the current page’s position within the local collection, independent of the global collection. With a local collection, the navigation sort order is the same as the collection sort order.\nglobally defined Build the page collection once, on a list page. Navigation between pages is relative to the current page’s position within the global collection. With a global collection, the navigation sort order is fixed, using Hugo’s default sort order. In order of precedence:\nPage weight Page date (descending) Page linkTitle, falling back to page title Page file path if the page is backed by a file For example, with a global collection sorted by title, the navigation sort order will use Hugo’s default sort order. This is probably not what you want or expect. For this reason, the Next and Prev methods on a Pages object are generally a better choice.\n"},{"date":"0001-01-01","uri":"/methods/pages/next/","title":"Next","content":"The behavior of the Prev and Next methods on a Pages objects is probably the reverse of what you expect.\nWith this content structure and the page collection sorted by weight in ascending order:\ncontent/ ├── pages/ │ ├── _index.md │ ├── page-1.md \u003c-- front matter: weight = 10 │ ├── page-2.md \u003c-- front matter: weight = 20 │ └── page-3.md \u003c-- front matter: weight = 30 └── _index.md When you visit page-2:\nThe Prev method points to page-3 The Next method points to page-1 Use the opposite label in your navigation links as shown in the example below.\n{{ $pages := where .Site.RegularPages.ByWeight \"Section\" \"pages\" }} {{ with $pages.Next . }} \u003ca href=\"{{ .RelPermalink }}\"\u003ePrevious\u003c/a\u003e {{ end }} {{ with $pages.Prev . }} \u003ca href=\"{{ .RelPermalink }}\"\u003eNext\u003c/a\u003e {{ end }} Compare to Page methods The Next and Prev methods on a Pages object are more flexible than the Next and Prev methods on a Page object.\nPage collection Custom sort order PAGES.Next and PAGES.Prev locally defined ✔️ PAGE.Next and PAGE.Prev globally defined ❌ locally defined Build the page collection every time you call PAGES.Next and PAGES.Prev. Navigation between pages is relative to the current page’s position within the local collection, independent of the global collection. With a local collection, the navigation sort order is the same as the collection sort order.\nglobally defined Build the page collection once, on a list page. Navigation between pages is relative to the current page’s position within the global collection. With a global collection, the navigation sort order is fixed, using Hugo’s default sort order. In order of precedence:\nPage weight Page date (descending) Page linkTitle, falling back to page title Page file path if the page is backed by a file For example, with a global collection sorted by title, the navigation sort order will use Hugo’s default sort order. This is probably not what you want or expect. For this reason, the Next and Prev methods on a Pages object are generally a better choice.\n"},{"date":"0001-01-01","uri":"/methods/page/nextinsection/","title":"NextInSection","content":"The behavior of the PrevInSection and NextInSection methods on a Page object is probably the reverse of what you expect.\nWith this content structure:\ncontent/ ├── books/ │ ├── _index.md │ ├── book-1.md │ ├── book-2.md │ └── book-3.md ├── films/ │ ├── _index.md │ ├── film-1.md │ ├── film-2.md │ └── film-3.md └── _index.md When you visit book-2:\nThe PrevInSection method points to book-3 The NextInSection method points to book-1 Use the opposite label in your navigation links as shown in the example below.\n{{ with .NextInSection }} \u003ca href=\"{{ .RelPermalink }}\"\u003ePrevious in section\u003c/a\u003e {{ end }} {{ with .PrevInSection }} \u003ca href=\"{{ .RelPermalink }}\"\u003eNext in section\u003c/a\u003e {{ end }} The navigation sort order may be different than the page collection sort order.\nWith the PrevInSection and NextInSection methods, the navigation sort order is fixed, using Hugo’s default sort order. In order of precedence:\nPage weight Page date (descending) Page linkTitle, falling back to page title Page file path if the page is backed by a file For example, with a page collection sorted by title, the navigation sort order will use Hugo’s default sort order. This is probably not what you want or expect. For this reason, the Next and Prev methods on a Pages object are generally a better choice.\n"},{"date":"0001-01-01","uri":"/functions/go-template/not/","title":"not","content":"Unlike the and and or operators, the not operator always returns a boolean value.\n{{ not true }} → false {{ not false }} → true {{ not 1 }} → false {{ not 0 }} → true {{ not \"x\" }} → false {{ not \"\" }} → true Use the not operator, twice in succession, to cast any value to a boolean value. For example:\n{{ 42 | not | not }} → true {{ \"\" | not | not }} → false See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/functions/openapi3/unmarshal/","title":"openapi3.Unmarshal","content":"Use the openapi3.Unmarshal function with global, page, or remote resources.\nFor example, to work with a remote OpenAPI definition:\n{{ $url := \"https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/petstore.json\" }} {{ $api := \"\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ $api = . | openapi3.Unmarshal }} {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} To inspect the data structure:\n\u003cpre\u003e{{ debug.Dump $api }}\u003c/pre\u003e To list the GET and POST operations for each of the API paths:\n{{ range $path, $details := $api.Paths }} \u003cp\u003e{{ $path }}\u003c/p\u003e \u003cdl\u003e {{ with $details.Get }} \u003cdt\u003eGET\u003c/dt\u003e \u003cdd\u003e{{ .Summary }}\u003c/dd\u003e {{ end }} {{ with $details.Post }} \u003cdt\u003ePOST\u003c/dt\u003e \u003cdd\u003e{{ .Summary }}\u003c/dd\u003e {{ end }} \u003c/dl\u003e {{ end }} Hugo renders this to:\n\u003cp\u003e/pets\u003c/p\u003e \u003cdl\u003e \u003cdt\u003eGET\u003c/dt\u003e \u003cdd\u003eList all pets\u003c/dd\u003e \u003cdt\u003ePOST\u003c/dt\u003e \u003cdd\u003eCreate a pet\u003c/dd\u003e \u003c/dl\u003e \u003cp\u003e/pets/{petId}\u003c/p\u003e \u003cdl\u003e \u003cdt\u003eGET\u003c/dt\u003e \u003cdd\u003eInfo for a specific pet\u003c/dd\u003e \u003c/dl\u003e "},{"date":"0001-01-01","uri":"/functions/go-template/or/","title":"or","content":"In Go templates, the falsy values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. Everything else is truthy.\n{{ or 0 1 2 }} → 1 {{ or false \"a\" 1 }} → a {{ or 0 true \"a\" }} → true {{ or false \"\" 0 }} → 0 {{ or 0 \"\" false }} → false See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/methods/shortcode/ordinal/","title":"Ordinal","content":"The Ordinal method returns the zero-based ordinal of the shortcode in relation to its parent. If the parent is the page itself, the ordinal represents the position of this shortcode in the page content.\nThis method is useful for, among other things, assigning unique element IDs when a shortcode is called two or more times from the same page. For example:\ncontent/about.md\r{{\u003c img src=\"images/a.jpg\" \u003e}} {{\u003c img src=\"images/b.jpg\" \u003e}}\rThis shortcode performs error checking, then renders an HTML img element with a unique id attribute:\nlayouts/shortcodes/img.html\r{{ $src := \"\" }} {{ with .Get \"src\" }} {{ $src = . }} {{ with resources.Get $src }} {{ $id := printf \"img-%03d\" $.Ordinal }} \u003cimg id=\"{{ $id }}\" src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ else }} {{ errorf \"The %q shortcode was unable to find %s. See %s\" $.Name $src $.Position }} {{ end }} {{ else }} {{ errorf \"The %q shortcode requires a 'src' parameter. See %s\" .Name .Position }} {{ end }}\rHugo renders the page to:\n\u003cimg id=\"img-000\" src=\"/images/a.jpg\" width=\"600\" height=\"400\" alt=\"\"\u003e \u003cimg id=\"img-001\" src=\"/images/b.jpg\" width=\"600\" height=\"400\" alt=\"\"\u003e In the shortcode template above, the with statement is used to create conditional blocks. Remember that the with statement binds context (the dot) to its expression. Inside of a with block, preface shortcode method calls with a $ to access the top level context passed into the template.\n"},{"date":"0001-01-01","uri":"/functions/os/fileexists/","title":"os.FileExists","content":"The os.FileExists function attempts to resolve the path relative to the root of your project directory. If a matching file or directory is not found, it will attempt to resolve the path relative to the contentDir. A leading path separator (/) is optional.\nWith this directory structure:\ncontent/ ├── about.md ├── contact.md └── news/ ├── article-1.md └── article-2.md The function returns these values:\n{{ fileExists \"content\" }} → true {{ fileExists \"content/news\" }} → true {{ fileExists \"content/news/article-1\" }} → false {{ fileExists \"content/news/article-1.md\" }} → true {{ fileExists \"news\" }} → true {{ fileExists \"news/article-1\" }} → false {{ fileExists \"news/article-1.md\" }} → true "},{"date":"0001-01-01","uri":"/functions/os/getenv/","title":"os.Getenv","content":"Security By default, when using the os.Getenv function Hugo allows access to:\nThe CI environment variable Any environment variable beginning with HUGO_ To access other environment variables, adjust your site configuration. For example, to allow access to the HOME and USER environment variables:\nhugo.\ryaml\r \rtoml\r \rjson\r \rsecurity: funcs: getenv: - ^HUGO_ - ^CI$ - ^USER$ - ^HOME$ [security] [security.funcs] getenv = ['^HUGO_', '^CI$', '^USER$', '^HOME$'] { \"security\": { \"funcs\": { \"getenv\": [ \"^HUGO_\", \"^CI$\", \"^USER$\", \"^HOME$\" ] } } } Read more about Hugo’s security policy.\nExamples {{ getenv \"HOME\" }} → /home/victor {{ getenv \"USER\" }} → victor You can pass values when building your site:\nMY_VAR1=foo MY_VAR2=bar hugo OR export MY_VAR1=foo export MY_VAR2=bar hugo And then retrieve the values within a template:\n{{ getenv \"MY_VAR1\" }} → foo {{ getenv \"MY_VAR2\" }} → bar "},{"date":"0001-01-01","uri":"/functions/os/readdir/","title":"os.ReadDir","content":"The os.ReadDir function resolves the path relative to the root of your project directory. A leading path separator (/) is optional.\nWith this directory structure:\ncontent/ ├── about.md ├── contact.md └── news/ ├── article-1.md └── article-2.md This template code:\n{{ range readDir \"content\" }} {{ .Name }} → {{ .IsDir }} {{ end }} Produces:\nabout.md → false contact.md → false news → true Note that os.ReadDir is not recursive.\nDetails of the FileInfo structure are available in the Go documentation.\n"},{"date":"0001-01-01","uri":"/functions/os/readfile/","title":"os.ReadFile","content":"The os.ReadFile function attempts to resolve the path relative to the root of your project directory. If a matching file is not found, it will attempt to resolve the path relative to the contentDir. A leading path separator (/) is optional.\nWith a file named README.md in the root of your project directory:\nThis is **bold** text. This template code:\n{{ readFile \"README.md\" }} Produces:\nThis is **bold** text. Note that os.ReadFile returns raw (uninterpreted) content.\n"},{"date":"0001-01-01","uri":"/functions/os/stat/","title":"os.Stat","content":"The os.Stat function attempts to resolve the path relative to the root of your project directory. If a matching file or directory is not found, it will attempt to resolve the path relative to the contentDir. A leading path separator (/) is optional.\n{{ $f := os.Stat \"README.md\" }} {{ $f.IsDir }} → false (bool) {{ $f.ModTime }} → 2021-11-25 10:06:49.315429236 -0800 PST (time.Time) {{ $f.Name }} → README.md (string) {{ $f.Size }} → 241 (int64) {{ $d := os.Stat \"content\" }} {{ $d.IsDir }} → true (bool) Details of the FileInfo structure are available in the Go documentation.\n"},{"date":"0001-01-01","uri":"/methods/page/outputformats/","title":"OutputFormats","content":"Hugo generates one or more files per page when building a site. For example, when rendering home, section, taxonomy, and term pages, Hugo generates an HTML file and an RSS file. Both HTML and RSS are built-in output formats. Create multiple output formats, and control generation based on page kind, or by enabling one or more output formats for one or more pages. See details.\nThe OutputFormats method on a Page object returns a slice of OutputFormat objects, each representing one of the output formats enabled for the given page. See details.\nMethods Get IDENTIFIER (any) Returns the OutputFormat object with the given identifier. MediaType (media.Type) Returns the media type of the output format. MediaType.MainType (string) Returns the main type of the output format’s media type. MediaType.SubType (string) Returns the subtype of the current format’s media type. Name (string) Returns the output identifier of the output format. Permalink (string) Returns the permalink of the page generated by the current output format. Rel (string) Returns the rel value of the output format, either the default or as defined in the site configuration. RelPermalink (string) Returns the relative permalink of the page generated by the current output format. Example To link to the RSS feed for the current page:\n{{ with .OutputFormats.Get \"rss\" -}} \u003ca href=\"{{ .RelPermalink }}\"\u003eRSS Feed\u003c/a\u003e {{ end }} On the site’s home page, Hugo renders this to:\n\u003ca href=\"/index.xml\"\u003eRSS Feed\u003c/a\u003e Please see the link to output formats section to understand the importance of the construct above.\n"},{"date":"0001-01-01","uri":"/showcase/overmindstudios/","title":"Overmind Studios","content":"After many years of running our site on WordPress, we decided to switch to Hugo.\nWordPress is a great CMS for many people, but it has some downsides, especially for those who need a fast, secure, and customizable site. Plugins can become outdated, customization can be difficult, and bloat can slow down page loading times.\nHugo is a static site generator that addresses many of these problems. It is fast to build and iterate, does not require PHP, is highly customizable, and is easy to learn and use. It is also secure, as it does not have a backend or MySQL database that can be hacked.\nWe are very happy with our switch to Hugo. It is easy to update our site with new projects, and our Lighthouse score and loading times are both excellent. We now have more time to be creative instead of troubleshooting WordPress quirks and updates.\n"},{"date":"0001-01-01","uri":"/functions/global/page/","title":"page","content":"\rNew in v0.111.0\rAt the top level of a template that receives a Page object in context, these are equivalent:\n{{ .Params.foo }} {{ .Page.Params.foo }} {{ page.Params.foo }} When a Page object is not in context, you can use the global page function:\n{{ page.Params.foo }} Do not use the global page function in shortcodes, partials called by shortcodes, or cached partials. See warnings below.\nExplanation Hugo almost always passes a Page as the data context into the top level template (e.g., single.html). The one exception is the multihost sitemap template. This means that you can access the current page with the . variable in the template.\nBut when you are deeply nested inside of a content view, partial, or render hook, it is not always practical or possible to access the Page object.\nUse the global page function to access the Page object from anywhere in any template.\nWarnings Be aware of top-level context The global page function accesses the Page object passed into the top-level template.\nWith this content structure:\ncontent/ ├── posts/ │ ├── post-1.md │ ├── post-2.md │ └── post-3.md └── _index.md \u003c-- title is \"My Home Page\" And this code in the home page template:\n{{ range site.Sections }} {{ range .Pages }} {{ page.Title }} {{ end }} {{ end }} The rendered output will be:\nMy Home Page My Home Page My Home Page In the example above, the global page function accesses the Page object passed into the home page template; it does not access the Page object of the iterated pages.\nBe aware of caching Do not use the global page function in:\nShortcodes Partials called by shortcodes Partials cached by the partialCached function Hugo caches rendered shortcodes. If you use the global page function within a shortcode, and the page content is rendered in two or more templates, the cached shortcode may be incorrect.\nConsider this section template:\n{{ range .Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ .Summary }} {{ end }} When you call the Summary method, Hugo renders the page content including shortcodes. In this case, within a shortcode, the global page function accesses the Page object of the section page, not the content page.\nIf Hugo renders the section page before a content page, the cached rendered shortcode will be incorrect. You cannot control the rendering sequence due to concurrency.\n"},{"date":"0001-01-01","uri":"/methods/menu-entry/page/","title":"Page","content":"Regardless of how you define menu entries, an entry associated with a page has access to its methods.\nIn this menu definition, the first two entries are associated with a page, the last entry is not:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - pageRef: /about weight: 10 - pageRef: /contact weight: 20 - name: Hugo url: https://gohugo.io weight: 30 [menus] [[menus.main]] pageRef = '/about' weight = 10 [[menus.main]] pageRef = '/contact' weight = 20 [[menus.main]] name = 'Hugo' url = 'https://gohugo.io' weight = 30 { \"menus\": { \"main\": [ { \"pageRef\": \"/about\", \"weight\": 10 }, { \"pageRef\": \"/contact\", \"weight\": 20 }, { \"name\": \"Hugo\", \"url\": \"https://gohugo.io\", \"weight\": 30 } ] } } In this example, if the menu entry is associated with a page, we use page’s RelPermalink and LinkTitle when rendering the anchor element.\nIf the entry is not associated with a page, we use its url and name properties.\n\u003cul\u003e {{ range .Site.Menus.main }} {{ with .Page }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ else }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} {{ end }} \u003c/ul\u003e See the menu templates section for more information.\n"},{"date":"0001-01-01","uri":"/methods/page/page/","title":"Page","content":"This is a convenience method, useful within partial templates that are called from both shortcodes and page templates.\nlayouts/shortcodes/foo.html\r{{ partial \"my-partial.html\" . }}\rWhen the shortcode calls the partial, it passes the current context (the dot). The context includes identifiers such as Page, Params, Inner, and Name.\nlayouts/_default/single.html\r{{ partial \"my-partial.html\" . }}\rWhen the page template calls the partial, it also passes the current context (the dot). But in this case, the dot is the Page object.\nlayouts/partials/my-partial.html\rThe page title is: {{ .Page.Title }}\rTo handle both scenarios, the partial template must be able to access the Page object with Page.Page.\nAnd yes, that means you can do .Page.Page.Page.Page.Title too.\nBut don’t.\n"},{"date":"0001-01-01","uri":"/methods/shortcode/page/","title":"Page","content":"With this content:\ncontent/books/les-miserables.md\ryaml\r \rtoml\r \rjson\r \r--- author: Victor Hugo isbn: 978-0451419439 publication_year: 1862 title: Les Misérables ---\r+++ author = 'Victor Hugo' isbn = '978-0451419439' publication_year = 1862 title = 'Les Misérables' +++\r{ \"author\": \"Victor Hugo\", \"isbn\": \"978-0451419439\", \"publication_year\": 1862, \"title\": \"Les Misérables\" } Calling this shortcode:\n{{\u003c book-details \u003e}} We can access the front matter values using the Page method:\nlayouts/shortcodes/book-details.html\r\u003cul\u003e \u003cli\u003eTitle: {{ .Page.Title }}\u003c/li\u003e \u003cli\u003eAuthor: {{ .Page.Params.author }}\u003c/li\u003e \u003cli\u003ePublished: {{ .Page.Params.publication_year }}\u003c/li\u003e \u003cli\u003eISBN: {{ .Page.Params.isbn }}\u003c/li\u003e \u003c/ul\u003e\r"},{"date":"0001-01-01","uri":"/methods/page/pages/","title":"Pages","content":"The Pages method on a Page object is available to these page kinds: home, section, taxonomy, and term. The templates for these page kinds receive a page collection in context.\nRange through the page collection in your template:\n{{ range .Pages.ByTitle }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} Consider this content structure:\ncontent/ ├── lessons/ │ ├── lesson-1/ │ │ ├── _index.md │ │ ├── part-1.md │ │ └── part-2.md │ ├── lesson-2/ │ │ ├── resources/ │ │ │ ├── task-list.md │ │ │ └── worksheet.md │ │ ├── _index.md │ │ ├── part-1.md │ │ └── part-2.md │ ├── _index.md │ ├── grading-policy.md │ └── lesson-plan.md ├── _index.md ├── contact.md └── legal.md When rendering the home page, the Pages method returns:\ncontact.md\rlegal.md\rlessons/_index.md\rWhen rendering the lessons page, the Pages method returns:\nlessons/grading-policy.md\rlessons/lesson-plan.md\rlessons/lesson-1/_index.md\rlessons/lesson-2/_index.md\rWhen rendering lesson-1, the Pages method returns:\nlessons/lesson-1/part-1.md\rlessons/lesson-1/part-2.md\rWhen rendering lesson-2, the Pages method returns:\nlessons/lesson-2/part-1.md\rlessons/lesson-2/part-2.md\rlessons/lesson-2/resources/task-list.md\rlessons/lesson-2/resources/worksheet.md\rIn the last example, the collection includes pages in the resources subdirectory. That directory is not a section—it does not contain an _index.md file. Its contents are part of the lesson-2 section.\nWhen used with a Site object, the Pages method recursively returns all pages within the site. See details.\n{{ range .Site.Pages.ByTitle }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/site/pages/","title":"Pages","content":"This method returns all page kinds in the current language. That includes the home page, section pages, taxonomy pages, term pages, and regular pages.\nIn most cases you should use the RegularPages method instead.\n{{ range .Site.Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/page/paginate/","title":"Paginate","content":"Pagination is the process of splitting a list page into two or more pagers, where each pager contains a subset of the page collection and navigation links to other pagers.\nBy default, the number of elements on each pager is determined by the value of the paginate setting in your site configuration. The default value is 10. Override the value in your site configuration by providing a second argument, an integer, when calling the Paginate method.\nThere is also a Paginator method on Page objects, but it can neither filter nor sort the page collection.\nThe Paginate method is more flexible.\nYou can invoke pagination on the home page template, section templates, taxonomy templates, and term templates.\nlayouts/_default/list.html\r{{ $pages := where .Site.RegularPages \"Section\" \"articles\" }} {{ $pages = $pages.ByTitle }} {{ range (.Paginate $pages 7).Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{ template \"_internal/pagination.html\" . }}\rIn the example above, we:\nBuild a page collection Sort the collection by title Paginate the collection, with 7 elements per pager Range over the paginated page collection, rendering a link to each page Call the internal “pagination” template to create the navigation links between pagers. Please note that the results of pagination are cached. Once you have invoked either the Paginator or Paginate method, the paginated collection is immutable. Additional invocations of these methods will have no effect.\n"},{"date":"0001-01-01","uri":"/methods/page/paginator/","title":"Paginator","content":"Pagination is the process of splitting a list page into two or more pagers, where each pager contains a subset of the page collection and navigation links to other pagers. The number of elements on each pager is determined by the value of the paginate setting in your site configuration. The default value is 10.\nYou can invoke pagination on the home page template, section templates, taxonomy templates, and term templates. Each of these receive a collection of regular pages in context. When you invoke the Paginator method, it paginates the page collection received in context.\nlayouts/_default/list.html\r{{ range .Paginator.Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{ template \"_internal/pagination.html\" . }}\rIn the example above, the internal “pagination” template creates the navigation links between pagers.\nAlthough simple to invoke, with the Paginator method you can neither filter nor sort the page collection. It acts upon the page collection received in context.\nThe Paginate method is more flexible, and strongly recommended.\nPlease note that the results of pagination are cached. Once you have invoked either the Paginator or Paginate method, the paginated collection is immutable. Additional invocations of these methods will have no effect.\n"},{"date":"0001-01-01","uri":"/methods/page/param/","title":"Param","content":"The Param method on a Page object looks for the given KEY in page parameters, and returns the corresponding value. If it cannot find the KEY in page parameters, it looks for the KEY in site parameters. If it cannot find the KEY in either location, the Param method returns nil.\nSite and theme developers commonly set parameters at the site level, allowing content authors to override those parameters at the page level.\nFor example, to show a table of contents on every page, but allow authors to hide the table of contents as needed:\nConfiguration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: display_toc: true [params] display_toc = true { \"params\": { \"display_toc\": true } } Content:\ncontent/example.md\ryaml\r \rtoml\r \rjson\r \r--- date: \"2023-01-01\" display_toc: false draft: false title: Example ---\r+++ date = 2023-01-01 display_toc = false draft = false title = 'Example' +++\r{ \"date\": \"2023-01-01\", \"display_toc\": false, \"draft\": false, \"title\": \"Example\" } Template:\n{{ if .Param \"display_toc\" }} {{ .TableOfContents }} {{ end }} The Param method returns the value associated with the given KEY, regardless of whether the value is truthy or falsy. If you need to ignore falsy values, use this construct instead:\n{{ or .Params.foo site.Params.foo }} "},{"date":"0001-01-01","uri":"/methods/site/param/","title":"Param","content":"The Param method on a Site object is a convenience method to return the value of a user-defined parameter in the site configuration.\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: display_toc: true [params] display_toc = true { \"params\": { \"display_toc\": true } } {{ .Site.Param \"display_toc\" }} → true The above is equivalent to either of these:\n{{ .Site.Params.display_toc }} {{ index .Site.Params \"display_toc\" }} "},{"date":"0001-01-01","uri":"/methods/menu-entry/params/","title":"Params","content":"When you define menu entries in site configuration or in front matter, you can include a params key to attach additional information to the entry. For example:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: About pageRef: /about weight: 10 - name: Contact pageRef: /contact weight: 20 - name: Hugo params: rel: external url: https://gohugo.io weight: 30 [menus] [[menus.main]] name = 'About' pageRef = '/about' weight = 10 [[menus.main]] name = 'Contact' pageRef = '/contact' weight = 20 [[menus.main]] name = 'Hugo' url = 'https://gohugo.io' weight = 30 [menus.main.params] rel = 'external' { \"menus\": { \"main\": [ { \"name\": \"About\", \"pageRef\": \"/about\", \"weight\": 10 }, { \"name\": \"Contact\", \"pageRef\": \"/contact\", \"weight\": 20 }, { \"name\": \"Hugo\", \"params\": { \"rel\": \"external\" }, \"url\": \"https://gohugo.io\", \"weight\": 30 } ] } } With this template:\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e \u003ca href=\"{{ .URL }}\" {{ with .Params.rel }}rel=\"{{ . }}\"{{ end }}\u003e {{ .Name }} \u003c/a\u003e \u003c/li\u003e {{ end }} \u003c/ul\u003e Hugo renders:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/about/\"\u003eAbout\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/contact/\"\u003eContact\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://gohugo.io\" rel=\"external\"\u003eHugo\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e See the menu templates section for more information.\n"},{"date":"0001-01-01","uri":"/methods/page/params/","title":"Params","content":"With this front matter:\ncontent/news/annual-conference.md.\ryaml\r \rtoml\r \rjson\r \rauthor: email: jsmith@example.org name: John Smith date: 2023-10-17T15:11:37-07:00 display_related: true title: Annual conference date = 2023-10-17T15:11:37-07:00 display_related = true title = 'Annual conference' [author] email = 'jsmith@example.org' name = 'John Smith' { \"author\": { \"email\": \"jsmith@example.org\", \"name\": \"John Smith\" }, \"date\": \"2023-10-17T15:11:37-07:00\", \"display_related\": true, \"title\": \"Annual conference\" } The title and date fields are standard parameters—the other fields are user-defined.\nAccess the custom parameters by chaining the identifiers:\n{{ .Params.display_related }} → true {{ .Params.author.name }} → John Smith In the template example above, each of the keys is a valid identifier. For example, none of the keys contains a hyphen. To access a key that is not a valid identifier, use the index function:\n{{ index .Params \"key-with-hyphens\" }} → 2023 "},{"date":"0001-01-01","uri":"/methods/resource/params/","title":"Params","content":"Use the Params method with page resources. It is not applicable to either global or remote resources.\nWith this content structure:\ncontent/ ├── posts/ │ ├── cats/ │ │ ├── images/ │ │ │ └── a.jpg │ │ └── index.md │ └── _index.md └── _index.md And this front matter:\ncontent/posts/cats.md\ryaml\r \rtoml\r \rjson\r \r--- resources: - params: alt: Photograph of black cat temperament: vicious src: images/a.jpg title: Felix the cat title: Cats ---\r+++ title = 'Cats' [[resources]] src = 'images/a.jpg' title = 'Felix the cat' [resources.params] alt = 'Photograph of black cat' temperament = 'vicious' +++\r{ \"resources\": [ { \"params\": { \"alt\": \"Photograph of black cat\", \"temperament\": \"vicious\" }, \"src\": \"images/a.jpg\", \"title\": \"Felix the cat\" } ], \"title\": \"Cats\" } And this template:\n{{ with .Resources.Get \"images/a.jpg\" }} \u003cfigure\u003e \u003cimg alt=\"{{ .Params.alt }}\" src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\"\u003e \u003cfigcaption\u003e{{ .Title }} is {{ .Params.temperament }}\u003c/figcaption\u003e \u003c/figure\u003e {{ end }} Hugo renders:\n\u003cfigure\u003e \u003cimg alt=\"Photograph of black cat\" src=\"/posts/post-1/images/a.jpg\" width=\"600\" height=\"400\"\u003e \u003cfigcaption\u003eFelix the cat is vicious\u003c/figcaption\u003e \u003c/figure\u003e See the page resources section for more information.\n"},{"date":"0001-01-01","uri":"/methods/shortcode/params/","title":"Params","content":"When you call a shortcode using positional parameters, the Params method returns a slice.\ncontent/about.md\r{{\u003c myshortcode \"Hello\" \"world\" \u003e}}\rlayouts/shortcodes/myshortcode.html\r{{ index .Params 0 }} → Hello {{ index .Params 1 }} → world\rWhen you call a shortcode using named parameters, the Params method returns a map.\ncontent/about.md\r{{\u003c myshortcode greeting=\"Hello\" name=\"world\" \u003e}}\rlayouts/shortcodes/myshortcode.html\r{{ .Params.greeting }} → Hello {{ .Params.name }} → world\r"},{"date":"0001-01-01","uri":"/methods/site/params/","title":"Params","content":"With this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: author: email: jsmith@example.org name: John Smith copyright-year: \"2023\" layouts: rfc_1123: Mon, 02 Jan 2006 15:04:05 MST rfc_3339: \"2006-01-02T15:04:05-07:00\" subtitle: The Best Widgets on Earth [params] copyright-year = '2023' subtitle = 'The Best Widgets on Earth' [params.author] email = 'jsmith@example.org' name = 'John Smith' [params.layouts] rfc_1123 = 'Mon, 02 Jan 2006 15:04:05 MST' rfc_3339 = '2006-01-02T15:04:05-07:00' { \"params\": { \"author\": { \"email\": \"jsmith@example.org\", \"name\": \"John Smith\" }, \"copyright-year\": \"2023\", \"layouts\": { \"rfc_1123\": \"Mon, 02 Jan 2006 15:04:05 MST\", \"rfc_3339\": \"2006-01-02T15:04:05-07:00\" }, \"subtitle\": \"The Best Widgets on Earth\" } } Access the custom parameters by chaining the identifiers:\n{{ .Site.Params.subtitle }} → The Best Widgets on Earth {{ .Site.Params.author.name }} → John Smith {{ $layout := .Site.Params.layouts.rfc_1123 }} {{ .Site.LastChange.Format $layout }} → Tue, 17 Oct 2023 13:21:02 PDT In the template example above, each of the keys is a valid identifier. For example, none of the keys contains a hyphen. To access a key that is not a valid identifier, use the index function:\n{{ index .Site.Params \"copyright-year\" }} → 2023 "},{"date":"0001-01-01","uri":"/methods/menu-entry/parent/","title":"Parent","content":"With this menu definition:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: Products pageRef: /product weight: 10 - name: Product 1 pageRef: /products/product-1 parent: Products weight: 1 - name: Product 2 pageRef: /products/product-2 parent: Products weight: 2 [menus] [[menus.main]] name = 'Products' pageRef = '/product' weight = 10 [[menus.main]] name = 'Product 1' pageRef = '/products/product-1' parent = 'Products' weight = 1 [[menus.main]] name = 'Product 2' pageRef = '/products/product-2' parent = 'Products' weight = 2 { \"menus\": { \"main\": [ { \"name\": \"Products\", \"pageRef\": \"/product\", \"weight\": 10 }, { \"name\": \"Product 1\", \"pageRef\": \"/products/product-1\", \"parent\": \"Products\", \"weight\": 1 }, { \"name\": \"Product 2\", \"pageRef\": \"/products/product-2\", \"parent\": \"Products\", \"weight\": 2 } ] } } This template renders the nested menu, listing the parent property next each of the child entries:\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e \u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ if .HasChildren }} \u003cul\u003e {{ range .Children }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e ({{ .Parent }})\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} \u003c/li\u003e {{ end }} \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/parent/","title":"Parent","content":"A section is a top-level content directory, or any content directory with an _index.md file.\nThe parent section of a regular page is the current section.\nConsider this content structure:\ncontent/ ├── auctions/ │ ├── 2023-11/ │ │ ├── _index.md \u003c-- parent: auctions │ │ ├── auction-1.md │ │ └── auction-2.md \u003c-- parent: 2023-11 │ ├── 2023-12/ │ │ ├── _index.md │ │ ├── auction-3.md │ │ └── auction-4.md │ ├── _index.md \u003c-- parent: home │ ├── bidding.md │ └── payment.md \u003c-- parent: auctions ├── books/ │ ├── _index.md \u003c-- parent: home │ ├── book-1.md │ └── book-2.md \u003c-- parent: books ├── films/ │ ├── _index.md \u003c-- parent: home │ ├── film-1.md │ └── film-2.md \u003c-- parent: films └── _index.md \u003c-- parent: nil In the example above, note the parent section of the home page is nil. Code defensively by verifying existence of the parent section before calling methods on its Page object. To create a link to the parent section page of the current page:\n{{ with .Parent }} \u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/shortcode/parent/","title":"Parent","content":"This is useful for inheritance of common shortcode parameters from the root.\nIn this contrived example, the “greeting” shortcode is the parent, and the “now” shortcode is child.\ncontent/welcome.md\r{{\u003c greeting dateFormat=\"Jan 2, 2006\" \u003e}} Welcome. Today is {{\u003c now \u003e}}. {{\u003c /greeting \u003e}}\rlayouts/shortcodes/greeting.html\r\u003cdiv class=\"greeting\"\u003e {{ trim .Inner \"\\r\\n\" | .Page.RenderString }} \u003c/div\u003e\rlayouts/shortcodes/now.html\r{{- $dateFormat := \"January 2, 2006 15:04:05\" }} {{- with .Params }} {{- with .dateFormat }} {{- $dateFormat = . }} {{- end }} {{- else }} {{- with .Parent.Params }} {{- with .dateFormat }} {{- $dateFormat = . }} {{- end }} {{- end }} {{- end }} {{- now | time.Format $dateFormat -}}\rThe “now” shortcode formats the current time using:\nThe dateFormat parameter passed to the “now” shortcode, if present The dateFormat parameter passed to the “greeting” shortcode, if present The default layout string defined at the top of the shortcode "},{"date":"0001-01-01","uri":"/functions/partials/include/","title":"partials.Include","content":"Without a return statement, the partial function returns a string of type template.HTML. With a return statement, the partial function can return any data type.\nIn this example we have three partial templates:\nlayouts/ └── partials/ ├── average.html ├── breadcrumbs.html └── footer.html The “average” partial returns the average of one or more numbers. We pass the numbers in context:\n{{ $numbers := slice 1 6 7 42 }} {{ $average := partial \"average.html\" $numbers }} The “breadcrumbs” partial renders breadcrumb navigation, and needs to receive the current page in context:\n{{ partial \"breadcrumbs.html\" . }} The “footer” partial renders the site footer. In this contrived example, the footer does not need access to the current page, so we can omit context:\n{{ partial \"breadcrumbs.html\" }} You can pass anything in context: a page, a page collection, a scalar value, a slice, or a map. For example:\n{{ $student := dict \"name\" \"John Doe\" \"major\" \"Finance\" \"gpa\" 4.0 }} {{ partial \"render-student-info.html\" $student }} Then, within the partial template:\n\u003cp\u003e{{ .name }} is majoring in {{ .major }}. Their grade point average is {{ .gpa }}.\u003c/p\u003e To return a value from a partial template, it must contain only one return statement, placed at the end of the template:\n{{ $result := \"\" }} {{ if math.ModBool . 2 }} {{ $result = \"even\" }} {{ else }} {{ $result = \"odd\" }} {{ end }} {{ return $result }} See details.\n"},{"date":"0001-01-01","uri":"/functions/partials/includecached/","title":"partials.IncludeCached","content":"Without a return statement, the partialCached function returns a string of type template.HTML. With a return statement, the partialCached function can return any data type.\nThe partialCached function can offer significant performance gains for complex templates that don’t need to be re-rendered on every invocation.\nEach Site (or language) has its own partialCached cache, so each site will execute a partial once.\nHugo renders pages in parallel, and will render the partial more than once with concurrent calls to the partialCached function. After Hugo caches the rendered partial, new pages entering the build pipeline will use the cached result.\nHere is the simplest usage:\n{{ partialCached \"footer.html\" . }} Pass additional arguments to partialCached to create variants of the cached partial. For example, if you have a complex partial that should be identical when rendered for pages within the same section, use a variant based on section so that the partial is only rendered once per section:\npartial-cached-example.html\r{{ partialCached \"footer.html\" . .Section }}\rPass additional arguments, of any data type, as needed to create unique variants:\n{{ partialCached \"footer.html\" . .Params.country .Params.province }} The variant arguments are not available to the underlying partial template; they are only used to create unique cache keys.\nTo return a value from a partial template, it must contain only one return statement, placed at the end of the template:\n{{ $result := \"\" }} {{ if math.ModBool . 2 }} {{ $result = \"even\" }} {{ else }} {{ $result = \"odd\" }} {{ end }} {{ return $result }} See details.\n"},{"date":"0001-01-01","uri":"/functions/path/base/","title":"path.Base","content":"{{ path.Base \"a/news.html\" }} → news.html {{ path.Base \"news.html\" }} → news.html {{ path.Base \"a/b/c\" }} → c {{ path.Base \"/x/y/z/\" }} → z {{ path.Base \"\" }} → . "},{"date":"0001-01-01","uri":"/functions/path/basename/","title":"path.BaseName","content":"\rNew in v0.101.0\r{{ path.BaseName \"a/news.html\" }} → news {{ path.BaseName \"news.html\" }} → news {{ path.BaseName \"a/b/c\" }} → c {{ path.BaseName \"/x/y/z/\" }} → z {{ path.BaseName \"\" }} → . "},{"date":"0001-01-01","uri":"/functions/path/clean/","title":"path.Clean","content":"See Go’s path.Clean documentation for details.\n{{ path.Clean \"foo/bar\" }} → foo/bar {{ path.Clean \"/foo/bar\" }} → /foo/bar {{ path.Clean \"/foo/bar/\" }} → /foo/bar {{ path.Clean \"/foo//bar/\" }} → /foo/bar {{ path.Clean \"/foo/./bar/\" }} → /foo/bar {{ path.Clean \"/foo/../bar/\" }} → /bar {{ path.Clean \"/../foo/../bar/\" }} → /bar {{ path.Clean \"\" }} → . "},{"date":"0001-01-01","uri":"/functions/path/dir/","title":"path.Dir","content":"{{ path.Dir \"a/news.html\" }} → a {{ path.Dir \"news.html\" }} → . {{ path.Dir \"a/b/c\" }} → a/b {{ path.Dir \"/a/b/c\" }} → /a/b {{ path.Dir \"/a/b/c/\" }} → /a/b/c {{ path.Dir \"\" }} → . "},{"date":"0001-01-01","uri":"/functions/path/ext/","title":"path.Ext","content":"The extension is the suffix beginning at the final dot in the final slash-separated element of path; it is empty if there is no dot.\n{{ path.Ext \"a/b/c/news.html\" }} → .html "},{"date":"0001-01-01","uri":"/functions/path/join/","title":"path.Join","content":"See Go’s path.Join and path.Clean documentation for details.\n{{ path.Join \"partial\" \"news.html\" }} → partial/news.html {{ path.Join \"partial/\" \"news.html\" }} → partial/news.html {{ path.Join \"foo/bar\" \"baz\" }} → foo/bar/baz {{ path.Join \"foo\" \"bar\" \"baz\" }} → foo/bar/baz {{ path.Join \"foo\" \"\" \"baz\" }} → foo/baz {{ path.Join \"foo\" \".\" \"baz\" }} → foo/baz {{ path.Join \"foo\" \"..\" \"baz\" }} → baz {{ path.Join \"/..\" \"foo\" \"..\" \"baz\" }} → baz "},{"date":"0001-01-01","uri":"/functions/path/split/","title":"path.Split","content":"If there is no slash in the given path, path.Split returns an empty directory, and file set to path. The returned values have the property that path = dir+file.\n{{ $dirFile := path.Split \"a/news.html\" }} {{ $dirFile.Dir }} → a/ {{ $dirFile.File }} → news.html {{ $dirFile := path.Split \"news.html\" }} {{ $dirFile.Dir }} → \"\" (empty string) {{ $dirFile.File }} → news.html {{ $dirFile := path.Split \"a/b/c\" }} {{ $dirFile.Dir }} → a/b/ {{ $dirFile.File }} → c "},{"date":"0001-01-01","uri":"/methods/page/permalink/","title":"Permalink","content":"Site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rbaseURL: https://example.org/docs/ title: Documentation baseURL = 'https://example.org/docs/' title = 'Documentation' { \"baseURL\": \"https://example.org/docs/\", \"title\": \"Documentation\" } Template:\n{{ $page := .Site.GetPage \"/about\" }} {{ $page.Permalink }} → https://example.org/docs/about/ "},{"date":"0001-01-01","uri":"/methods/resource/permalink/","title":"Permalink","content":"The Permalink method on a Resource object writes the resource to the publish directory, typically public, and returns its permalink.\n{{ with resources.Get \"images/a.jpg\" }} {{ .Permalink }} → https://example.org/images/a.jpg {{ end }} Use this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/methods/page/plain/","title":"Plain","content":"The Plain method on a Page object renders markdown and shortcodes to HTML, then strips the HTML tags. It does not strip HTML entities. The plain content does not include front matter.\nTo prevent Go’s html/template package from escaping HTML entities, pass the result through the htmlUnescape function.\n{{ .Plain | htmlUnescape }} "},{"date":"0001-01-01","uri":"/methods/page/plainwords/","title":"PlainWords","content":"The PlainWords method on a Page object calls the Plain method, then uses Go’s strings.Fields function to split the result into words.\nFields splits the string s around each instance of one or more consecutive white space characters, as defined by unicode.IsSpace, returning a slice of substrings of s or an empty slice if s contains only white space.\nAs a result, elements within the slice may contain leading or trailing punctuation.\n{{ .PlainWords }} To determine the approximate number of unique words on a page:\n{{ .PlainWords | uniq }} → 42 "},{"date":"0001-01-01","uri":"/methods/shortcode/position/","title":"Position","content":"The Position method is useful for error reporting. For example, if your shortcode requires a “greeting” parameter:\nlayouts/shortcodes/myshortcode.html\r{{ $greeting := \"\" }} {{ with .Get \"greeting\" }} {{ $greeting = . }} {{ else }} {{ errorf \"The %q shortcode requires a 'greeting' parameter. See %s\" .Name .Position }} {{ end }}\rIn the absence of a “greeting” parameter, Hugo will throw an error message and fail the build:\nERROR The \"myshortcode\" shortcode requires a 'greeting' parameter. See \"/home/user/project/content/about.md:11:1\" The position can be expensive to calculate. Limit its use to error reporting.\n"},{"date":"0001-01-01","uri":"/methods/menu-entry/post/","title":"Post","content":"In this site configuration we enable rendering of emoji shortcodes, and add emoji shortcodes before (pre) and after (post) each menu entry:\nhugo.\ryaml\r \rtoml\r \rjson\r \renableEmoji: true menus: main: - name: About pageRef: /about post: ':point_left:' pre: ':point_right:' weight: 10 - name: Contact pageRef: /contact post: ':arrow_left:' pre: ':arrow_right:' weight: 20 enableEmoji = true [menus] [[menus.main]] name = 'About' pageRef = '/about' post = ':point_left:' pre = ':point_right:' weight = 10 [[menus.main]] name = 'Contact' pageRef = '/contact' post = ':arrow_left:' pre = ':arrow_right:' weight = 20 { \"enableEmoji\": true, \"menus\": { \"main\": [ { \"name\": \"About\", \"pageRef\": \"/about\", \"post\": \":point_left:\", \"pre\": \":point_right:\", \"weight\": 10 }, { \"name\": \"Contact\", \"pageRef\": \"/contact\", \"post\": \":arrow_left:\", \"pre\": \":arrow_right:\", \"weight\": 20 } ] } } To render the menu:\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e {{ .Pre | markdownify }} \u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ .Post | markdownify }} \u003c/li\u003e {{ end }} \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/menu-entry/pre/","title":"Pre","content":"In this site configuration we enable rendering of emoji shortcodes, and add emoji shortcodes before (pre) and after (post) each menu entry:\nhugo.\ryaml\r \rtoml\r \rjson\r \renableEmoji: true menus: main: - name: About pageRef: /about post: ':point_left:' pre: ':point_right:' weight: 10 - name: Contact pageRef: /contact post: ':arrow_left:' pre: ':arrow_right:' weight: 20 enableEmoji = true [menus] [[menus.main]] name = 'About' pageRef = '/about' post = ':point_left:' pre = ':point_right:' weight = 10 [[menus.main]] name = 'Contact' pageRef = '/contact' post = ':arrow_left:' pre = ':arrow_right:' weight = 20 { \"enableEmoji\": true, \"menus\": { \"main\": [ { \"name\": \"About\", \"pageRef\": \"/about\", \"post\": \":point_left:\", \"pre\": \":point_right:\", \"weight\": 10 }, { \"name\": \"Contact\", \"pageRef\": \"/contact\", \"post\": \":arrow_left:\", \"pre\": \":arrow_right:\", \"weight\": 20 } ] } } To render the menu:\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e {{ .Pre | markdownify }} \u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ .Post | markdownify }} \u003c/li\u003e {{ end }} \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/prev/","title":"Prev","content":"The behavior of the Prev and Next methods on a Page object is probably the reverse of what you expect.\nWith this content structure:\ncontent/ ├── pages/ │ ├── _index.md │ ├── page-1.md \u003c-- front matter: weight = 10 │ ├── page-2.md \u003c-- front matter: weight = 20 │ └── page-3.md \u003c-- front matter: weight = 30 └── _index.md When you visit page-2:\nThe Prev method points to page-3 The Next method points to page-1 Use the opposite label in your navigation links as shown in the example below.\n{{ with .Next }} \u003ca href=\"{{ .RelPermalink }}\"\u003ePrev\u003c/a\u003e {{ end }} {{ with .Prev }} \u003ca href=\"{{ .RelPermalink }}\"\u003eNext\u003c/a\u003e {{ end }} Compare to Pages methods The Next and Prev methods on a Pages object are more flexible than the Next and Prev methods on a Page object.\nPage collection Custom sort order PAGES.Next and PAGES.Prev locally defined ✔️ PAGE.Next and PAGE.Prev globally defined ❌ locally defined Build the page collection every time you call PAGES.Next and PAGES.Prev. Navigation between pages is relative to the current page’s position within the local collection, independent of the global collection. With a local collection, the navigation sort order is the same as the collection sort order.\nglobally defined Build the page collection once, on a list page. Navigation between pages is relative to the current page’s position within the global collection. With a global collection, the navigation sort order is fixed, using Hugo’s default sort order. In order of precedence:\nPage weight Page date (descending) Page linkTitle, falling back to page title Page file path if the page is backed by a file For example, with a global collection sorted by title, the navigation sort order will use Hugo’s default sort order. This is probably not what you want or expect. For this reason, the Next and Prev methods on a Pages object are generally a better choice.\n"},{"date":"0001-01-01","uri":"/methods/pages/prev/","title":"Prev","content":"The behavior of the Prev and Next methods on a Pages objects is probably the reverse of what you expect.\nWith this content structure and the page collection sorted by weight in ascending order:\ncontent/ ├── pages/ │ ├── _index.md │ ├── page-1.md \u003c-- front matter: weight = 10 │ ├── page-2.md \u003c-- front matter: weight = 20 │ └── page-3.md \u003c-- front matter: weight = 30 └── _index.md When you visit page-2:\nThe Prev method points to page-3 The Next method points to page-1 Use the opposite label in your navigation links as shown in the example below.\n{{ $pages := where .Site.RegularPages.ByWeight \"Section\" \"pages\" }} {{ with $pages.Next . }} \u003ca href=\"{{ .RelPermalink }}\"\u003ePrevious\u003c/a\u003e {{ end }} {{ with $pages.Prev . }} \u003ca href=\"{{ .RelPermalink }}\"\u003eNext\u003c/a\u003e {{ end }} Compare to Page methods The Next and Prev methods on a Pages object are more flexible than the Next and Prev methods on a Page object.\nPage collection Custom sort order PAGES.Next and PAGES.Prev locally defined ✔️ PAGE.Next and PAGE.Prev globally defined ❌ locally defined Build the page collection every time you call PAGES.Next and PAGES.Prev. Navigation between pages is relative to the current page’s position within the local collection, independent of the global collection. With a local collection, the navigation sort order is the same as the collection sort order.\nglobally defined Build the page collection once, on a list page. Navigation between pages is relative to the current page’s position within the global collection. With a global collection, the navigation sort order is fixed, using Hugo’s default sort order. In order of precedence:\nPage weight Page date (descending) Page linkTitle, falling back to page title Page file path if the page is backed by a file For example, with a global collection sorted by title, the navigation sort order will use Hugo’s default sort order. This is probably not what you want or expect. For this reason, the Next and Prev methods on a Pages object are generally a better choice.\n"},{"date":"0001-01-01","uri":"/methods/page/previnsection/","title":"PrevInSection","content":"The behavior of the PrevInSection and NextInSection methods on a Page object is probably the reverse of what you expect.\nWith this content structure:\ncontent/ ├── books/ │ ├── _index.md │ ├── book-1.md │ ├── book-2.md │ └── book-3.md ├── films/ │ ├── _index.md │ ├── film-1.md │ ├── film-2.md │ └── film-3.md └── _index.md When you visit book-2:\nThe PrevInSection method points to book-3 The NextInSection method points to book-1 Use the opposite label in your navigation links as shown in the example below.\n{{ with .NextInSection }} \u003ca href=\"{{ .RelPermalink }}\"\u003ePrevious in section\u003c/a\u003e {{ end }} {{ with .PrevInSection }} \u003ca href=\"{{ .RelPermalink }}\"\u003eNext in section\u003c/a\u003e {{ end }} The navigation sort order may be different than the page collection sort order.\nWith the PrevInSection and NextInSection methods, the navigation sort order is fixed, using Hugo’s default sort order. In order of precedence:\nPage weight Page date (descending) Page linkTitle, falling back to page title Page file path if the page is backed by a file For example, with a page collection sorted by title, the navigation sort order will use Hugo’s default sort order. This is probably not what you want or expect. For this reason, the Next and Prev methods on a Pages object are generally a better choice.\n"},{"date":"0001-01-01","uri":"/methods/resource/process/","title":"Process","content":"Process an image with the given specification. The specification can contain an optional action, one of crop, fill, fit, or resize. This means that you can use this method instead of Crop, Fill, Fit, or Resize.\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Process \"crop 200x200\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} You can also use this method to apply simple transformations such as rotation and conversion:\n{{/* Rotate 90 degrees counter-clockwise. */}} {{ $image := $image.Process \"r90\" }} {{/* Convert to WebP. */}} {{ $image := $image.Process \"webp\" }} The Process method is also available as a filter, which is more effective if you need to apply multiple filters to an image. See images.Process.\nUse this method with global, page, or remote resources.\nProcess specification The process specification is a space-delimited, case-insensitive list of one or more of the following in any sequence:\naction Applicable to the Process method only. Specify zero or one of crop, fill, fit, or resize. If you specify an action you must also provide dimensions. dimensions Provide width or height when using the Resize method, else provide both width and height. See details. anchor Use with the Crop and Fill methods. Specify zero or one of TopLeft, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight, or Smart. Default is Smart. See details. rotation Typically specify zero or one of r90, r180, or r270. Also supports arbitrary rotation angles. See details. target format Specify zero or one of gif, jpeg, png, tiff, or webp. See details. quality Applicable to JPEG and WebP images. Optionally specify qN where N is an integer in the range [0, 100]. Default is 75. See details. hint Applicable to WebP images and equivalent to the -preset flag for the cwebp encoder. Specify zero or one of drawing, icon, photo, picture, or text. Default is photo. See details. background color When converting a PNG or WebP with transparency to a format that does not support transparency, optionally specify a background color using a 3-digit or a 6-digit hexadecimal color code. Default is #ffffff (white). See details. resampling filter Typically specify zero or one of Box, Lanczos, CatmullRom, MitchellNetravali, Linear, or NearestNeighbor. Other resampling filters are available. See details. Example {{ with resources.Get \"images/original.jpg\" }} {{ with .Process \"crop 200x200 topright webp q85 lanczos\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Original\nProcessed\n"},{"date":"0001-01-01","uri":"/methods/resource/publish/","title":"Publish","content":"The Publish method on a Resource object writes the resource to the publish directory, typically public.\n{{ with resources.Get \"images/a.jpg\" }} {{ .Publish }} {{ end }} The Permalink and RelPermalink methods also publish a resource. Publish is a convenience method for publishing without a return value. For example, this:\n{{ $resource.Publish }} Instead of this:\n{{ $noop := $resource.Permalink }} Use this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/methods/page/publishdate/","title":"PublishDate","content":"By default, Hugo excludes pages with future publish dates when building your site. To include future pages, use the --buildFuture command line flag.\nSet the publish date in front matter:\ncontent/news/article-1.md\ryaml\r \rtoml\r \rjson\r \r--- publishDate: 2023-10-19T00:40:04-07:00 title: Article 1 ---\r+++ publishDate = 2023-10-19T00:40:04-07:00 title = 'Article 1' +++\r{ \"publishDate\": \"2023-10-19T00:40:04-07:00\", \"title\": \"Article 1\" } The publish date is a time.Time value. Format and localize the value with the time.Format function, or use it with any of the time methods.\n{{ .PublishDate | time.Format \":date_medium\" }} → Oct 19, 2023 In the example above we explicitly set the publish date in front matter. With Hugo’s default configuration, the PublishDate method returns the front matter value. This behavior is configurable, allowing you to set fallback values if the publish date is not defined in front matter. See details.\n"},{"date":"0001-01-01","uri":"/functions/go-template/range/","title":"range","content":"In Go templates, the falsy values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. Everything else is truthy.\n{{ $s := slice \"foo\" \"bar\" \"baz\" }} {{ range $s }} {{ . }} → foo bar baz {{ end }} Use with the else statement:\n{{ $s := slice \"foo\" \"bar\" \"baz\" }} {{ range $s }} \u003cp\u003e{{ . }}\u003c/p\u003e {{ else }} \u003cp\u003eThe collection is empty\u003c/p\u003e {{ end }} Within a range block:\nUse the continue statement to stop the innermost iteration and continue to the next iteration Use the break statement to stop the innermost iteration and bypass all remaining iterations Understanding context At the top of a page template, the context (the dot) is a Page object. Within the range block, the context is bound to each successive element.\nWith this contrived example that uses the seq function to generate a slice of integers:\n{{ range seq 3 }} {{ .Title }} {{ end }} Hugo will throw an error:\ncan't evaluate field Title in type int\rThe error occurs because we are trying to use the .Title method on an integer instead of a Page object. Within the range block, if we want to render the page title, we need to get the context passed into the template.\nUse the $ to get the context passed into the template.\nThis template will render the page title three times:\n{{ range seq 3 }} {{ $.Title }} {{ end }} Gaining a thorough understanding of context is critical for anyone writing template code.\nArray or slice of scalars This template code:\n{{ $s := slice \"foo\" \"bar\" \"baz\" }} {{ range $s }} \u003cp\u003e{{ . }}\u003c/p\u003e {{ end }} Is rendered to:\n\u003cp\u003efoo\u003c/p\u003e \u003cp\u003ebar\u003c/p\u003e \u003cp\u003ebaz\u003c/p\u003e This template code:\n{{ $s := slice \"foo\" \"bar\" \"baz\" }} {{ range $v := $s }} \u003cp\u003e{{ $v }}\u003c/p\u003e {{ end }} Is rendered to:\n\u003cp\u003efoo\u003c/p\u003e \u003cp\u003ebar\u003c/p\u003e \u003cp\u003ebaz\u003c/p\u003e This template code:\n{{ $s := slice \"foo\" \"bar\" \"baz\" }} {{ range $k, $v := $s }} \u003cp\u003e{{ $k }}: {{ $v }}\u003c/p\u003e {{ end }} Is rendered to:\n\u003cp\u003e0: foo\u003c/p\u003e \u003cp\u003e1: bar\u003c/p\u003e \u003cp\u003e2: baz\u003c/p\u003e Array or slice of maps This template code:\n{{ $m := slice (dict \"name\" \"John\" \"age\" 30) (dict \"name\" \"Will\" \"age\" 28) (dict \"name\" \"Joey\" \"age\" 24) }} {{ range $m }} \u003cp\u003e{{ .name }} is {{ .age }}\u003c/p\u003e {{ end }} Is rendered to:\n\u003cp\u003eJohn is 30\u003c/p\u003e \u003cp\u003eWill is 28\u003c/p\u003e \u003cp\u003eJoey is 24\u003c/p\u003e Array or slice of pages This template code:\n{{ range where site.RegularPages \"Type\" \"articles\" }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} Is rendered to:\n\u003ch2\u003e\u003ca href=\"/articles/article-3/\"\u003eArticle 3\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/articles/article-2/\"\u003eArticle 2\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/articles/article-1/\"\u003eArticle 1\u003c/a\u003e\u003c/h2\u003e Maps This template code:\n{{ $m := dict \"name\" \"John\" \"age\" 30 }} {{ range $k, $v := $m }} \u003cp\u003ekey = {{ $k }} value = {{ $v }}\u003c/p\u003e {{ end }} Is rendered to:\n\u003cp\u003ekey = age value = 30\u003c/p\u003e \u003cp\u003ekey = name value = John\u003c/p\u003e Unlike ranging over an array or slice, Hugo sorts by key when ranging over a map.\nSee Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/methods/page/rawcontent/","title":"RawContent","content":"The RawContent method on a Page object returns the raw content. The raw content does not include front matter.\n{{ .RawContent }} This is useful when rendering a page in a plain text output format.\nShortcodes within the content are not rendered. To get the raw content with shortcodes rendered, use the RenderShortcodes method on a Page object.\n"},{"date":"0001-01-01","uri":"/methods/page/readingtime/","title":"ReadingTime","content":"The estimated reading time is calculated by dividing the number of words in the content by the reading speed.\nBy default, Hugo assumes a reading speed of 212 words per minute. For CJK languages, it assumes 500 words per minute.\n{{ printf \"Estimated reading time: %d minutes\" .ReadingTime }} Reading speed varies by language. Create language-specific estimated reading times on your multilingual site using site parameters.\nhugo.\ryaml\r \rtoml\r \rjson\r \rlanguages: de: contentDir: content/de languageCode: de-DE languageName: Deutsch params: reading_speed: 179 weight: 2 en: contentDir: content/en languageCode: en-US languageName: English params: reading_speed: 228 weight: 1 [languages] [languages.de] contentDir = 'content/de' languageCode = 'de-DE' languageName = 'Deutsch' weight = 2 [languages.de.params] reading_speed = 179 [languages.en] contentDir = 'content/en' languageCode = 'en-US' languageName = 'English' weight = 1 [languages.en.params] reading_speed = 228 { \"languages\": { \"de\": { \"contentDir\": \"content/de\", \"languageCode\": \"de-DE\", \"languageName\": \"Deutsch\", \"params\": { \"reading_speed\": 179 }, \"weight\": 2 }, \"en\": { \"contentDir\": \"content/en\", \"languageCode\": \"en-US\", \"languageName\": \"English\", \"params\": { \"reading_speed\": 228 }, \"weight\": 1 } } } Then in your template:\n{{ $readingTime := div (float .WordCount) .Site.Params.reading_speed }} {{ $readingTime = math.Ceil $readingTime }} We cast the .WordCount to a float to obtain a float when we divide by the reading speed. Then round up to the nearest integer.\n"},{"date":"0001-01-01","uri":"/methods/page/ref/","title":"Ref","content":"The map of option contains:\npath (string) The path to the page, relative to the content directory. Required. lang (string) The language (site) to search for the page. Default is the current language. Optional. outputFormat (string) The output format to search for the page. Default is the current output format. Optional. The examples below show the rendered output when visiting a page on the English language version of the site:\n{{ $opts := dict \"path\" \"/books/book-1\" }} {{ .Ref $opts }} → https://example.org/en/books/book-1/ {{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }} {{ .Ref $opts }} → https://example.org/de/books/book-1/ {{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }} {{ .Ref $opts }} → https://example.org/de/books/book-1/index.json By default, Hugo will throw an error and fail the build if it cannot resolve the path. You can change this to a warning in your site configuration, and specify a URL to return when the path cannot be resolved.\nhugo.\ryaml\r \rtoml\r \rjson\r \rrefLinksErrorLevel: warning refLinksNotFoundURL: /some/other/url refLinksErrorLevel = 'warning' refLinksNotFoundURL = '/some/other/url' { \"refLinksErrorLevel\": \"warning\", \"refLinksNotFoundURL\": \"/some/other/url\" } "},{"date":"0001-01-01","uri":"/methods/shortcode/ref/","title":"Ref","content":"The map of option contains:\npath (string) The path to the page, relative to the content directory. Required. lang (string) The language (site) to search for the page. Default is the current language. Optional. outputFormat (string) The output format to search for the page. Default is the current output format. Optional. The examples below show the rendered output when visiting a page on the English language version of the site:\n{{ $opts := dict \"path\" \"/books/book-1\" }} {{ .Ref $opts }} → https://example.org/en/books/book-1/ {{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }} {{ .Ref $opts }} → https://example.org/de/books/book-1/ {{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }} {{ .Ref $opts }} → https://example.org/de/books/book-1/index.json By default, Hugo will throw an error and fail the build if it cannot resolve the path. You can change this to a warning in your site configuration, and specify a URL to return when the path cannot be resolved.\nhugo.\ryaml\r \rtoml\r \rjson\r \rrefLinksErrorLevel: warning refLinksNotFoundURL: /some/other/url refLinksErrorLevel = 'warning' refLinksNotFoundURL = '/some/other/url' { \"refLinksErrorLevel\": \"warning\", \"refLinksNotFoundURL\": \"/some/other/url\" } "},{"date":"0001-01-01","uri":"/functions/reflect/ismap/","title":"reflect.IsMap","content":"{{ reflect.IsMap (dict \"key\" \"value\") }} → true {{ reflect.IsMap \"yo\" }} → false "},{"date":"0001-01-01","uri":"/functions/reflect/isslice/","title":"reflect.IsSlice","content":"{{ reflect.IsSlice (slice 1 2 3) }} → true {{ reflect.IsSlice \"yo\" }} → false "},{"date":"0001-01-01","uri":"/methods/page/regularpages/","title":"RegularPages","content":"The RegularPages method on a Page object is available to these page kinds: home, section, taxonomy, and term. The templates for these page kinds receive a page collection in context.\nRange through the page collection in your template:\n{{ range .RegularPages.ByTitle }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} Consider this content structure:\ncontent/ ├── lessons/ │ ├── lesson-1/ │ │ ├── _index.md │ │ ├── part-1.md │ │ └── part-2.md │ ├── lesson-2/ │ │ ├── resources/ │ │ │ ├── task-list.md │ │ │ └── worksheet.md │ │ ├── _index.md │ │ ├── part-1.md │ │ └── part-2.md │ ├── _index.md │ ├── grading-policy.md │ └── lesson-plan.md ├── _index.md ├── contact.md └── legal.md When rendering the home page, the RegularPages method returns:\ncontact.md\rlegal.md\rWhen rendering the lessons page, the RegularPages method returns:\nlessons/grading-policy.md\rlessons/lesson-plan.md\rWhen rendering lesson-1, the RegularPages method returns:\nlessons/lesson-1/part-1.md\rlessons/lesson-1/part-2.md\rWhen rendering lesson-2, the RegularPages method returns:\nlessons/lesson-2/part-1.md\rlessons/lesson-2/part-2.md\rlessons/lesson-2/resources/task-list.md\rlessons/lesson-2/resources/worksheet.md\rIn the last example, the collection includes pages in the resources subdirectory. That directory is not a section—it does not contain an _index.md file. Its contents are part of the lesson-2 section.\nWhen used with the Site object, the RegularPages method recursively returns all regular pages within the site. See details.\n{{ range .Site.RegularPages.ByTitle }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/site/regularpages/","title":"RegularPages","content":"{{ range .Site.RegularPages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} By default, Hugo sorts page collections by:\nThe page weight as defined in front matter The page date as defined in front matter The page linkTitle as defined in front matter The file path If the linkTitle is not defined, Hugo evaluates the title instead.\nTo change the sort order, use any of the Pages sorting methods. For example:\n{{ range .Site.RegularPages.ByTitle }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/page/regularpagesrecursive/","title":"RegularPagesRecursive","content":"The RegularPagesRecursive method on a Page object is available to these page kinds: home, section, taxonomy, and term. The templates for these page kinds receive a page collection in context.\nRange through the page collection in your template:\n{{ range .RegularPagesRecursive.ByTitle }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} Consider this content structure:\ncontent/ ├── lessons/ │ ├── lesson-1/ │ │ ├── _index.md │ │ ├── part-1.md │ │ └── part-2.md │ ├── lesson-2/ │ │ ├── resources/ │ │ │ ├── task-list.md │ │ │ └── worksheet.md │ │ ├── _index.md │ │ ├── part-1.md │ │ └── part-2.md │ ├── _index.md │ ├── grading-policy.md │ └── lesson-plan.md ├── _index.md ├── contact.md └── legal.md When rendering the home page, the RegularPagesRecursive method returns:\ncontact.md\rlessons/grading-policy.md\rlegal.md\rlessons/lesson-plan.md\rlessons/lesson-2/part-1.md\rlessons/lesson-1/part-1.md\rlessons/lesson-2/part-2.md\rlessons/lesson-1/part-2.md\rlessons/lesson-2/resources/task-list.md\rlessons/lesson-2/resources/worksheet.md\rWhen rendering the lessons page, the RegularPagesRecursive method returns:\nlessons/grading-policy.md\rlessons/lesson-plan.md\rlessons/lesson-2/part-1.md\rlessons/lesson-1/part-1.md\rlessons/lesson-2/part-2.md\rlessons/lesson-1/part-2.md\rlessons/lesson-2/resources/task-list.md\rlessons/lesson-2/resources/worksheet.md\rWhen rendering lesson-1, the RegularPagesRecursive method returns:\nlessons/lesson-1/part-1.md\rlessons/lesson-1/part-2.md\rWhen rendering lesson-2, the RegularPagesRecursive method returns:\nlessons/lesson-2/part-1.md\rlessons/lesson-2/part-2.md\rlessons/lesson-2/resources/task-list.md\rlessons/lesson-2/resources/worksheet.md\rThe RegularPagesRecursive method in not available on a Site object.\n"},{"date":"0001-01-01","uri":"/methods/pages/related/","title":"Related","content":"Based on front matter, Hugo uses several factors to identify content related to the given page. Use the default related content configuration, or tune the results to the desired indices and parameters. See details.\nThe argument passed to the Related method may be a Page or an options map. For example, to pass the current page:\nlayouts/_default/single.html\r{{ with .Site.RegularPages.Related . | first 5 }} \u003cp\u003eRelated pages:\u003c/p\u003e \u003cul\u003e {{ range . }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }}\rTo pass an options map:\nlayouts/_default/single.html\r{{ $opts := dict \"document\" . \"indices\" (slice \"tags\" \"keywords\") }} {{ with .Site.RegularPages.Related $opts | first 5 }} \u003cp\u003eRelated pages:\u003c/p\u003e \u003cul\u003e {{ range . }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }}\rOptions indices (slice) The indices to search within. document (page) The page for which to find related content. Required when specifying an options map. namedSlices (slice) The keywords to search for, expressed as a slice of KeyValues using the keyVals function. fragments (slice) A list of special keywords that is used for indices configured as type “fragments”. This will match the fragment identifiers of the documents. A contrived example using all of the above:\n{{ $page := . }} {{ $opts := dict \"indices\" (slice \"tags\" \"keywords\") \"document\" $page \"namedSlices\" (slice (keyVals \"tags\" \"hugo\" \"rocks\") (keyVals \"date\" $page.Date)) \"fragments\" (slice \"heading-1\" \"heading-2\") }} "},{"date":"0001-01-01","uri":"/methods/page/relpermalink/","title":"RelPermalink","content":"Site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rbaseURL: https://example.org/docs/ title: Documentation baseURL = 'https://example.org/docs/' title = 'Documentation' { \"baseURL\": \"https://example.org/docs/\", \"title\": \"Documentation\" } Template:\n{{ $page := .Site.GetPage \"/about\" }} {{ $page.RelPermalink }} → /docs/about/ "},{"date":"0001-01-01","uri":"/methods/resource/relpermalink/","title":"RelPermalink","content":"The Permalink method on a Resource object writes the resource to the publish directory, typically public, and returns its relative permalink.\n{{ with resources.Get \"images/a.jpg\" }} {{ .RelPermalink }} → /images/a.jpg {{ end }} Use this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/methods/page/relref/","title":"RelRef","content":"The map of option contains:\npath (string) The path to the page, relative to the content directory. Required. lang (string) The language (site) to search for the page. Default is the current language. Optional. outputFormat (string) The output format to search for the page. Default is the current output format. Optional. The examples below show the rendered output when visiting a page on the English language version of the site:\n{{ $opts := dict \"path\" \"/books/book-1\" }} {{ .RelRef $opts }} → /en/books/book-1/ {{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }} {{ .RelRef $opts }} → /de/books/book-1/ {{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }} {{ .RelRef $opts }} → /de/books/book-1/index.json By default, Hugo will throw an error and fail the build if it cannot resolve the path. You can change this to a warning in your site configuration, and specify a URL to return when the path cannot be resolved.\nhugo.\ryaml\r \rtoml\r \rjson\r \rrefLinksErrorLevel: warning refLinksNotFoundURL: /some/other/url refLinksErrorLevel = 'warning' refLinksNotFoundURL = '/some/other/url' { \"refLinksErrorLevel\": \"warning\", \"refLinksNotFoundURL\": \"/some/other/url\" } "},{"date":"0001-01-01","uri":"/methods/shortcode/relref/","title":"RelRef","content":"The map of option contains:\npath (string) The path to the page, relative to the content directory. Required. lang (string) The language (site) to search for the page. Default is the current language. Optional. outputFormat (string) The output format to search for the page. Default is the current output format. Optional. The examples below show the rendered output when visiting a page on the English language version of the site:\n{{ $opts := dict \"path\" \"/books/book-1\" }} {{ .RelRef $opts }} → /en/books/book-1/ {{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" }} {{ .RelRef $opts }} → /de/books/book-1/ {{ $opts := dict \"path\" \"/books/book-1\" \"lang\" \"de\" \"outputFormat\" \"json\" }} {{ .RelRef $opts }} → /de/books/book-1/index.json By default, Hugo will throw an error and fail the build if it cannot resolve the path. You can change this to a warning in your site configuration, and specify a URL to return when the path cannot be resolved.\nhugo.\ryaml\r \rtoml\r \rjson\r \rrefLinksErrorLevel: warning refLinksNotFoundURL: /some/other/url refLinksErrorLevel = 'warning' refLinksNotFoundURL = '/some/other/url' { \"refLinksErrorLevel\": \"warning\", \"refLinksNotFoundURL\": \"/some/other/url\" } "},{"date":"0001-01-01","uri":"/methods/page/render/","title":"Render","content":"Typically used when ranging over a page collection, the Render method on a Page object renders the given template, passing the given page as context.\n{{ range site.RegularPages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ .Render \"summary\" }} {{ end }} In the example above, note that the template (“summary”) is identified by its file name without directory or extension.\nAlthough similar to the partial function, there are key differences.\nRender method partial function The Page object is automatically passed to the given template. You cannot pass additional context. You must specify the context, allowing you to pass a combination of objects, slices, maps, and scalars. The path to the template is determined by the content type. You must specify the path to the template, relative to the layouts/partials directory. Consider this layout structure:\nlayouts/ ├── _default/ │ ├── baseof.html │ ├── home.html │ ├── li.html \u003c-- used for other content types │ ├── list.html │ ├── single.html │ └── summary.html └── books/ ├── li.html \u003c-- used when content type is \"books\" └── summary.html And this template:\n\u003cul\u003e {{ range site.RegularPages.ByDate }} {{ .Render \"li\" }} {{ end }} \u003c/ul\u003e When rendering content of type “books” the Render method calls:\nlayouts/books/li.html For all other content types the Render methods calls:\nlayouts/_default/li.html See content views for more examples.\n"},{"date":"0001-01-01","uri":"/methods/page/rendershortcodes/","title":"RenderShortcodes","content":"\rNew in v0.117.0\rUse this method in shortcode templates to compose a page from multiple content files, while preserving a global context for footnotes and the table of contents.\nFor example:\nlayouts/shortcodes/include.html\r{{ $p := site.GetPage (.Get 0) }} {{ $p.RenderShortcodes }}\rThen in your markdown:\ncontent/about.md\r{{% include \"/snippets/services.md\" %}} {{% include \"/snippets/values.md\" %}} {{% include \"/snippets/leadership.md\" %}}\rEach of the included markdown files can contain calls to other shortcodes.\nShortcode notation In the example above it’s important to understand the difference between the two delimiters used when calling a shortcode:\n{{\u003c myshortcode \u003e}} tells Hugo that the rendered shortcode does not need further processing. For example, the shortcode content is HTML. {{% myshortcode %}} tells Hugo that the rendered shortcode needs further processing. For example, the shortcode content is markdown. Use the latter for the “include” shortcode described above.\nFurther explanation To understand what is returned by the RenderShortcodes method, consider this content file\ncontent/about.md\r+++ title = 'About' date = 2023-10-07T12:28:33-07:00 +++ {{\u003c ref \"privacy\" \u003e}} An *emphasized* word.\rWith this template code:\n{{ $p := site.GetPage \"/about\" }} {{ $p.RenderShortcodes }} Hugo renders this:;\nhttps://example.org/privacy/ An *emphasized* word. Note that the shortcode within the content file was rendered, but the surrounding markdown was preserved.\n"},{"date":"0001-01-01","uri":"/methods/page/renderstring/","title":"RenderString","content":"{{ $s := \"An *emphasized* word\" }} {{ $s | .RenderString }} → An \u003cem\u003eemphasized\u003c/em\u003e word This method takes an optional map of options:\ndisplay (string) Specify either inline or block. If inline, removes surrounding p tags from short snippets. Default is inline. markup (string) Specify a markup identifier for the provided markup. Default is the markup front matter value, falling back to the value derived from the page’s file extension. Render with the default markup renderer:\n{{ $s := \"An *emphasized* word\" }} {{ $s | .RenderString }} → An \u003cem\u003eemphasized\u003c/em\u003e word {{ $opts := dict \"display\" \"block\" }} {{ $s | .RenderString $opts }} → \u003cp\u003eAn \u003cem\u003eemphasized\u003c/em\u003e word\u003c/p\u003e Render with Pandoc:\n{{ $s := \"H~2~O\" }} {{ $opts := dict \"markup\" \"pandoc\" }} {{ $s | .RenderString $opts }} → H\u003csub\u003e2\u003c/sub\u003eO {{ $opts := dict \"display\" \"block\" \"markup\" \"pandoc\" }} {{ .RenderString $opts $s }} → \u003cp\u003eH\u003csub\u003e2\u003c/sub\u003eO\u003c/p\u003e "},{"date":"0001-01-01","uri":"/methods/resource/resize/","title":"Resize","content":"Resize an image to the given width and/or height.\nIf you specify both width and height, the resulting image will be disproportionally scaled unless the original image has the same aspect ratio.\n{{ with resources.Get \"images/original.jpg\" }} {{ with .Resize \"300x\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Use this method with global, page, or remote resources.\nProcess specification The process specification is a space-delimited, case-insensitive list of one or more of the following in any sequence:\naction Applicable to the Process method only. Specify zero or one of crop, fill, fit, or resize. If you specify an action you must also provide dimensions. dimensions Provide width or height when using the Resize method, else provide both width and height. See details. anchor Use with the Crop and Fill methods. Specify zero or one of TopLeft, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight, or Smart. Default is Smart. See details. rotation Typically specify zero or one of r90, r180, or r270. Also supports arbitrary rotation angles. See details. target format Specify zero or one of gif, jpeg, png, tiff, or webp. See details. quality Applicable to JPEG and WebP images. Optionally specify qN where N is an integer in the range [0, 100]. Default is 75. See details. hint Applicable to WebP images and equivalent to the -preset flag for the cwebp encoder. Specify zero or one of drawing, icon, photo, picture, or text. Default is photo. See details. background color When converting a PNG or WebP with transparency to a format that does not support transparency, optionally specify a background color using a 3-digit or a 6-digit hexadecimal color code. Default is #ffffff (white). See details. resampling filter Typically specify zero or one of Box, Lanczos, CatmullRom, MitchellNetravali, Linear, or NearestNeighbor. Other resampling filters are available. See details. Example {{ with resources.Get \"images/original.jpg\" }} {{ with .Resize \"300x webp q85 lanczos\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} Original\nProcessed\n"},{"date":"0001-01-01","uri":"/methods/page/resources/","title":"Resources","content":"The Resources method on a Page object returns a collection of page resources. A page resource is a file within a page bundle.\nTo work with global or remote resources, see the resources functions.\nMethods ByType (resource.Resources) Returns a collection of page resources of the given media type, or nil if none found. The media type is typically one of image, text, audio, video, or application.\n{{ range .Resources.ByType \"image\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} When working with global resources instead of page resources, use the resources.ByType function.\nGet (resource.Resource) Returns a page resource from the given path, or nil if none found.\n{{ with .Resources.Get \"images/a.jpg\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} When working with global resources instead of page resources, use the resources.Get function.\nGetMatch (resource.Resource) Returns the first page resource from paths matching the given glob pattern, or nil if none found.\n{{ with .Resources.GetMatch \"images/*.jpg\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} When working with global resources instead of page resources, use the resources.GetMatch function.\nMatch (resource.Resources) Returns a collection of page resources from paths matching the given glob pattern, or nil if none found.\n{{ range .Resources.Match \"images/*.jpg\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} When working with global resources instead of page resources, use the resources.Match function.\nPattern matching With the GetMatch and Match methods, Hugo determines a match using a case-insensitive glob pattern.\nPath Pattern Match images/foo/a.jpg images/foo/*.jpg true images/foo/a.jpg images/foo/*.* true images/foo/a.jpg images/foo/* true images/foo/a.jpg images/*/*.jpg true images/foo/a.jpg images/*/*.* true images/foo/a.jpg images/*/* true images/foo/a.jpg */*/*.jpg true images/foo/a.jpg */*/*.* true images/foo/a.jpg */*/* true images/foo/a.jpg **/*.jpg true images/foo/a.jpg **/*.* true images/foo/a.jpg **/* true images/foo/a.jpg ** true images/foo/a.jpg */*.jpg false images/foo/a.jpg *.jpg false images/foo/a.jpg *.* false images/foo/a.jpg * false "},{"date":"0001-01-01","uri":"/functions/resources/babel/","title":"resources.Babel","content":"{{ with resources.Get \"js/main.js\" }} {{ if hugo.IsDevelopment }} {{ with . | babel }} \u003cscript src=\"{{ .RelPermalink }}\"\u003e\u003c/script\u003e {{ end }} {{ else }} {{ $opts := dict \"minified\" true }} {{ with . | babel $opts | fingerprint }} \u003cscript src=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e {{ end }} {{ end }} {{ end }} Setup Step 1 Install Node.js Step 2 Install the required Node.js packages in the root of your project. npm install --save-dev @babel/core @babel/cli Step 3 Add the babel executable to Hugo’s security.exec.allow list in your site configuration: hugo.\ryaml\r \rtoml\r \rjson\r \rsecurity: exec: allow: - ^(dart-)?sass(-embedded)?$ - ^go$ - ^npx$ - ^postcss$ - ^babel$ [security] [security.exec] allow = ['^(dart-)?sass(-embedded)?$', '^go$', '^npx$', '^postcss$', '^babel$'] { \"security\": { \"exec\": { \"allow\": [ \"^(dart-)?sass(-embedded)?$\", \"^go$\", \"^npx$\", \"^postcss$\", \"^babel$\" ] } } } Configuration We add the main project’s node_modules to NODE_PATH when running Babel and similar tools. There are some known issues with Babel in this area, so if you have a babel.config.js living in a Hugo Module (and not in the project itself), we recommend using require to load the presets/plugins, e.g.:\nmodule.exports = { presets: [ [ require(\"@babel/preset-env\"), { useBuiltIns: \"entry\", corejs: 3, }, ], ], }; Options config (string) Path to the Babel configuration file. Hugo will, by default, look for a babel.config.js in your project. More information on these configuration files can be found here: babel configuration. minified (bool) Save as many bytes as possible when printing noComments (bool) Write comments to generated output (true by default) compact (bool) Do not include superfluous whitespace characters and line terminators. Defaults to auto if not set. verbose (bool) Log everything sourceMap (string) Output inline or external sourcemap from the babel compile. External sourcemaps will be written to the target with the output file name + “.map”. Input sourcemaps can be read from js.Build and node modules and combined into the output sourcemaps. "},{"date":"0001-01-01","uri":"/functions/resources/bytype/","title":"resources.ByType","content":"The media type is typically one of image, text, audio, video, or application.\n{{ range resources.ByType \"image\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} This function operates on global resources. A global resource is a file within the assets directory, or within any directory mounted to the assets directory.\nFor page resources, use the Resources.ByType method on the Page object.\n"},{"date":"0001-01-01","uri":"/functions/resources/concat/","title":"resources.Concat","content":"The resources.Concat function returns a concatenated slice of resources, caching the result using the target path as its cache key. Each resource must have the same media type.\nHugo publishes the resource to the target path when you call its Publish, Permalink, or RelPermalink methods.\n{{ $plugins := resources.Get \"js/plugins.js\" }} {{ $global := resources.Get \"js/global.js\" }} {{ $js := slice $plugins $global | resources.Concat \"js/bundle.js\" }} "},{"date":"0001-01-01","uri":"/functions/resources/copy/","title":"resources.Copy","content":"\rNew in v0.100.0\r{{ with resources.Get \"images/a.jpg\" }} {{ with resources.Copy \"img/new-image-name.jpg\" . }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ end }} The relative URL of the new published resource will be:\n/img/new-image-name.jpg The target path must be different than the source path, as shown in the example above.\nUse the resources.Copy function with global, page, and remote resources.\n"},{"date":"0001-01-01","uri":"/functions/resources/executeastemplate/","title":"resources.ExecuteAsTemplate","content":"The resources.ExecuteAsTemplate function returns a resource created from a Go template, parsed and executed with the given context, caching the result using the target path as its cache key.\nHugo publishes the resource to the target path when you call its Publish, Permalink, or RelPermalink methods.\nLet’s say you have a CSS file that you wish to populate with values from your site configuration:\nassets/css/template.css\rbody { background-color: {{ site.Params.style.bg_color }}; color: {{ site.Params.style.text_color }}; }\rAnd your site configuration contains:\nhugo.\ryaml\r \rtoml\r \rjson\r \rparams: style: bg_color: '#fefefe' text_color: '#222' [params] [params.style] bg_color = '#fefefe' text_color = '#222' { \"params\": { \"style\": { \"bg_color\": \"#fefefe\", \"text_color\": \"#222\" } } } Place this in your baseof.html template:\n{{ with resources.Get \"css/template.css\" }} {{ with resources.ExecuteAsTemplate \"css/main.css\" $ . }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ end }} {{ end }} The example above:\nCaptures the template as a resource Executes the resource as a template, passing the current page in context Publishes the resource to css/main.css The result is:\npublic/css/main.css\rbody { background-color: #fefefe; color: #222; }\r"},{"date":"0001-01-01","uri":"/functions/resources/fingerprint/","title":"resources.Fingerprint","content":"{{ with resources.Get \"js/main.js\" }} {{ with . | fingerprint \"sha256\" }} \u003cscript src=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e {{ end }} {{ end }} Hugo renders this to something like:\n\u003cscript src=\"/js/main.62e...df1.js\" integrity=\"sha256-Yuh...rfE=\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e Although most commonly used with CSS and JavaScript resources, you can use the resources.Fingerprint function with any resource type.\nThe hash algorithm may be one of md5, sha256 (default), sha384, or sha512.\nAfter cryptographically hashing the resource content:\nThe values returned by the .Permalink and .RelPermalink methods include the hash sum The resource’s .Data.Integrity method returns a Subresource Integrity (SRI) value consisting of the name of the hash algorithm, one hyphen, and the base64-encoded hash sum "},{"date":"0001-01-01","uri":"/functions/resources/fromstring/","title":"resources.FromString","content":"The resources.FromString function returns a resource created from a string, caching the result using the target path as its cache key.\nHugo publishes the resource to the target path when you call its Publish, Permalink, or RelPermalink methods.\nLet’s say you need to publish a file named “site.json” in the root of your public directory, containing the build date, the Hugo version used to build the site, and the date that the content was last modified. For example:\n{ \"build_date\": \"2023-10-03T10:50:40-07:00\", \"hugo_version\": \"0.122.0\", \"last_modified\": \"2023-10-02T15:21:27-07:00\" } Place this in your baseof.html template:\n{{ if .IsHome }} {{ $rfc3339 := \"2006-01-02T15:04:05Z07:00\" }} {{ $m := dict \"hugo_version\" hugo.Version \"build_date\" (now.Format $rfc3339) \"last_modified\" (site.LastChange.Format $rfc3339) }} {{ $json := jsonify $m }} {{ $r := resources.FromString \"site.json\" $json }} {{ $r.Publish }} {{ end }} The example above:\nCreates a map with the relevant key/value pairs using the dict function Encodes the map as a JSON string using the jsonify function Creates a resource from the JSON string using the resources.FromString function Publishes the file to the root of the public directory using the resource’s .Publish method Combine resources.FromString with resources.ExecuteAsTemplate if your string contains template actions. Rewriting the example above:\n{{ if .IsHome }} {{ $string := ` {{ $rfc3339 := \"2006-01-02T15:04:05Z07:00\" }} {{ $m := dict \"hugo_version\" hugo.Version \"build_date\" (now.Format $rfc3339) \"last_modified\" (site.LastChange.Format $rfc3339) }} {{ $json := jsonify $m }} ` }} {{ $r := resources.FromString \"\" $string }} {{ $r = $r | resources.ExecuteAsTemplate \"site.json\" . }} {{ $r.Publish }} {{ end }} "},{"date":"0001-01-01","uri":"/functions/resources/get/","title":"resources.Get","content":"{{ with resources.Get \"images/a.jpg\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} This function operates on global resources. A global resource is a file within the assets directory, or within any directory mounted to the assets directory.\nFor page resources, use the Resources.Get method on the Page object.\n"},{"date":"0001-01-01","uri":"/functions/resources/getmatch/","title":"resources.GetMatch","content":"{{ with resources.GetMatch \"images/*.jpg\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} This function operates on global resources. A global resource is a file within the assets directory, or within any directory mounted to the assets directory.\nFor page resources, use the Resources.GetMatch method on the Page object.\nHugo determines a match using a case-insensitive glob pattern.\nPath Pattern Match images/foo/a.jpg images/foo/*.jpg true images/foo/a.jpg images/foo/*.* true images/foo/a.jpg images/foo/* true images/foo/a.jpg images/*/*.jpg true images/foo/a.jpg images/*/*.* true images/foo/a.jpg images/*/* true images/foo/a.jpg */*/*.jpg true images/foo/a.jpg */*/*.* true images/foo/a.jpg */*/* true images/foo/a.jpg **/*.jpg true images/foo/a.jpg **/*.* true images/foo/a.jpg **/* true images/foo/a.jpg ** true images/foo/a.jpg */*.jpg false images/foo/a.jpg *.jpg false images/foo/a.jpg *.* false images/foo/a.jpg * false "},{"date":"0001-01-01","uri":"/functions/resources/getremote/","title":"resources.GetRemote","content":"{{ $url := \"https://example.org/images/a.jpg\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} Options The resources.GetRemote function takes an optional map of options.\n{{ $url := \"https://example.org/api\" }} {{ $opts := dict \"headers\" (dict \"Authorization\" \"Bearer abcd\") }} {{ $resource := resources.GetRemote $url $opts }} If you need multiple values for the same header key, use a slice:\n{{ $url := \"https://example.org/api\" }} {{ $opts := dict \"headers\" (dict \"X-List\" (slice \"a\" \"b\" \"c\")) }} {{ $resource := resources.GetRemote $url $opts }} You can also change the request method and set the request body:\n{{ $url := \"https://example.org/api\" }} {{ $opts := dict \"method\" \"post\" \"body\" `{\"complete\": true}` \"headers\" (dict \"Content-Type\" \"application/json\") }} {{ $resource := resources.GetRemote $url $opts }} Remote data When retrieving remote data, use the transform.Unmarshal function to unmarshal the response.\n{{ $data := \"\" }} {{ $url := \"https://example.org/books.json\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ $data = . | transform.Unmarshal }} {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} Error handling The Err method on a resource returned by the resources.GetRemote function returns an error message if the HTTP request fails, else nil. If you do not handle the error yourself, Hugo will fail the build.\n{{ $url := \"https://broken-example.org/images/a.jpg\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} To log an error as a warning instead of an error:\n{{ $url := \"https://broken-example.org/images/a.jpg\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ warnf \"%s\" . }} {{ else }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} HTTP response The Data method on a resource returned by the resources.GetRemote function returns information from the HTTP response.\n{{ $url := \"https://example.org/images/a.jpg\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ with .Data }} {{ .ContentLength }} → 42764 {{ .ContentType }} → image/jpeg {{ .Status }} → 200 OK {{ .StatusCode }} → 200 {{ .TransferEncoding }} → [] {{ end }} {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} ContentLength (int) The content length in bytes. ContentType (string) The content type. Status (string) The HTTP status text. StatusCode (int) The HTTP status code. TransferEncoding (string) The transfer encoding. Caching Resources returned from resources.GetRemote are cached to disk. See configure file caches for details.\nBy default, Hugo derives the cache key from the arguments passed to the function, the URL and the options map, if any.\nOverride the cache key by setting a key in the options map. Use this approach to have more control over how often Hugo fetches a remote resource.\n{{ $url := \"https://example.org/images/a.jpg\" }} {{ $cacheKey := print $url (now.Format \"2006-01-02\") }} {{ $resource := resources.GetRemote $url (dict \"key\" $cacheKey) }} Security To protect against malicious intent, the resources.GetRemote function inspects the server response including:\nThe Content-Type in the response header The file extension, if any The content itself If Hugo is unable to resolve the media type to an entry in its allowlist, the function throws an error:\nERROR error calling resources.GetRemote: failed to resolve media type... For example, you will see the error above if you attempt to download an executable.\nAlthough the allowlist contains entries for common media types, you may encounter situations where Hugo is unable to resolve the media type of a file that you know to be safe. In these situations, edit your site configuration to add the media type to the allowlist. For example:\n[security.http] mediaTypes=['application/vnd\\.api\\+json'] Note that the entry above is:\nAn addition to the allowlist; it does not replace the allowlist An array of regular expressions For example, to add two entries to the allowlist:\n[security.http] mediaTypes=['application/vnd\\.api\\+json','image/avif'] "},{"date":"0001-01-01","uri":"/functions/resources/match/","title":"resources.Match","content":"{{ range resources.Match \"images/*.jpg\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\" alt=\"\"\u003e {{ end }} This function operates on global resources. A global resource is a file within the assets directory, or within any directory mounted to the assets directory.\nFor page resources, use the Resources.Match method on the Page object.\nHugo determines a match using a case-insensitive glob pattern.\nPath Pattern Match images/foo/a.jpg images/foo/*.jpg true images/foo/a.jpg images/foo/*.* true images/foo/a.jpg images/foo/* true images/foo/a.jpg images/*/*.jpg true images/foo/a.jpg images/*/*.* true images/foo/a.jpg images/*/* true images/foo/a.jpg */*/*.jpg true images/foo/a.jpg */*/*.* true images/foo/a.jpg */*/* true images/foo/a.jpg **/*.jpg true images/foo/a.jpg **/*.* true images/foo/a.jpg **/* true images/foo/a.jpg ** true images/foo/a.jpg */*.jpg false images/foo/a.jpg *.jpg false images/foo/a.jpg *.* false images/foo/a.jpg * false "},{"date":"0001-01-01","uri":"/functions/resources/minify/","title":"resources.Minify","content":"{{ $css := resources.Get \"css/main.css\" }} {{ $style := $css | minify }} Any CSS, JS, JSON, HTML, SVG, or XML resource can be minified using resources.Minify which takes for argument the resource object.\n"},{"date":"0001-01-01","uri":"/functions/resources/postcss/","title":"resources.PostCSS","content":"{{ with resources.Get \"css/main.css\" | postCSS }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ end }} Setup Follow the steps below to transform CSS using any of the available PostCSS plugins.\nStep 1 Install Node.js. Step 2 Install the required Node.js packages in the root of your project. For example, to add vendor prefixes to your CSS rules: npm i -D postcss postcss-cli autoprefixer Step 3 Create a PostCSS configuration file in the root of your project. You must name this file postcss.config.js or another supported file name. For example: module.exports = { plugins: [ require('autoprefixer') ] }; If you are a Windows user, and the path to your project contains a space, you must place the PostCSS configuration within the package.json file. See this example and issue #7333.\nStep 4 Place your CSS file within the assets/css directory. Step 5 Process the resource with PostCSS: {{ with resources.Get \"css/main.css\" | postCSS }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ end }} Options The resources.PostCSS method takes an optional map of options.\nconfig (string) The directory that contains the PostCSS configuration file. Default is the root of the project directory. noMap (bool) Default is false. If true, disables inline sourcemaps. inlineImports (bool) Default is false. Enable inlining of @import statements. It does so recursively, but will only import a file once. URL imports (e.g. @import url('https://fonts.googleapis.com/css?family=Open+Sans\u0026display=swap');) and imports with media queries will be ignored. Note that this import routine does not care about the CSS spec, so you can have @import anywhere in the file. Hugo will look for imports relative to the module mount and will respect theme overrides. skipInlineImportsNotFound (bool) Default is false. Before Hugo 0.99.0 when inlineImports was enabled and we failed to resolve an import, we logged it as a warning. We now fail the build. If you have regular CSS imports in your CSS that you want to preserve, you can either use imports with URL or media queries (Hugo does not try to resolve those) or set skipInlineImportsNotFound to true. {{ $opts := dict \"config\" \"config-directory\" \"noMap\" true }} {{ with resources.Get \"css/main.css\" | postCSS $opts }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ end }} No configuration file To avoid using a PostCSS configuration file, you can specify a minimal configuration using the options map.\nuse (string) A space-delimited list of PostCSS plugins to use. parser (string) A custom PostCSS parser. stringifier (string) A custom PostCSS stringifier. syntax (string) Custom postcss syntax. {{ $opts := dict \"use\" \"autoprefixer postcss-color-alpha\" }} {{ with resources.Get \"css/main.css\" | postCSS $opts }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ end }} Check environment The current Hugo environment name (set by --environment or in configuration or OS environment) is available in the Node context, which allows constructs like this:\nconst autoprefixer = require('autoprefixer'); const purgecss = require('@fullhuman/postcss-purgecss'); module.exports = { plugins: [ autoprefixer, process.env.HUGO_ENVIRONMENT !== 'development' ? purgecss : null ] } "},{"date":"0001-01-01","uri":"/functions/resources/postprocess/","title":"resources.PostProcess","content":"{{ with resources.Get \"css/main.css\" }} {{ if hugo.IsDevelopment }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ else }} {{ with . | postCSS | minify | fingerprint | resources.PostProcess }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e {{ end }} {{ end }} {{ end }} Marking a resource with resources.PostProcess postpones transformations until the build has finished.\nCall resources.PostProcess when one or more of the steps in the transformation chain depends on the result of the build.\nA prime use case for this is purging unused CSS rules using the PurgeCSS plugin for the PostCSS Node.js package.\nCSS Purging There are several ways to set up CSS purging with PostCSS in Hugo. If you have a simple project, you should consider going the simpler route and drop the use of resources.PostProcess and just extract keywords from the templates. See the Tailwind documentation for examples.\nStep 1 Install Node.js. Step 2 Install the required Node.js packages in the root of your project: npm i -D postcss postcss-cli autoprefixer @fullhuman/postcss-purgecss Step 3 Create a PostCSS configuration file in the root of your project. You must name this file postcss.config.js or another supported file name. For example: const autoprefixer = require('autoprefixer'); const purgecss = require('@fullhuman/postcss-purgecss')({ content: ['./hugo_stats.json'], defaultExtractor: content =\u003e { const els = JSON.parse(content).htmlElements; return [ ...(els.tags || []), ...(els.classes || []), ...(els.ids || []), ]; }, // https://purgecss.com/safelisting.html safelist: [] }); module.exports = { plugins: [ autoprefixer, process.env.HUGO_ENVIRONMENT !== 'development' ? purgecss : null ] }; If you are a Windows user, and the path to your project contains a space, you must place the PostCSS configuration within the package.json file. See this example and issue #7333.\nStep 4 Enable creation of the hugo_stats.json file when building the site. If you are only using this for the production build, consider placing it below config/production. hugo.\ryaml\r \rtoml\r \rjson\r \rbuild: buildStats: enable: true [build] [build.buildStats] enable = true { \"build\": { \"buildStats\": { \"enable\": true } } } See the configure build documentation for details and options.\nStep 5 Place your CSS file within the assets/css directory. Step 6 If the current environment is not development, process the resource with PostCSS: {{ with resources.Get \"css/main.css\" }} {{ if hugo.IsDevelopment }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ else }} {{ with . | postCSS | minify | fingerprint | resources.PostProcess }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e {{ end }} {{ end }} {{ end }} Environment variables Hugo passes these environment variables to PostCSS, which allows you to do something like:\nprocess.env.HUGO_ENVIRONMENT === 'production' ? [autoprefixer] : [] PWD The absolute path to the project working directory. HUGO_ENVIRONMENT The current Hugo environment, set with the --environment command line flag. Default is production for hugo and development for hugo server. HUGO_PUBLISHDIR The absolute path to the publish directory (the public directory). Note that the value will always point to a directory on disk even when running hugo server in memory mode. If you write to this folder from PostCSS when running the server, you could run the server with one of these flags: hugo server --renderToDisk hugo server --renderStaticToDisk Also, Hugo will add environment variables for all files mounted below assets/_jsconfig. A default mount will be set up with files in the project root matching this regexp: (babel|postcss|tailwind)\\.config\\.js.\nThese will get environment variables named on the form HUGO_FILE_:filename: where :filename: is all upper case with periods replaced with underscore. This allows you to do something like:\nlet tailwindConfig = process.env.HUGO_FILE_TAILWIND_CONFIG_JS || './tailwind.config.js'; Limitations Do not use resources.PostProcess when running Hugo’s built-in development server. The examples above specifically prevent this by verifying that the current environment is not “development”.\nThe resources.PostProcess function only works within templates that produce HTML files.\nYou cannot manipulate the values returned from the resource’s methods. For example, the strings.ToUpper function in this example will not work as expected:\n{{ $css := resources.Get \"css/main.css\" }} {{ $css = $css | resources.PostCSS | minify | fingerprint | resources.PostProcess }} {{ $css.RelPermalink | strings.ToUpper }} "},{"date":"0001-01-01","uri":"/functions/resources/tocss/","title":"resources.ToCSS","content":"{{ with resources.Get \"sass/main.scss\" }} {{ $opts := dict \"transpiler\" \"libsass\" \"targetPath\" \"css/style.css\" }} {{ with . | toCSS $opts }} {{ if hugo.IsDevelopment }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ else }} {{ with . | minify | fingerprint }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e {{ end }} {{ end }} {{ end }} {{ end }} Transpile Sass to CSS using the LibSass transpiler included in Hugo’s extended edition, or install Dart Sass to use the latest features of the Sass language.\nSass has two forms of syntax: SCSS and indented. Hugo supports both.\nOptions transpiler (string) The transpiler to use, either libsass (default) or dartsass. Hugo’s extended edition includes the LibSass transpiler. To use the Dart Sass transpiler, see the installation instructions below. targetPath (string) If not set, the transformed resource’s target path will be the original path of the asset file with its extension replaced by .css. vars (map) A map of key/value pairs that will be available in the hugo:vars namespace. Useful for initializing Sass variables from Hugo templates. // LibSass @import \"hugo:vars\"; // Dart Sass @use \"hugo:vars\" as v; outputStyle (string) Output styles available to LibSass include nested (default), expanded, compact, and compressed. Output styles available to Dart Sass include expanded (default) and compressed. precision (int) Precision of floating point math. Not applicable to Dart Sass. enableSourceMap (bool) If true, generates a source map. sourceMapIncludeSources (bool) If true, embeds sources in the generated source map. Not applicable to LibSass. includePaths (slice) A slice of paths, relative to the project root, that the transpiler will use when resolving @use and @import statements. {{ $opts := dict \"transpiler\" \"dartsass\" \"targetPath\" \"css/style.css\" \"vars\" site.Params.styles \"enableSourceMap\" (not hugo.IsProduction) \"includePaths\" (slice \"node_modules/bootstrap/scss\") }} {{ with resources.Get \"sass/main.scss\" | toCSS $opts | minify | fingerprint }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e {{ end }} Dart Sass The extended version of Hugo includes LibSass to transpile Sass to CSS. In 2020, the Sass team deprecated LibSass in favor of Dart Sass.\nUse the latest features of the Sass language by installing Dart Sass in your development and production environments.\nInstallation overview Dart Sass is compatible with Hugo v0.114.0 and later.\nIf you have been using Embedded Dart Sass1 with Hugo v0.113.0 and earlier, uninstall Embedded Dart Sass, then install Dart Sass. If you have installed both, Hugo will use Dart Sass.\nIf you install Hugo as a Snap package there is no need to install Dart Sass. The Hugo Snap package includes Dart Sass.\nInstalling in a development environment When you install Dart Sass somewhere in your PATH, Hugo will find it.\nOS Package manager Site Installation Linux Homebrew brew.sh brew install sass/sass/sass Linux Snap snapcraft.io sudo snap install dart-sass macOS Homebrew brew.sh brew install sass/sass/sass Windows Chocolatey chocolatey.org choco install sass Windows Scoop scoop.sh scoop install sass You may also install prebuilt binaries for Linux, macOS, and Windows.\nRun hugo env to list the active transpilers.\nInstalling in a production environment For CI/CD deployments (e.g., GitHub Pages, GitLab Pages, Netlify, etc.) you must edit the workflow to install Dart Sass before Hugo builds the site2. Some providers allow you to use one of the package managers above, or you can download and extract one of the prebuilt binaries.\nGitHub Pages To install Dart Sass for your builds on GitHub Pages, add this step to the GitHub Pages workflow file:\n- name: Install Dart Sass run: sudo snap install dart-sass If you are using GitHub Pages for the first time with your repository, GitHub provides a starter workflow for Hugo that includes Dart Sass. This is the simplest way to get started.\nGitLab Pages To install Dart Sass for your builds on GitLab Pages, the .gitlab-ci.yml file should look something like this:\nvariables: HUGO_VERSION: 0.122.0 DART_SASS_VERSION: 1.70.0 GIT_DEPTH: 0 GIT_STRATEGY: clone GIT_SUBMODULE_STRATEGY: recursive TZ: America/Los_Angeles image: name: golang:1.20-buster pages: script: # Install Dart Sass - curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz - tar -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz - cp -r dart-sass/* /usr/local/bin - rm -rf dart-sass* # Install Hugo - curl -LJO https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb - apt install -y ./hugo_extended_${HUGO_VERSION}_linux-amd64.deb - rm hugo_extended_${HUGO_VERSION}_linux-amd64.deb # Build - hugo --gc --minify artifacts: paths: - public rules: - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH Netlify To install Dart Sass for your builds on Netlify, the netlify.toml file should look something like this:\n[build.environment] HUGO_VERSION = \"0.122.0\" DART_SASS_VERSION = \"1.70.0\" TZ = \"America/Los_Angeles\" [build] publish = \"public\" command = \"\"\"\\ curl -LJO https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz \u0026\u0026 \\ tar -xf dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz \u0026\u0026 \\ rm dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz \u0026\u0026 \\ export PATH=/opt/build/repo/dart-sass:$PATH \u0026\u0026 \\ hugo --gc --minify \\ \"\"\" Example To transpile with Dart Sass, set transpiler to dartsass in the options map passed to resources.ToCSS. For example:\n{{ with resources.Get \"sass/main.scss\" }} {{ $opts := dict \"transpiler\" \"dartsass\" \"targetPath\" \"css/style.css\" }} {{ with . | toCSS $opts }} {{ if hugo.IsDevelopment }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\"\u003e {{ else }} {{ with . | minify | fingerprint }} \u003clink rel=\"stylesheet\" href=\"{{ .RelPermalink }}\" integrity=\"{{ .Data.Integrity }}\" crossorigin=\"anonymous\"\u003e {{ end }} {{ end }} {{ end }} {{ end }} Miscellaneous If you build Hugo from source and run mage test -v, the test will fail if you install Dart Sass as a Snap package. This is due to the Snap package’s strict confinement model.\nIn 2023, the Sass team deprecated Embedded Dart Sass in favor of Dart Sass. ↩︎\nYou do not have to do this if (a) you have not modified the assets cache location, and (b) you have not set useResourceCacheWhen to never in your site configuration, and (c) you add and commit your resources directory to your repository. ↩︎\n"},{"date":"0001-01-01","uri":"/methods/resource/resourcetype/","title":"ResourceType","content":"Common resource types include audio, image, text, and video.\n{{ with resources.Get \"image/a.jpg\" }} {{ .ResourceType }} → image {{ .MediaType.MainType }} → image {{ end }} When working with content files, the resource type is page.\ncontent/ ├── lessons/ │ ├── lesson-1/ │ │ ├── _objectives.md \u003c-- resource type = page │ │ ├── _topics.md \u003c-- resource type = page │ │ ├── _example.jpg \u003c-- resource type = image │ │ └── index.md │ └── _index.md └── _index.md With the structure above, we can range through page resources of type page to build content:\nlayouts/lessons/single.html\r{{ range .Resources.ByType \"page\" }} {{ .Content }} {{ end }}\rUse this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/functions/go-template/return/","title":"return","content":"The return statement is a custom addition to Go’s text/template package. Used within partial templates, the return statement terminates template execution and returns the given value, if any.\nThe returned value may be of any data type including, but not limited to, bool, float, int, map, resource, slice, and string.\nA return statement without a value returns an empty string of type template.HTML.\nUnlike return statements in other languages, Hugo executes the first occurrence of the return statement regardless of its position within logical blocks. See usage notes below.\nExample By way of example, let’s create a partial template that renders HTML, describing whether the given number is odd or even:\nlayouts/partials/odd-or-even.html\r{{ if math.ModBool . 2 }} \u003cp\u003e{{ . }} is even\u003c/p\u003e {{ else }} \u003cp\u003e{{ . }} is odd\u003c/p\u003e {{ end }}\rWhen called, the partial renders HTML:\n{{ partial \"odd-or-even.html\" 42 }} → \u003cp\u003e42 is even\u003c/p\u003e Instead of rendering HTML, let’s create a partial that returns a boolean value, reporting whether the given number is even:\nlayouts/partials/is-even.html\r{{ return math.ModBool . 2 }}\rWith this template:\n{{ $number := 42 }} {{ if partial \"is-even.html\" $number }} \u003cp\u003e{{ $number }} is even\u003c/p\u003e {{ else }} \u003cp\u003e{{ $number }} is odd\u003c/p\u003e {{ end }} Hugo renders:\n\u003cp\u003e42 is even\u003c/p\u003e See additional examples in the partial templates section.\nUsage Unlike return statements in other languages, Hugo executes the first occurrence of the return statement regardless of its position within logical blocks\nA partial that returns a value must contain only one return statement, placed at the end of the template.\nFor example:\nlayouts/partials/is-even.html\r{{ $result := false }} {{ if math.ModBool . 2 }} {{ $result = \"even\" }} {{ else }} {{ $result = \"odd\" }} {{ end }} {{ return $result }}\rThe construct below is incorrect; it contains more than one return statement.\nlayouts/partials/do-not-do-this.html\r{{ if math.ModBool . 2 }} {{ return \"even\" }} {{ else }} {{ return \"odd\" }} {{ end }}\r"},{"date":"0001-01-01","uri":"/methods/menu/reverse/","title":"Reverse","content":"The Reverse method returns the given menu, reversing the sort order of its entries.\nConsider this menu definition:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: Services pageRef: /services weight: 10 - name: About pageRef: /about weight: 20 - name: Contact pageRef: /contact weight: 30 [menus] [[menus.main]] name = 'Services' pageRef = '/services' weight = 10 [[menus.main]] name = 'About' pageRef = '/about' weight = 20 [[menus.main]] name = 'Contact' pageRef = '/contact' weight = 30 { \"menus\": { \"main\": [ { \"name\": \"Services\", \"pageRef\": \"/services\", \"weight\": 10 }, { \"name\": \"About\", \"pageRef\": \"/about\", \"weight\": 20 }, { \"name\": \"Contact\", \"pageRef\": \"/contact\", \"weight\": 30 } ] } } To sort the entries by name in descending order:\n\u003cul\u003e {{ range .Site.Menus.main.ByName.Reverse }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Hugo renders this to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/services/\"\u003eServices\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/contact\"\u003eContact\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/about/\"\u003eAbout\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/pages/reverse/","title":"Reverse","content":"{{ range .Pages.ByDate.Reverse }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/duration/round/","title":"Round","content":"{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }} {{ $d.Round (time.ParseDuration \"2h\") }} → 4h0m0s {{ $d.Round (time.ParseDuration \"3m\") }} → 3h33m0s {{ $d.Round (time.ParseDuration \"4s\") }} → 3h32m32s "},{"date":"0001-01-01","uri":"/functions/safe/css/","title":"safe.CSS","content":"In this context, safe means CSS content that matches any of the following:\nThe CSS3 stylesheet production, such as p { color: purple }. The CSS3 rule production, such as a[href=~\"https:\"].foo#bar. CSS3 declaration productions, such as color: red; margin: 2px. The CSS3 value production, such as rgba(0, 0, 255, 127). Example: Given style = \"color: red;\" defined in the front matter of your .md file:\n\u003cp style=\"{{ .Params.style | safeCSS }}\"\u003e…\u003c/p\u003e → \u003cp style=\"color: red;\"\u003e…\u003c/p\u003e \u003cp style=\"{{ .Params.style }}\"\u003e…\u003c/p\u003e → \u003cp style=\"ZgotmplZ\"\u003e…\u003c/p\u003e ZgotmplZ is a special value that indicates that unsafe content reached a CSS or URL context.\n"},{"date":"0001-01-01","uri":"/functions/safe/html/","title":"safe.HTML","content":"It should not be used for HTML from a third-party, or HTML with unclosed tags or comments.\nGiven a site-wide hugo.toml with the following copyright value:\nhugo.\ryaml\r \rtoml\r \rjson\r \rcopyright: © 2015 Jane Doe. \u003ca href=\"https://creativecommons.org/licenses/by/4.0/\"\u003eSome rights reserved\u003c/a\u003e. copyright = '© 2015 Jane Doe. \u003ca href=\"https://creativecommons.org/licenses/by/4.0/\"\u003eSome rights reserved\u003c/a\u003e.' { \"copyright\": \"© 2015 Jane Doe. \\u003ca href=\\\"https://creativecommons.org/licenses/by/4.0/\\\"\\u003eSome rights reserved\\u003c/a\\u003e.\" } {{ .Site.Copyright | safeHTML }} in a template would then output:\n© 2015 Jane Doe. \u003ca href=\"https://creativecommons.org/licenses/by/4.0/\"\u003eSome rights reserved\u003c/a\u003e. However, without the safeHTML function, html/template assumes .Site.Copyright to be unsafe and therefore escapes all HTML tags and renders the whole string as plain text:\n\u003cp\u003e© 2015 Jane Doe. \u0026lt;a href=\u0026#34;https://creativecommons.org/licenses by/4.0/\u0026#34;\u0026gt;Some rights reserved\u0026lt;/a\u0026gt;.\u003c/p\u003e "},{"date":"0001-01-01","uri":"/functions/safe/htmlattr/","title":"safe.HTMLAttr","content":"Given a site configuration that contains this menu entry:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: IRC url: irc://irc.freenode.net/#golang [menus] [[menus.main]] name = 'IRC' url = 'irc://irc.freenode.net/#golang' { \"menus\": { \"main\": [ { \"name\": \"IRC\", \"url\": \"irc://irc.freenode.net/#golang\" } ] } } Attempting to use the url value directly in an attribute:\n{{ range site.Menus.main }} \u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e {{ end }} Will produce:\n\u003ca href=\"#ZgotmplZ\"\u003eIRC\u003c/a\u003e ZgotmplZ is a special value, inserted by Go’s template/html package, that indicates that unsafe content reached a CSS or URL context.\nTo indicate that the HTML attribute is safe:\n{{ range site.Menus.main }} \u003ca {{ printf \"href=%q\" .URL | safeHTMLAttr }}\u003e{{ .Name }}\u003c/a\u003e {{ end }} As demonstrated above, you must pass the HTML attribute name and value through the function. Applying safeHTMLAttr to the attribute value has no effect.\n"},{"date":"0001-01-01","uri":"/functions/safe/js/","title":"safe.JS","content":"In this context, safe means the string encapsulates a known safe EcmaScript5 Expression (e.g., (x + y * z())).\nTemplate authors are responsible for ensuring that typed expressions do not break the intended precedence and that there is no statement/expression ambiguity as when passing an expression like { foo:bar() }\\n['foo'](), which is both a valid expression and a valid program with a very different meaning.\nExample: Given hash = \"619c16f\" defined in the front matter of your .md file:\n\u003cscript\u003evar form_{{ .Params.hash | safeJS }};…\u003c/script\u003e → \u003cscript\u003evar form_619c16f;…\u003c/script\u003e \u003cscript\u003evar form_{{ .Params.hash }};…\u003c/script\u003e → \u003cscript\u003evar form_\"619c16f\";…\u003c/script\u003e "},{"date":"0001-01-01","uri":"/functions/safe/jsstr/","title":"safe.JSStr","content":"Encapsulates a sequence of characters meant to be embedded between quotes in a JavaScript expression. Use of this type presents a security risk: the encapsulated content should come from a trusted source, as it will be included verbatim in the template output.\nWithout declaring a variable to be a safe JavaScript string:\n{{ $title := \"Lilo \u0026 Stitch\" }} \u003cscript\u003e const a = \"Title: \" + {{ $title }}; \u003c/script\u003e Rendered:\n\u003cscript\u003e const a = \"Title: \" + \"Lilo \\u0026 Stitch\"; \u003c/script\u003e To avoid escaping by Go’s html/template package:\n{{ $title := \"Lilo \u0026 Stitch\" }} \u003cscript\u003e const a = \"Title: \" + {{ $title | safeJSStr }}; \u003c/script\u003e Rendered:\n\u003cscript\u003e const a = \"Title: \" + \"Lilo \u0026 Stitch\"; \u003c/script\u003e "},{"date":"0001-01-01","uri":"/functions/safe/url/","title":"safe.URL","content":"safeURL declares the provided string as a “safe” URL or URL substring (see RFC 3986). A URL like javascript:checkThatFormNotEditedBeforeLeavingPage() from a trusted source should go in the page, but by default dynamic javascript: URLs are filtered out since they are a frequently exploited injection vector.\nWithout safeURL, only the URI schemes http:, https: and mailto: are considered safe by Go templates. If any other URI schemes (e.g., irc: and javascript:) are detected, the whole URL will be replaced with #ZgotmplZ. This is to “defang” any potential attack in the URL by rendering it useless.\nThe following examples use a site hugo.toml with the following menu entry:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmenus: main: - name: 'IRC: #golang at freenode' url: irc://irc.freenode.net/#golang [menus] [[menus.main]] name = 'IRC: #golang at freenode' url = 'irc://irc.freenode.net/#golang' { \"menus\": { \"main\": [ { \"name\": \"IRC: #golang at freenode\", \"url\": \"irc://irc.freenode.net/#golang\" } ] } } The following is an example of a sidebar partial that may be used in conjunction with the preceding front matter example:\nlayouts/partials/bad-url-sidebar-menu.html\r\u003c!-- This unordered list may be part of a sidebar menu --\u003e \u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e\rThis partial would produce the following HTML output:\n\u003c!-- This unordered list may be part of a sidebar menu --\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"#ZgotmplZ\"\u003eIRC: #golang at freenode\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e The odd output can be remedied by adding | safeURL to our .URL page variable:\nlayouts/partials/correct-url-sidebar-menu.html\r\u003c!-- This unordered list may be part of a sidebar menu --\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"{{ .URL | safeURL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\rWith the .URL page variable piped through safeURL, we get the desired output:\n\u003cul class=\"sidebar-menu\"\u003e \u003cli\u003e\u003ca href=\"irc://irc.freenode.net/#golang\"\u003eIRC: #golang at freenode\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/scratch/","title":"Scratch","content":"The Scratch method on a Page object creates a scratch pad to store and manipulate data. To create a scratch pad that is not reset on server rebuilds, use the Store method instead.\nTo create a locally scoped scratch pad that is not attached to a Page object, use the newScratch function.\nMethods Set Sets the value of a given key.\n{{ .Scratch.Set \"greeting\" \"Hello\" }} Get Gets the value of a given key.\n{{ .Scratch.Set \"greeting\" \"Hello\" }} {{ .Scratch.Get \"greeting\" }} → Hello Add Adds a given value to existing value(s) of the given key.\nFor single values, Add accepts values that support Go’s + operator. If the first Add for a key is an array or slice, the following adds will be appended to that list.\n{{ .Scratch.Set \"greeting\" \"Hello\" }} {{ .Scratch.Add \"greeting\" \"Welcome\" }} {{ .Scratch.Get \"greeting\" }} → HelloWelcome {{ .Scratch.Set \"total\" 3 }} {{ .Scratch.Add \"total\" 7 }} {{ .Scratch.Get \"total\" }} → 10 {{ .Scratch.Set \"greetings\" (slice \"Hello\") }} {{ .Scratch.Add \"greetings\" (slice \"Welcome\" \"Cheers\") }} {{ .Scratch.Get \"greetings\" }} → [Hello Welcome Cheers] SetInMap Takes a key, mapKey and value and adds a map of mapKey and value to the given key.\n{{ .Scratch.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ .Scratch.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ .Scratch.Get \"greetings\" }} → map[english:Hello french:Bonjour] DeleteInMap Takes a key and mapKey and removes the map of mapKey from the given key.\n{{ .Scratch.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ .Scratch.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ .Scratch.DeleteInMap \"greetings\" \"english\" }} {{ .Scratch.Get \"greetings\" }} → map[french:Bonjour] GetSortedMapValues Returns an array of values from key sorted by mapKey.\n{{ .Scratch.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ .Scratch.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ .Scratch.GetSortedMapValues \"greetings\" }} → [Hello Bonjour] Delete Removes the given key.\n{{ .Scratch.Set \"greeting\" \"Hello\" }} {{ .Scratch.Delete \"greeting\" }} "},{"date":"0001-01-01","uri":"/methods/shortcode/scratch/","title":"Scratch","content":"The Scratch method within a shortcode creates a scratch pad to store and manipulate data. The scratch pad is scoped to the shortcode, and is reset on server rebuilds.\nWith the introduction of the newScratch function, and the ability to assign values to template variables after initialization, the Scratch method within a shortcode is obsolete.\nMethods Set Sets the value of a given key.\n{{ .Scratch.Set \"greeting\" \"Hello\" }} Get Gets the value of a given key.\n{{ .Scratch.Set \"greeting\" \"Hello\" }} {{ .Scratch.Get \"greeting\" }} → Hello Add Adds a given value to existing value(s) of the given key.\nFor single values, Add accepts values that support Go’s + operator. If the first Add for a key is an array or slice, the following adds will be appended to that list.\n{{ .Scratch.Set \"greeting\" \"Hello\" }} {{ .Scratch.Add \"greeting\" \"Welcome\" }} {{ .Scratch.Get \"greeting\" }} → HelloWelcome {{ .Scratch.Set \"total\" 3 }} {{ .Scratch.Add \"total\" 7 }} {{ .Scratch.Get \"total\" }} → 10 {{ .Scratch.Set \"greetings\" (slice \"Hello\") }} {{ .Scratch.Add \"greetings\" (slice \"Welcome\" \"Cheers\") }} {{ .Scratch.Get \"greetings\" }} → [Hello Welcome Cheers] SetInMap Takes a key, mapKey and value and adds a map of mapKey and value to the given key.\n{{ .Scratch.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ .Scratch.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ .Scratch.Get \"greetings\" }} → map[english:Hello french:Bonjour] DeleteInMap Takes a key and mapKey and removes the map of mapKey from the given key.\n{{ .Scratch.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ .Scratch.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ .Scratch.DeleteInMap \"greetings\" \"english\" }} {{ .Scratch.Get \"greetings\" }} → map[french:Bonjour] GetSortedMapValues Returns an array of values from key sorted by mapKey.\n{{ .Scratch.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ .Scratch.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ .Scratch.GetSortedMapValues \"greetings\" }} → [Hello Bonjour] Delete Removes the given key.\n{{ .Scratch.Set \"greeting\" \"Hello\" }} {{ .Scratch.Delete \"greeting\" }} "},{"date":"0001-01-01","uri":"/methods/time/second/","title":"Second","content":"{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Second }} → 58 "},{"date":"0001-01-01","uri":"/methods/duration/seconds/","title":"Seconds","content":"{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }} {{ $d.Seconds }} → 12751.5 "},{"date":"0001-01-01","uri":"/methods/page/section/","title":"Section","content":"With this content structure:\ncontent/ ├── lessons/ │ ├── math/ │ │ ├── _index.md │ │ ├── lesson-1.md │ │ └── lesson-2.md │ └── _index.md └── _index.md When rendering lesson-1.md:\n{{ .Section }} → lessons In the example above “lessons” is the top level section.\nThe Section method is often used with the where function to build a page collection.\n{{ range where .Site.RegularPages \"Section\" \"lessons\" }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} This is similar to using the Type method with the where function\n{{ range where .Site.RegularPages \"Type\" \"lessons\" }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} However, if the type field in front matter has been defined on one or more pages, the page collection based on Type will be different than the page collection based on Section.\n"},{"date":"0001-01-01","uri":"/methods/page/sections/","title":"Sections","content":"A section is a top-level content directory, or any content directory with an _index.md file.\nWith this content structure:\ncontent/ ├── auctions/ │ ├── 2023-11/ │ │ ├── _index.md \u003c-- front matter: weight = 202311 │ │ ├── auction-1.md │ │ └── auction-2.md │ ├── 2023-12/ │ │ ├── _index.md \u003c-- front matter: weight = 202312 │ │ ├── auction-3.md │ │ └── auction-4.md │ ├── _index.md \u003c-- front matter: weight = 30 │ ├── bidding.md │ └── payment.md ├── books/ │ ├── _index.md \u003c-- front matter: weight = 10 │ ├── book-1.md │ └── book-2.md ├── films/ │ ├── _index.md \u003c-- front matter: weight = 20 │ ├── film-1.md │ └── film-2.md └── _index.md And this template:\n{{ range .Sections.ByWeight }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} On the home page, Hugo renders:\n\u003ch2\u003e\u003ca href=\"/films/\"\u003eFilms\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/books/\"\u003eBooks\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/auctions/\"\u003eAuctions\u003c/a\u003e\u003c/h2\u003e On the auctions page, Hugo renders:\n\u003ch2\u003e\u003ca href=\"/auctions/2023-11/\"\u003eAuctions in November 2023\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/auctions/2023-12/\"\u003eAuctions in December 2023\u003c/a\u003e\u003c/h2\u003e "},{"date":"0001-01-01","uri":"/methods/site/sections/","title":"Sections","content":"Given this content structure:\ncontent/ ├── books/ │ ├── book-1.md │ └── book-2.md ├── films/ │ ├── film-1.md │ └── film-2.md └── _index.md This template:\n{{ range .Site.Sections }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} Is rendered to:\n\u003ch2\u003e\u003ca href=\"/books/\"\u003eBooks\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/films/\"\u003eFilms\u003c/a\u003e\u003c/h2\u003e "},{"date":"0001-01-01","uri":"/functions/global/site/","title":"site","content":"At the top level of a template that receives the Site object in context, these are equivalent:\n{{ .Site.Params.foo }} {{ site.Params.foo }} When the Site object is not in context, use the global site function:\n{{ site.Params.foo }} To simplify your templates, use the global site function regardless of whether the Site object is in context.\n"},{"date":"0001-01-01","uri":"/methods/page/site/","title":"Site","content":"See Site methods.\n{{ .Site.Title }} "},{"date":"0001-01-01","uri":"/methods/shortcode/site/","title":"Site","content":"See Site methods.\n{{ .Site.Title }} "},{"date":"0001-01-01","uri":"/methods/page/sitemap/","title":"Sitemap","content":"Access to the Sitemap method on a Page object is restricted to sitemap templates.\nMethods ChangeFreq (string) How frequently a page is likely to change. Valid values are always, hourly, daily, weekly, monthly, yearly, and never. Default is \"\" (change frequency omitted from rendered sitemap). {{ .Sitemap.ChangeFreq }} Priority (float) The priority of a page relative to any other page on the site. Valid values range from 0.0 to 1.0. Default is -1 (priority omitted from rendered sitemap). {{ .Sitemap.Priority }} Example With this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rsitemap: changeFreq: monthly [sitemap] changeFreq = 'monthly' { \"sitemap\": { \"changeFreq\": \"monthly\" } } And this content:\ncontent/news.md\ryaml\r \rtoml\r \rjson\r \r--- sitemap: changeFreq: hourly title: News ---\r+++ title = 'News' [sitemap] changeFreq = 'hourly' +++\r{ \"sitemap\": { \"changeFreq\": \"hourly\" }, \"title\": \"News\" } And this simplistic sitemap template:\nlayouts/_default/sitemap.xml\r{{ printf \"\u003c?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"yes\\\"?\u003e\" | safeHTML }} \u003curlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"\u003e {{ range .Pages }} \u003curl\u003e \u003cloc\u003e{{ .Permalink }}\u003c/loc\u003e {{ if not .Lastmod.IsZero }} \u003clastmod\u003e{{ .Lastmod.Format \"2006-01-02T15:04:05-07:00\" | safeHTML }}\u003c/lastmod\u003e {{ end }} {{ with .Sitemap.ChangeFreq }} \u003cchangefreq\u003e{{ . }}\u003c/changefreq\u003e {{ end }} \u003c/url\u003e {{ end }} \u003c/urlset\u003e\rThe change frequency will be hourly for the news page, and monthly for other pages.\n"},{"date":"0001-01-01","uri":"/methods/page/sites/","title":"Sites","content":"This is a convenience method to access .Site.Sites.\nWith this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: de defaultContentLanguageInSubdir: false languages: de: languageCode: de-DE languageDirection: ltr languageName: Deutsch title: Projekt Dokumentation weight: 1 en: languageCode: en-US languageDirection: ltr languageName: English title: Project Documentation weight: 2 defaultContentLanguage = 'de' defaultContentLanguageInSubdir = false [languages] [languages.de] languageCode = 'de-DE' languageDirection = 'ltr' languageName = 'Deutsch' title = 'Projekt Dokumentation' weight = 1 [languages.en] languageCode = 'en-US' languageDirection = 'ltr' languageName = 'English' title = 'Project Documentation' weight = 2 { \"defaultContentLanguage\": \"de\", \"defaultContentLanguageInSubdir\": false, \"languages\": { \"de\": { \"languageCode\": \"de-DE\", \"languageDirection\": \"ltr\", \"languageName\": \"Deutsch\", \"title\": \"Projekt Dokumentation\", \"weight\": 1 }, \"en\": { \"languageCode\": \"en-US\", \"languageDirection\": \"ltr\", \"languageName\": \"English\", \"title\": \"Project Documentation\", \"weight\": 2 } } } This template:\n\u003cul\u003e {{ range .Sites }} \u003cli\u003e\u003ca href=\"{{ .Home.Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Produces a list of links to each home page:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://example.org/de/\"\u003eProjekt Dokumentation\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://example.org/en/\"\u003eProject Documentation\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e To render a link to home page of the primary (first) language:\n{{ with .Sites.First }} \u003ca href=\"{{ .Home.Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e {{ end }} This is equivalent to:\n{{ with index .Sites 0 }} \u003ca href=\"{{ .Home.Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/site/sites/","title":"Sites","content":"With this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: de defaultContentLanguageInSubdir: false languages: de: languageCode: de-DE languageDirection: ltr languageName: Deutsch title: Projekt Dokumentation weight: 1 en: languageCode: en-US languageDirection: ltr languageName: English title: Project Documentation weight: 2 defaultContentLanguage = 'de' defaultContentLanguageInSubdir = false [languages] [languages.de] languageCode = 'de-DE' languageDirection = 'ltr' languageName = 'Deutsch' title = 'Projekt Dokumentation' weight = 1 [languages.en] languageCode = 'en-US' languageDirection = 'ltr' languageName = 'English' title = 'Project Documentation' weight = 2 { \"defaultContentLanguage\": \"de\", \"defaultContentLanguageInSubdir\": false, \"languages\": { \"de\": { \"languageCode\": \"de-DE\", \"languageDirection\": \"ltr\", \"languageName\": \"Deutsch\", \"title\": \"Projekt Dokumentation\", \"weight\": 1 }, \"en\": { \"languageCode\": \"en-US\", \"languageDirection\": \"ltr\", \"languageName\": \"English\", \"title\": \"Project Documentation\", \"weight\": 2 } } } This template:\n\u003cul\u003e {{ range .Site.Sites }} \u003cli\u003e\u003ca href=\"{{ .Home.Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Produces a list of links to each home page:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://example.org/de/\"\u003eProjekt Dokumentation\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://example.org/en/\"\u003eProject Documentation\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e To render a link to home page of the primary (first) language:\n{{ with .Site.Sites.First }} \u003ca href=\"{{ .Home.Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e {{ end }} This is equivalent to:\n{{ with index .Site.Sites 0 }} \u003ca href=\"{{ .Home.Permalink }}\"\u003e{{ .Title }}\u003c/a\u003e {{ end }} "},{"date":"0001-01-01","uri":"/methods/page/slug/","title":"Slug","content":"\rcontent/recipes/spicy-tuna-hand-rolls.md\ryaml\r \rtoml\r \rjson\r \r--- slug: sushi title: How to make spicy tuna hand rolls ---\r+++ slug = 'sushi' title = 'How to make spicy tuna hand rolls' +++\r{ \"slug\": \"sushi\", \"title\": \"How to make spicy tuna hand rolls\" } This page will be served from:\nhttps://example.org/recipes/sushi\rTo get the slug value within a template:\n{{ .Slug }} → sushi "},{"date":"0001-01-01","uri":"/methods/page/store/","title":"Store","content":"The Store method on a Page object creates a persistent scratch pad to store and manipulate data. In contrast with the Scratch method, the scratch pad created by the Store method is not reset on server rebuilds.\nTo create a locally scoped scratch pad that is not attached to a Page object, use the newScratch function.\nMethods Set Sets the value of a given key.\n{{ .Store.Set \"greeting\" \"Hello\" }} Get Gets the value of a given key.\n{{ .Store.Set \"greeting\" \"Hello\" }} {{ .Store.Get \"greeting\" }} → Hello Add Adds a given value to existing value(s) of the given key.\nFor single values, Add accepts values that support Go’s + operator. If the first Add for a key is an array or slice, the following adds will be appended to that list.\n{{ .Store.Set \"greeting\" \"Hello\" }} {{ .Store.Add \"greeting\" \"Welcome\" }} {{ .Store.Get \"greeting\" }} → HelloWelcome {{ .Store.Set \"total\" 3 }} {{ .Store.Add \"total\" 7 }} {{ .Store.Get \"total\" }} → 10 {{ .Store.Set \"greetings\" (slice \"Hello\") }} {{ .Store.Add \"greetings\" (slice \"Welcome\" \"Cheers\") }} {{ .Store.Get \"greetings\" }} → [Hello Welcome Cheers] SetInMap Takes a key, mapKey and value and adds a map of mapKey and value to the given key.\n{{ .Store.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ .Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ .Store.Get \"greetings\" }} → map[english:Hello french:Bonjour] DeleteInMap Takes a key and mapKey and removes the map of mapKey from the given key.\n{{ .Store.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ .Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ .Store.DeleteInMap \"greetings\" \"english\" }} {{ .Store.Get \"greetings\" }} → map[french:Bonjour] GetSortedMapValues Returns an array of values from key sorted by mapKey.\n{{ .Store.SetInMap \"greetings\" \"english\" \"Hello\" }} {{ .Store.SetInMap \"greetings\" \"french\" \"Bonjour\" }} {{ .Store.GetSortedMapValues \"greetings\" }} → [Hello Bonjour] Delete Removes the given key.\n{{ .Store.Set \"greeting\" \"Hello\" }} {{ .Store.Delete \"greeting\" }} "},{"date":"0001-01-01","uri":"/functions/strings/chomp/","title":"strings.Chomp","content":"If the argument is of type template.HTML, returns template.HTML, else returns a string.\n{{ chomp | \"foo\\n\" }} → foo {{ chomp | \"foo\\n\\n\" }} → foo {{ chomp | \"foo\\r\\n\" }} → foo {{ chomp | \"foo\\r\\n\\r\\n\" }} → foo "},{"date":"0001-01-01","uri":"/functions/strings/contains/","title":"strings.Contains","content":"{{ strings.Contains \"Hugo\" \"go\" }} → true The check is case sensitive:\n{{ strings.Contains \"Hugo\" \"Go\" }} → false "},{"date":"0001-01-01","uri":"/functions/strings/containsany/","title":"strings.ContainsAny","content":"{{ strings.ContainsAny \"Hugo\" \"gm\" }} → true The check is case sensitive:\n{{ strings.ContainsAny \"Hugo\" \"Gm\" }} → false "},{"date":"0001-01-01","uri":"/functions/strings/containsnonspace/","title":"strings.ContainsNonSpace","content":"\rNew in v0.111.0\r{{ strings.ContainsNonSpace \"\\n\" }} → false {{ strings.ContainsNonSpace \" \" }} → false {{ strings.ContainsNonSpace \"\\n abc\" }} → true Common white space characters include:\n'\\t', '\\n', '\\v', '\\f', '\\r', ' ' See the Unicode Character Database for a complete list.\n"},{"date":"0001-01-01","uri":"/functions/strings/count/","title":"strings.Count","content":"If SUBSTR is an empty string, this function returns 1 plus the number of Unicode code points in STRING.\n{{ \"aaabaab\" | strings.Count \"a\" }} → 5 {{ \"aaabaab\" | strings.Count \"aa\" }} → 2 {{ \"aaabaab\" | strings.Count \"aaa\" }} → 1 {{ \"aaabaab\" | strings.Count \"\" }} → 8 "},{"date":"0001-01-01","uri":"/functions/strings/countrunes/","title":"strings.CountRunes","content":"In contrast with the strings.RuneCount function, which counts every rune in a string, strings.CountRunes excludes whitespace.\n{{ \"Hello, 世界\" | strings.CountRunes }} → 8 "},{"date":"0001-01-01","uri":"/functions/strings/countwords/","title":"strings.CountWords","content":"{{ \"Hugo is a static site generator.\" | countwords }} → 6 "},{"date":"0001-01-01","uri":"/functions/strings/findre/","title":"strings.FindRE","content":"By default, findRE finds all matches. You can limit the number of matches with an optional LIMIT argument.\nWhen specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.\nGo’s regular expression package implements the RE2 syntax. The RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats. Note that the RE2 \\C escape sequence is not supported.\nThis example returns a slice of all second level headings (h2 elements) within the rendered .Content:\n{{ findRE `(?s)\u003ch2.*?\u003e.*?\u003c/h2\u003e` .Content }} The s flag causes . to match \\n as well, allowing us to find an h2 element that contains newlines.\nTo limit the number of matches to one:\n{{ findRE `(?s)\u003ch2.*?\u003e.*?\u003c/h2\u003e` .Content 1 }} You can write and test your regular expression using regex101.com. Be sure to select the Go flavor before you begin.\n"},{"date":"0001-01-01","uri":"/functions/strings/findresubmatch/","title":"strings.FindRESubmatch","content":"By default, findRESubmatch finds all matches. You can limit the number of matches with an optional LIMIT argument. A return value of nil indicates no match.\nWhen specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.\nGo’s regular expression package implements the RE2 syntax. The RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats. Note that the RE2 \\C escape sequence is not supported.\nDemonstrative examples {{ findRESubmatch `a(x*)b` \"-ab-\" }} → [[\"ab\" \"\"]] {{ findRESubmatch `a(x*)b` \"-axxb-\" }} → [[\"axxb\" \"xx\"]] {{ findRESubmatch `a(x*)b` \"-ab-axb-\" }} → [[\"ab\" \"\"] [\"axb\" \"x\"]] {{ findRESubmatch `a(x*)b` \"-axxb-ab-\" }} → [[\"axxb\" \"xx\"] [\"ab\" \"\"]] {{ findRESubmatch `a(x*)b` \"-axxb-ab-\" 1 }} → [[\"axxb\" \"xx\"]] Practical example This markdown:\n- [Example](https://example.org) - [Hugo](https://gohugo.io) Produces this HTML:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://example.org\"\u003eExample\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e To match the anchor elements, capturing the link destination and text:\n{{ $regex := `\u003ca\\s*href=\"(.+?)\"\u003e(.+?)\u003c/a\u003e` }} {{ $matches := findRESubmatch $regex .Content }} Viewed as JSON, the data structure of $matches in the code above is:\n[ [ \"\u003ca href=\\\"https://example.org\\\"\u003e\u003c/a\u003eExample\u003c/a\u003e\", \"https://example.org\", \"Example\" ], [ \"\u003ca href=\\\"https://gohugo.io\\\"\u003eHugo\u003c/a\u003e\", \"https://gohugo.io\", \"Hugo\" ] ] To render the href attributes:\n{{ range $matches }} {{ index . 1 }} {{ end }} Result:\nhttps://example.org https://gohugo.io You can write and test your regular expression using regex101.com. Be sure to select the Go flavor before you begin.\n"},{"date":"0001-01-01","uri":"/functions/strings/firstupper/","title":"strings.FirstUpper","content":"{{ strings.FirstUpper \"foo\" }} → Foo "},{"date":"0001-01-01","uri":"/functions/strings/hasprefix/","title":"strings.HasPrefix","content":"{{ hasPrefix \"Hugo\" \"Hu\" }} → true "},{"date":"0001-01-01","uri":"/functions/strings/hassuffix/","title":"strings.HasSuffix","content":"{{ hasSuffix \"Hugo\" \"go\" }} → true "},{"date":"0001-01-01","uri":"/functions/strings/repeat/","title":"strings.Repeat","content":"{{ strings.Repeat 3 \"yo\" }} → yoyoyo "},{"date":"0001-01-01","uri":"/functions/strings/replace/","title":"strings.Replace","content":"{{ $s := \"Batman and Robin\" }} {{ replace $s \"Robin\" \"Catwoman\" }} → Batman and Catwoman Limit the number of replacements using the LIMIT argument:\n{{ replace \"aabbaabb\" \"a\" \"z\" 2 }} → zzbbaabb "},{"date":"0001-01-01","uri":"/functions/strings/replacere/","title":"strings.ReplaceRE","content":"When specifying the regular expression, use a raw string literal (backticks) instead of an interpreted string literal (double quotes) to simplify the syntax. With an interpreted string literal you must escape backslashes.\nGo’s regular expression package implements the RE2 syntax. The RE2 syntax is a subset of that accepted by PCRE, roughly speaking, and with various caveats. Note that the RE2 \\C escape sequence is not supported.\n{{ $s := \"a-b--c---d\" }} {{ replaceRE `(-{2,})` \"-\" $s }} → a-b-c-d Limit the number of replacements using the LIMIT argument:\n{{ $s := \"a-b--c---d\" }} {{ replaceRE `(-{2,})` \"-\" $s 1 }} → a-b-c---d Use $1, $2, etc. within the replacement string to insert the content of each capturing group within the regular expression:\n{{ $s := \"http://gohugo.io/docs\" }} {{ replaceRE \"^https?://([^/]+).*\" \"$1\" $s }} → gohugo.io You can write and test your regular expression using regex101.com. Be sure to select the Go flavor before you begin.\n"},{"date":"0001-01-01","uri":"/functions/strings/runecount/","title":"strings.RuneCount","content":"In contrast with the strings.CountRunes function, which excludes whitespace, strings.RuneCount counts every rune in a string.\n{{ \"Hello, 世界\" | strings.RuneCount }} → 9 "},{"date":"0001-01-01","uri":"/functions/strings/slicestring/","title":"strings.SliceString","content":"For example, 1 and 4 creates a slice including elements 1 through 3. The end index can be omitted; it defaults to the string’s length.\n{{ slicestr \"BatMan\" 3 }}` → Man {{ slicestr \"BatMan\" 0 3 }}` → Bat "},{"date":"0001-01-01","uri":"/functions/strings/split/","title":"strings.Split","content":"Examples:\n{{ split \"tag1,tag2,tag3\" \",\" }} → [\"tag1\", \"tag2\", \"tag3\"] {{ split \"abc\" \"\" }} → [\"a\", \"b\", \"c\"] The strings.Split function essentially does the opposite of the collections.Delimit function. While split creates a slice from a string, delimit creates a string from a slice.\n"},{"date":"0001-01-01","uri":"/functions/strings/substr/","title":"strings.Substr","content":"It normally takes two argument: start and length. It can also take one argument: start, i.e. length is omitted, in which case the substring starting from start until the end of the string will be returned.\nTo extract characters from the end of the string, use a negative start number.\nIf length is given and is negative, that number of characters will be omitted from the end of string.\n{{ substr \"abcdef\" 0 }} → abcdef {{ substr \"abcdef\" 1 }} → bcdef {{ substr \"abcdef\" 0 1 }} → a {{ substr \"abcdef\" 1 1 }} → b {{ substr \"abcdef\" 0 -1 }} → abcde {{ substr \"abcdef\" 1 -1 }} → bcde {{ substr \"abcdef\" -1 }} → f {{ substr \"abcdef\" -2 }} → ef {{ substr \"abcdef\" -1 1 }} → f {{ substr \"abcdef\" -2 1 }} → e {{ substr \"abcdef\" -3 -1 }} → de {{ substr \"abcdef\" -3 -2 }} → d "},{"date":"0001-01-01","uri":"/functions/strings/title/","title":"strings.Title","content":"{{ title \"table of contents (TOC)\" }} → Table of Contents (TOC) By default, Hugo follows the capitalization rules published in the Associated Press Stylebook. Change your site configuration if you would prefer to:\nFollow the capitalization rules published in the Chicago Manual of Style Capitalize the first letter of every word Capitalize the first letter of the first word Disable the effects of the title function The last option is useful if your theme uses the title function, and you would prefer to manually capitalize strings as needed.\n"},{"date":"0001-01-01","uri":"/functions/strings/tolower/","title":"strings.ToLower","content":"{{ lower \"BatMan\" }} → batman "},{"date":"0001-01-01","uri":"/functions/strings/toupper/","title":"strings.ToUpper","content":"{{ upper \"BatMan\" }} → BATMAN "},{"date":"0001-01-01","uri":"/functions/strings/trim/","title":"strings.Trim","content":"{{ trim \"++foo--\" \"+-\" }} → foo To remove leading and trailing newline characters and carriage returns:\n{{ trim \"\\nfoo\\n\" \"\\n\\r\" }} → foo {{ trim \"\\n\\nfoo\\n\\n\" \"\\n\\r\" }} → foo {{ trim \"\\r\\nfoo\\r\\n\" \"\\n\\r\" }} → foo {{ trim \"\\r\\n\\r\\nfoo\\r\\n\\r\\n\" \"\\n\\r\" }} → foo The strings.Trim function is commonly used in shortcodes to remove leading and trailing newlines characters and carriage returns from the content within the opening and closing shortcode tags.\nFor example, with this markdown:\n{{\u003c my-shortcode \u003e}} Able was I ere I saw Elba. {{\u003c /my-shortcode \u003e}} The value of .Inner in the shortcode template is:\n\\nAble was I ere I saw Elba.\\n If authored on a Windows system the value of .Inner might, depending on the editor configuration, be:\n\\r\\nAble was I ere I saw Elba.\\r\\n This construct is common in shortcode templates:\n{{ trim .Inner \"\\n\\r\" }} "},{"date":"0001-01-01","uri":"/functions/strings/trimleft/","title":"strings.TrimLeft","content":"{{ strings.TrimLeft \"a\" \"abba\" }} → bba The strings.TrimLeft function converts the arguments to strings if possible:\n{{ strings.TrimLeft 21 12345 }} → 345 (string) {{ strings.TrimLeft \"rt\" true }} → ue "},{"date":"0001-01-01","uri":"/functions/strings/trimprefix/","title":"strings.TrimPrefix","content":"{{ strings.TrimPrefix \"a\" \"aabbaa\" }} → abbaa {{ strings.TrimPrefix \"aa\" \"aabbaa\" }} → bbaa {{ strings.TrimPrefix \"aaa\" \"aabbaa\" }} → aabbaa "},{"date":"0001-01-01","uri":"/functions/strings/trimright/","title":"strings.TrimRight","content":"{{ strings.TrimRight \"a\" \"abba\" }} → abb The strings.TrimRight function converts the arguments to strings if possible:\n{{ strings.TrimRight 54 12345 }} → 123 (string) {{ strings.TrimRight \"eu\" true }} → tr "},{"date":"0001-01-01","uri":"/functions/strings/trimsuffix/","title":"strings.TrimSuffix","content":"{{ strings.TrimSuffix \"a\" \"aabbaa\" }} → aabba {{ strings.TrimSuffix \"aa\" \"aabbaa\" }} → aabb {{ strings.TrimSuffix \"aaa\" \"aabbaa\" }} → aabbaa "},{"date":"0001-01-01","uri":"/functions/strings/truncate/","title":"strings.Truncate","content":"Since Go templates are HTML-aware, truncate will intelligently handle normal strings vs HTML strings:\n{{ \"\u003cem\u003eKeep my HTML\u003c/em\u003e\" | safeHTML | truncate 10 }} → \u003cem\u003eKeep my …\u003c/em\u003e If you have a raw string that contains HTML tags you want to remain treated as HTML, you will need to convert the string to HTML using the safeHTMLfunction before sending the value to truncate. Otherwise, the HTML tags will be escaped when passed through the truncate function.\n"},{"date":"0001-01-01","uri":"/methods/time/sub/","title":"Sub","content":"{{ $t1 := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t2 := time.AsTime \"2023-01-26T22:34:38-08:00\" }} {{ $t1.Sub $t2 }} → 25h10m20s "},{"date":"0001-01-01","uri":"/methods/page/summary/","title":"Summary","content":"There are three ways to define the content summary:\nLet Hugo create the summary based on the first 70 words. You can change the number of words by setting the summaryLength in your site configuration. Manually split the content with a \u003c--more--\u003e tag in markdown. Everything before the tag is included in the summary. Create a summary field in front matter. To list the pages in a section with a summary beneath each link:\n{{ range .Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ .Summary }} {{ end }} "},{"date":"0001-01-01","uri":"/methods/page/tableofcontents/","title":"TableOfContents","content":"The TableOfContents method on a Page object returns an ordered or unordered list of the markdown ATX and setext headings within the page content.\nThis template code:\n{{ .TableOfContents }} Produces this HTML:\n\u003cnav id=\"TableOfContents\"\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"#section-1\"\u003eSection 1\u003c/a\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"#section-11\"\u003eSection 1.1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#section-12\"\u003eSection 1.2\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e\u003ca href=\"#section-2\"\u003eSection 2\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/nav\u003e By default, the TableOfContents method returns an unordered list of level 2 and level 3 headings. You can adjust this in your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: tableOfContents: endLevel: 3 ordered: false startLevel: 2 [markup] [markup.tableOfContents] endLevel = 3 ordered = false startLevel = 2 { \"markup\": { \"tableOfContents\": { \"endLevel\": 3, \"ordered\": false, \"startLevel\": 2 } } } "},{"date":"0001-01-01","uri":"/methods/site/taxonomies/","title":"Taxonomies","content":"Conceptually, the Taxonomies method on a Site object returns a data structure such as:\nyaml\r \rtoml\r \rjson\r \rtaxonomy a: - term 1: - page 1 - page 2 - term 2: - page 1 taxonomy b: - term 1: - page 2 - term 2: - page 1 - page 2 [['taxonomy a']] 'term 1' = ['page 1', 'page 2'] [['taxonomy a']] 'term 2' = ['page 1'] [['taxonomy b']] 'term 1' = ['page 2'] [['taxonomy b']] 'term 2' = ['page 1', 'page 2'] { \"taxonomy a\": [ { \"term 1\": [ \"page 1\", \"page 2\" ] }, { \"term 2\": [ \"page 1\" ] } ], \"taxonomy b\": [ { \"term 1\": [ \"page 2\" ] }, { \"term 2\": [ \"page 1\", \"page 2\" ] } ] } For example, on a book review site you might create two taxonomies; one for genres and another for authors.\nWith this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: author: authors genre: genres [taxonomies] author = 'authors' genre = 'genres' { \"taxonomies\": { \"author\": \"authors\", \"genre\": \"genres\" } } And this content structure:\ncontent/ ├── books/ │ ├── and-then-there-were-none.md --\u003e genres: suspense │ ├── death-on-the-nile.md --\u003e genres: suspense │ └── jamaica-inn.md --\u003e genres: suspense, romance │ └── pride-and-prejudice.md --\u003e genres: romance └── _index.md Conceptually, the taxonomies data structure looks like:\nyaml\r \rtoml\r \rjson\r \rauthors: - achristie: - And Then There Were None - Death on the Nile - ddmaurier: - Jamaica Inn - jausten: - Pride and Prejudice genres: - suspense: - And Then There Were None - Death on the Nile - Jamaica Inn - romance: - Jamaica Inn - Pride and Prejudice [[authors]] achristie = ['And Then There Were None', 'Death on the Nile'] [[authors]] ddmaurier = ['Jamaica Inn'] [[authors]] jausten = ['Pride and Prejudice'] [[genres]] suspense = ['And Then There Were None', 'Death on the Nile', 'Jamaica Inn'] [[genres]] romance = ['Jamaica Inn', 'Pride and Prejudice'] { \"authors\": [ { \"achristie\": [ \"And Then There Were None\", \"Death on the Nile\" ] }, { \"ddmaurier\": [ \"Jamaica Inn\" ] }, { \"jausten\": [ \"Pride and Prejudice\" ] } ], \"genres\": [ { \"suspense\": [ \"And Then There Were None\", \"Death on the Nile\", \"Jamaica Inn\" ] }, { \"romance\": [ \"Jamaica Inn\", \"Pride and Prejudice\" ] } ] } To list the “suspense” books:\n\u003cul\u003e {{ range .Site.Taxonomies.genres.suspense }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e Hugo renders this to:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/books/and-then-there-were-none/\"\u003eAnd Then There Were None\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/books/death-on-the-nile/\"\u003eDeath on the Nile\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/books/jamaica-inn/\"\u003eJamaica Inn\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e Hugo’s taxonomy system is powerful, allowing you to classify content and create relationships between pages.\nPlease see the taxonomies section for a complete explanation and examples.\n"},{"date":"0001-01-01","uri":"/functions/go-template/template/","title":"template","content":"Use the template function to execute internal templates. For example:\n{{ range (.Paginate .Pages).Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ end }} {{ template \"_internal/pagination.html\" . }} You can also use the template function to execute a defined template:\n{{ template \"foo\" (dict \"answer\" 42) }} {{ define \"foo\" }} {{ printf \"The answer is %v.\" .answer }} {{ end }} The example above can be rewritten using an inline partial template:\n{{ partial \"inline/foo.html\" (dict \"answer\" 42) }} {{ define \"partials/inline/foo.html\" }} {{ printf \"The answer is %v.\" .answer }} {{ end }} See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/functions/templates/exists/","title":"templates.Exists","content":"A template file is any file within the layouts directory of either the project or any of its theme components.\nUse the templates.Exists function with dynamic template paths:\n{{ $partialPath := printf \"headers/%s.html\" .Type }} {{ if templates.Exists ( printf \"partials/%s\" $partialPath ) }} {{ partial $partialPath . }} {{ else }} {{ partial \"headers/default.html\" . }} {{ end }} In the example above, if a “headers” partial does not exist for the given content type, Hugo falls back to a default template.\n"},{"date":"0001-01-01","uri":"/functions/time/astime/","title":"time.AsTime","content":"Overview Hugo provides functions and methods to format, localize, parse, compare, and manipulate date/time values. Before you can do any of these with string representations of date/time values, you must first convert them to time.Time values using the time.AsTime function.\n{{ $t := \"2023-10-15T14:20:28-07:00\" }} {{ time.AsTime $t }} → 2023-10-15 14:20:28 -0700 PDT (time.Time) Parsable strings As shown above, the first argument must be a parsable string representation of a date/time value. For example:\nString representation Time zone 2023-10-15T14:20:28-07:00 America/Los_Angeles 2023-10-15T13:18:50-0700 America/Los_Angeles 2023-10-15T13:18:50Z Etc/UTC 2023-10-15T13:18:50 Etc/UTC 2023-10-15 Etc/UTC 15 Oct 2023 Etc/UTC The last four examples are not fully qualified. Without a time zone offset, the time zone is set to Etc/UTC (Coordinated Universal Time).\nTime zones When the parsable string does not contain a time zone offset, you can do either of the following to assign a time zone other than Etc/UTC:\nProvide a second argument to the time.AsTime function\n{{ time.AsTime \"15 Oct 2023\" \"America/Chicago\" }} Set the default time zone in your site configuration\nhugo.\ryaml\r \rtoml\r \rjson\r \rtimeZone: America/New_York timeZone = 'America/New_York' { \"timeZone\": \"America/New_York\" } The order of precedence for determining the time zone is:\nThe time zone offset in the date/time string The time zone provide as the second argument to the time.AsTime function The time zone specified in your site configuration The list of valid time zones may be system dependent, but should include UTC, Local, or any location in the IANA Time Zone database.\n"},{"date":"0001-01-01","uri":"/functions/time/duration/","title":"time.Duration","content":"The time.Duration function returns a time.Duration value that you can use with any of the Duration methods.\nThis template:\n{{ $duration := time.Duration \"hour\" 24 }} {{ printf \"There are %.0f seconds in one day.\" $duration.Seconds }} Is rendered to:\nThere are 86400 seconds in one day. The time unit must be one of the following:\nDuration Valid time units hours hour, h minutes minute, m seconds second, s milliseconds millisecond, ms microseconds microsecond, us, µs nanoseconds nanosecond, ns "},{"date":"0001-01-01","uri":"/functions/time/format/","title":"time.Format","content":"Use the time.Format function with time.Time values:\n{{ $t := time.AsTime \"2023-02-27T23:44:58-08:00\" }} {{ time.Format \"2 Jan 2006\" $t }} → 27 Feb 2023 Or use time.Format with a parsable string representation of a date/time value:\n{{ $t := \"27 Feb 2023\" }} {{ time.Format \"January 2, 2006\" $t }} → February 27, 2023 Examples of parsable string representations:\nString representation Time zone 2023-10-15T14:20:28-07:00 America/Los_Angeles 2023-10-15T13:18:50-0700 America/Los_Angeles 2023-10-15T13:18:50Z Etc/UTC 2023-10-15T13:18:50 Etc/UTC 2023-10-15 Etc/UTC 15 Oct 2023 Etc/UTC The last four examples are not fully qualified. Without a time zone offset, the time zone is set to Etc/UTC (Coordinated Universal Time).\nLayout string Format a time.Time value based on Go’s reference time:\nMon Jan 2 15:04:05 MST 2006 Create a layout string using these components:\nDescription Valid components Year \"2006\" \"06\" Month \"Jan\" \"January\" \"01\" \"1\" Day of the week \"Mon\" \"Monday\" Day of the month \"2\" \"_2\" \"02\" Day of the year \"__2\" \"002\" Hour \"15\" \"3\" \"03\" Minute \"4\" \"04\" Second \"5\" \"05\" AM/PM mark \"PM\" Time zone offsets \"-0700\" \"-07:00\" \"-07\" \"-070000\" \"-07:00:00\" Replace the sign in the layout string with a Z to print Z instead of an offset for the UTC zone.\nDescription Valid components Time zone offsets \"Z0700\" \"Z07:00\" \"Z07\" \"Z070000\" \"Z07:00:00\" {{ $t := \"2023-01-27T23:44:58-08:00\" }} {{ $t = time.AsTime $t }} {{ $t = $t.Format \"Jan 02, 2006 3:04 PM Z07:00\" }} {{ $t }} → Jan 27, 2023 11:44 PM -08:00 Strings such as PST and CET are not time zones. They are time zone abbreviations.\nStrings such as -07:00 and +01:00 are not time zones. They are time zone offsets.\nA time zone is a geographic area with the same local time. For example, the time zone abbreviated by PST and PDT (depending on Daylight Savings Time) is America/Los_Angeles.\nLocalization Use the time.Format function to localize time.Time values for the current language and region.\nLocalization of dates, currencies, numbers, and percentages is performed by the gohugoio/locales package. The language tag of the current site must match one of the listed locales.\nUse the layout string as described above, or one of the tokens below. For example:\n{{ .Date | time.Format \":date_medium\" }} → Jan 27, 2023 Localized to en-US:\nToken Result :date_full Friday, January 27, 2023 :date_long January 27, 2023 :date_medium Jan 27, 2023 :date_short 1/27/23 :time_full 11:44:58 pm Pacific Standard Time :time_long 11:44:58 pm PST :time_medium 11:44:58 pm :time_short 11:44 pm Localized to de-DE:\nToken Result :date_full Freitag, 27. Januar 2023 :date_long 27. Januar 2023 :date_medium 27.01.2023 :date_short 27.01.23 :time_full 23:44:58 Nordamerikanische Westküsten-Normalzeit :time_long 23:44:58 PST :time_medium 23:44:58 :time_short 23:44 "},{"date":"0001-01-01","uri":"/functions/time/now/","title":"time.Now","content":"For example, when building a site on October 15, 2023 in the America/Los_Angeles time zone:\n{{ time.Now }} This produces a time.Time value, with a string representation such as:\n2023-10-15 12:59:28.337140706 -0700 PDT m=+0.041752605 To format and localize the value, pass it through the time.Format function:\n{{ time.Now | time.Format \"Jan 2006\" }} → Oct 2023 The time.Now function returns a time.Time value, so you can chain any of the time methods to the resulting value. For example:\n{{ time.Now.Year }} → 2023 (int) {{ time.Now.Weekday.String }} → Sunday {{ time.Now.Month.String }} → October {{ time.Now.Unix }} → 1697400955 (int64) "},{"date":"0001-01-01","uri":"/functions/time/parseduration/","title":"time.ParseDuration","content":"The time.ParseDuration function returns a time.Duration value that you can use with any of the Duration methods.\nA duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as 300ms, -1.5h or 2h45m. Valid time units are ns, us (or µs), ms, s, m, h.\nThis template:\n{{ $duration := time.ParseDuration \"24h\" }} {{ printf \"There are %.0f seconds in one day.\" $duration.Seconds }} Is rendered to:\nThere are 86400 seconds in one day. "},{"date":"0001-01-01","uri":"/methods/menu-entry/title/","title":"Title","content":"If you define the menu entry automatically, the Title method returns the page’s LinkTitle, falling back to its Title.\nIf you define the menu entry in front matter or in site configuration, the Name method returns the title property, falling back to the page’s LinkTitle, then to its Title.\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/title/","title":"Title","content":"With pages backed by a file, the Title method returns the title field as defined in front matter:\ncontent/about.md\ryaml\r \rtoml\r \rjson\r \r--- title: About us ---\r+++ title = 'About us' +++\r{ \"title\": \"About us\" } {{ .Title }} → About us With section pages not backed by a file, the Title method returns the section name, pluralized and converted to title case.\nTo disable pluralization:\nhugo.\ryaml\r \rtoml\r \rjson\r \rpluralizeListTitles: false pluralizeListTitles = false { \"pluralizeListTitles\": false } To change the title case style, specify one of ap, chicago, go, firstupper, or none:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtitleCaseStyle: ap titleCaseStyle = 'ap' { \"titleCaseStyle\": \"ap\" } "},{"date":"0001-01-01","uri":"/methods/resource/title/","title":"Title","content":"The value returned by the Title method on a Resource object depends on the resource type.\nGlobal resource With a global resource, the Title method returns the path to the resource, relative to the assets directory.\nassets/ └── images/ └── a.jpg {{ with resources.Get \"images/a.jpg\" }} {{ .Title }} → images/a.jpg {{ end }} Page resource With a page resource, the Title method returns the path to the resource, relative to the page bundle.\ncontent/ ├── posts/ │ ├── post-1/ │ │ ├── images/ │ │ │ └── a.jpg │ │ └── index.md │ └── _index.md └── _index.md {{ with .Resources.Get \"images/a.jpg\" }} {{ .Title }} → images/a.jpg {{ end }} If you create an element in the resources array in front matter, the Title method returns the value of the title parameter:\ncontent/posts/post-1.md\ryaml\r \rtoml\r \rjson\r \r--- resources: - name: cat params: temperament: malicious src: images/a.jpg title: Felix the cat title: Post 1 ---\r+++ title = 'Post 1' [[resources]] name = 'cat' src = 'images/a.jpg' title = 'Felix the cat' [resources.params] temperament = 'malicious' +++\r{ \"resources\": [ { \"name\": \"cat\", \"params\": { \"temperament\": \"malicious\" }, \"src\": \"images/a.jpg\", \"title\": \"Felix the cat\" } ], \"title\": \"Post 1\" } {{ with .Resources.Get \"cat\" }} {{ .Title }} → Felix the cat {{ end }} If the page resource is a content file, the Title methods return the title field as defined in front matter.\ncontent/ ├── lessons/ │ ├── lesson-1/ │ │ ├── _objectives.md \u003c-- resource type = page │ │ └── index.md │ └── _index.md └── _index.md Remote resource With a remote resource, the Title method returns a hashed file name.\n{{ with resources.GetRemote \"https://example.org/images/a.jpg\" }} {{ .Title }} → a_18432433023265451104.jpg {{ end }} "},{"date":"0001-01-01","uri":"/methods/site/title/","title":"Title","content":"Site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtitle: My Documentation Site title = 'My Documentation Site' { \"title\": \"My Documentation Site\" } Template:\n{{ .Site.Title }} → My Documentation Site "},{"date":"0001-01-01","uri":"/functions/transform/canhighlight/","title":"transform.CanHighlight","content":"{{ transform.CanHighlight \"go\" }} → true {{ transform.CanHighlight \"klingon\" }} → false "},{"date":"0001-01-01","uri":"/functions/transform/emojify/","title":"transform.Emojify","content":"emojify runs a passed string through the Emoji emoticons processor.\nSee the list of emoji shortcodes for available emoticons.\nThe emojify function can be called in your templates but not directly in your content files by default. For emojis in content files, set enableEmoji to true in your site’s configuration. Then you can write emoji shorthand directly into your content files;\nI :heart: Hugo! I ❤️ Hugo!\n"},{"date":"0001-01-01","uri":"/functions/transform/highlight/","title":"transform.Highlight","content":"The highlight function uses the Chroma syntax highlighter, supporting over 200 languages with more than 40 available styles.\nArguments INPUT The code to highlight. LANG The language of the code to highlight. Choose from one of the supported languages. Case-insensitive. OPTIONS A map, or comma-separated list, of zero or more options. Set default values in site configuration. Options lineNos Boolean. Default is false.\nDisplay a number at the beginning of each line. lineNumbersInTable Boolean. Default is true.\nRender the highlighted code in an HTML table with two cells. The left table cell contains the line numbers. The right table cell contains the code, allowing a user to select and copy the code without line numbers. Irrelevant if lineNos is false. anchorLineNos Boolean. Default is false.\nRender each line number as an HTML anchor element, and set the id attribute of the surrounding \u003cspan\u003e to the line number. Irrelevant if lineNos is false. lineAnchors String. Default is \"\".\nWhen rendering a line number as an HTML anchor element, prepend this value to the id attribute of the surrounding \u003cspan\u003e. This provides unique id attributes when a page contains two or more code blocks. Irrelevant if lineNos or anchorLineNos is false. lineNoStart Integer. Default is 1.\nThe number to display at the beginning of the first line. Irrelevant if lineNos is false. hl_Lines String. Default is \"\".\nA space-delimited list of lines to emphasize within the highlighted code. To emphasize lines 2, 3, 4, and 7, set this value to 2-4 7. This option is independent of the lineNoStart option. hl_inline Boolean. Default is false.\nRender the highlighted code without a wrapping container. style String. Default is monokai.\nThe CSS styles to apply to the highlighted code. See the style gallery for examples. Case-sensitive. noClasses Boolean. Default is true.\nUse inline CSS styles instead of an external CSS file. To use an external CSS file, set this value to false and generate the file with the hugo client. tabWidth Integer. Default is 4.\nSubstitute this number of spaces for each tab character in your highlighted code. Irrelevant if noClasses is false. guessSyntax Boolean. Default is false.\nIf the LANG argument is blank or an unrecognized language, auto-detect the language if possible, otherwise use a fallback language. Instead of specifying both lineNos and lineNumbersInTable, you can use the following shorthand notation:\nlineNos=inline equivalent to lineNos=true and lineNumbersInTable=false lineNos=table equivalent to lineNos=true and lineNumbersInTable=true Examples {{ $input := `fmt.Println(\"Hello World!\")` }} {{ transform.Highlight $input \"go\" }} {{ $input := `console.log('Hello World!');` }} {{ $lang := \"js\" }} {{ transform.Highlight $input $lang \"lineNos=table, style=api\" }} {{ $input := `echo \"Hello World!\"` }} {{ $lang := \"bash\" }} {{ $opts := dict \"lineNos\" \"table\" \"style\" \"dracula\" }} {{ transform.Highlight $input $lang $opts }} "},{"date":"0001-01-01","uri":"/functions/transform/highlightcodeblock/","title":"transform.HighlightCodeBlock","content":"This function is only useful within a code block render hook.\nGiven the context passed into a code block render hook, transform.HighlightCodeBlock returns a HighlightResult object with two methods.\n.Wrapped (template.HTML) Returns highlighted code wrapped in \u003cdiv\u003e, \u003cpre\u003e, and \u003ccode\u003e elements. This is identical to the value returned by the transform.Highlight function. .Inner (template.HTML) Returns highlighted code without any wrapping elements, allowing you to create your own wrapper. {{ $result := transform.HighlightCodeBlock . }} {{ $result.Wrapped }} To override the default highlighting options:\n{{ $opts := merge .Options (dict \"linenos\" true) }} {{ $result := transform.HighlightCodeBlock . $opts }} {{ $result.Wrapped }} "},{"date":"0001-01-01","uri":"/functions/transform/htmlescape/","title":"transform.HTMLEscape","content":"The transform.HTMLEscape function escapes five special characters by replacing them with HTML entities:\n\u0026 → \u0026amp; \u003c → \u0026lt; \u003e → \u0026gt; ' → \u0026#39; \" → \u0026#34; For example:\n{{ htmlEscape \"Lilo \u0026 Stitch\" }} → Lilo \u0026amp; Stitch {{ htmlEscape \"7 \u003e 6\" }} → 7 \u0026gt; 6 "},{"date":"0001-01-01","uri":"/functions/transform/htmlunescape/","title":"transform.HTMLUnescape","content":"The transform.HTMLUnescape function replaces HTML entities with their corresponding characters.\n{{ htmlUnescape \"Lilo \u0026amp; Stitch\" }} → Lilo \u0026 Stitch {{ htmlUnescape \"7 \u0026gt; 6\" }} → 7 \u003e 6 In most contexts Go’s html/template package will escape special characters. To bypass this behavior, pass the unescaped string through the safeHTML function.\n{{ htmlUnescape \"Lilo \u0026amp; Stitch\" | safeHTML }} "},{"date":"0001-01-01","uri":"/functions/transform/markdownify/","title":"transform.Markdownify","content":"\u003ch2\u003e{{ .Title | markdownify }}\u003c/h2\u003e If the resulting HTML is a single paragraph, Hugo removes the wrapping p tags to produce inline HTML as required per the example above.\nTo keep the wrapping p tags for a single paragraph, use the RenderString method on the Page object, setting the display option to block.\nAlthough the markdownify function honors markdown render hooks when rendering markdown to HTML, use the RenderString method instead of markdownify if a render hook accesses .Page context. See issue #9692 for details.\n"},{"date":"0001-01-01","uri":"/functions/transform/plainify/","title":"transform.Plainify","content":"{{ \"\u003cb\u003eBatMan\u003c/b\u003e\" | plainify }} → BatMan "},{"date":"0001-01-01","uri":"/functions/transform/remarshal/","title":"transform.Remarshal","content":"The format must be one of json, toml, yaml, or xml. If the input is a string of serialized data, it must be valid JSON, TOML, YAML, or XML.\nThis function is primarily a helper for Hugo’s documentation, used to convert configuration and front matter examples to JSON, TOML, and YAML.\nThis is not a general purpose converter, and may change without notice if required for Hugo’s documentation site.\nExample 1 Convert a string of TOML to JSON. {{ $s := ` baseURL = 'https://example.org/' languageCode = 'en-US' title = 'ABC Widgets' `}} \u003cpre\u003e{{ transform.Remarshal \"json\" $s }}\u003c/pre\u003e Resulting HTML:\n\u003cpre\u003e{ \u0026#34;baseURL\u0026#34;: \u0026#34;https://example.org/\u0026#34;, \u0026#34;languageCode\u0026#34;: \u0026#34;en-US\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;ABC Widgets\u0026#34; } \u003c/pre\u003e Rendered in browser:\n{ \"baseURL\": \"https://example.org/\", \"languageCode\": \"en-US\", \"title\": \"ABC Widgets\" } Example 2 Convert a map to YAML. {{ $m := dict \"a\" \"Hugo rocks!\" \"b\" (dict \"question\" \"What is 6x7?\" \"answer\" 42) \"c\" (slice \"foo\" \"bar\") }} \u003cpre\u003e{{ transform.Remarshal \"yaml\" $m }}\u003c/pre\u003e Resulting HTML:\n\u003cpre\u003ea: Hugo rocks! b: answer: 42 question: What is 6x7? c: - foo - bar \u003c/pre\u003e Rendered in browser:\na: Hugo rocks! b: answer: 42 question: What is 6x7? c: - foo - bar "},{"date":"0001-01-01","uri":"/functions/transform/unmarshal/","title":"transform.Unmarshal","content":"The input can be a string or a resource.\nUnmarshal a string {{ $string := ` title: Les Misérables author: Victor Hugo `}} {{ $book := unmarshal $string }} {{ $book.title }} → Les Misérables {{ $book.author }} → Victor Hugo Unmarshal a resource Use the transform.Unmarshal function with global, page, and remote resources.\nGlobal resource A global resource is a file within the assets directory, or within any directory mounted to the assets directory.\nassets/ └── data/ └── books.json {{ $data := \"\" }} {{ $path := \"data/books.json\" }} {{ with resources.Get $path }} {{ with unmarshal . }} {{ $data = . }} {{ end }} {{ else }} {{ errorf \"Unable to get global resource %q\" $path }} {{ end }} {{ range where $data \"author\" \"Victor Hugo\" }} {{ .title }} → Les Misérables {{ end }} Page resource A page resource is a file within a page bundle.\ncontent/ ├── post/ │ └── book-reviews/ │ ├── books.json │ └── index.md └── _index.md {{ $data := \"\" }} {{ $path := \"books.json\" }} {{ with .Resources.Get $path }} {{ with unmarshal . }} {{ $data = . }} {{ end }} {{ else }} {{ errorf \"Unable to get page resource %q\" $path }} {{ end }} {{ range where $data \"author\" \"Victor Hugo\" }} {{ .title }} → Les Misérables {{ end }} Remote resource A remote resource is a file on a remote server, accessible via HTTP or HTTPS.\n{{ $data := \"\" }} {{ $url := \"https://example.org/books.json\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ $data = . | transform.Unmarshal }} {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} {{ range where $data \"author\" \"Victor Hugo\" }} {{ .title }} → Les Misérables {{ end }} Options When unmarshaling a CSV file, provide an optional map of options.\ndelimiter (string) The delimiter used, default is ,. comment (string) The comment character used in the CSV. If set, lines beginning with the comment character without preceding whitespace are ignored. lazyQuotes New in v0.122.0\r(bool) If true, a quote may appear in an unquoted field and a non-doubled quote may appear in a quoted field. Default is false. {{ $csv := \"a;b;c\" | transform.Unmarshal (dict \"delimiter\" \";\") }} Working with XML When unmarshaling an XML file, do not include the root node when accessing data. For example, after unmarshaling the RSS feed below, access the feed title with $data.channel.title.\n\u003c?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?\u003e \u003crss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\"\u003e \u003cchannel\u003e \u003ctitle\u003eBooks on Example Site\u003c/title\u003e \u003clink\u003ehttps://example.org/books/\u003c/link\u003e \u003cdescription\u003eRecent content in Books on Example Site\u003c/description\u003e \u003clanguage\u003een-US\u003c/language\u003e \u003catom:link href=\"https://example.org/books/index.xml\" rel=\"self\" type=\"application/rss+xml\" /\u003e \u003citem\u003e \u003ctitle\u003eThe Hunchback of Notre Dame\u003c/title\u003e \u003cdescription\u003eWritten by Victor Hugo\u003c/description\u003e \u003clink\u003ehttps://example.org/books/the-hunchback-of-notre-dame/\u003c/link\u003e \u003cpubDate\u003eMon, 09 Oct 2023 09:27:12 -0700\u003c/pubDate\u003e \u003cguid\u003ehttps://example.org/books/the-hunchback-of-notre-dame/\u003c/guid\u003e \u003c/item\u003e \u003citem\u003e \u003ctitle\u003eLes Misérables\u003c/title\u003e \u003cdescription\u003eWritten by Victor Hugo\u003c/description\u003e \u003clink\u003ehttps://example.org/books/les-miserables/\u003c/link\u003e \u003cpubDate\u003eMon, 09 Oct 2023 09:27:11 -0700\u003c/pubDate\u003e \u003cguid\u003ehttps://example.org/books/les-miserables/\u003c/guid\u003e \u003c/item\u003e \u003c/channel\u003e \u003c/rss\u003e Get the remote data:\n{{ $data := \"\" }} {{ $url := \"https://example.org/books/index.xml\" }} {{ with resources.GetRemote $url }} {{ with .Err }} {{ errorf \"%s\" . }} {{ else }} {{ $data = . | transform.Unmarshal }} {{ end }} {{ else }} {{ errorf \"Unable to get remote resource %q\" $url }} {{ end }} Inspect the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") $data }}\u003c/pre\u003e List the book titles:\n{{ with $data.channel.item }} \u003cul\u003e {{ range . }} \u003cli\u003e{{ .title }}\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Hugo renders this to:\n\u003cul\u003e \u003cli\u003eThe Hunchback of Notre Dame\u003c/li\u003e \u003cli\u003eLes Misérables\u003c/li\u003e \u003c/ul\u003e XML attributes and namespaces Let’s add a lang attribute to the title nodes of our RSS feed, and a namespaced node for the ISBN number:\n\u003c?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?\u003e \u003crss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:isbn=\"http://schemas.isbn.org/ns/1999/basic.dtd\" \u003e \u003cchannel\u003e \u003ctitle\u003eBooks on Example Site\u003c/title\u003e \u003clink\u003ehttps://example.org/books/\u003c/link\u003e \u003cdescription\u003eRecent content in Books on Example Site\u003c/description\u003e \u003clanguage\u003een-US\u003c/language\u003e \u003catom:link href=\"https://example.org/books/index.xml\" rel=\"self\" type=\"application/rss+xml\" /\u003e \u003citem\u003e \u003ctitle lang=\"fr\"\u003eThe Hunchback of Notre Dame\u003c/title\u003e \u003cdescription\u003eWritten by Victor Hugo\u003c/description\u003e \u003cisbn:number\u003e9780140443530\u003c/isbn:number\u003e \u003clink\u003ehttps://example.org/books/the-hunchback-of-notre-dame/\u003c/link\u003e \u003cpubDate\u003eMon, 09 Oct 2023 09:27:12 -0700\u003c/pubDate\u003e \u003cguid\u003ehttps://example.org/books/the-hunchback-of-notre-dame/\u003c/guid\u003e \u003c/item\u003e \u003citem\u003e \u003ctitle lang=\"en\"\u003eLes Misérables\u003c/title\u003e \u003cdescription\u003eWritten by Victor Hugo\u003c/description\u003e \u003cisbn:number\u003e9780451419439\u003c/isbn:number\u003e \u003clink\u003ehttps://example.org/books/les-miserables/\u003c/link\u003e \u003cpubDate\u003eMon, 09 Oct 2023 09:27:11 -0700\u003c/pubDate\u003e \u003cguid\u003ehttps://example.org/books/les-miserables/\u003c/guid\u003e \u003c/item\u003e \u003c/channel\u003e \u003c/rss\u003e After retrieving the remote data, inspect the data structure:\n\u003cpre\u003e{{ jsonify (dict \"indent\" \" \") $data }}\u003c/pre\u003e Each item node looks like this:\n{ \"description\": \"Written by Victor Hugo\", \"guid\": \"https://example.org/books/the-hunchback-of-notre-dame/\", \"link\": \"https://example.org/books/the-hunchback-of-notre-dame/\", \"number\": \"9780140443530\", \"pubDate\": \"Mon, 09 Oct 2023 09:27:12 -0700\", \"title\": { \"#text\": \"The Hunchback of Notre Dame\", \"-lang\": \"fr\" } } The title keys do not begin with an underscore or a letter—they are not valid identifiers. Use the index function to access the values:\n{{ with $data.channel.item }} \u003cul\u003e {{ range . }} {{ $title := index .title \"#text\" }} {{ $lang := index .title \"-lang\" }} {{ $ISBN := .number }} \u003cli\u003e{{ $title }} ({{ $lang }}) {{ $ISBN }}\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Hugo renders this to:\n\u003cul\u003e \u003cli\u003eThe Hunchback of Notre Dame (fr) 9780140443530\u003c/li\u003e \u003cli\u003eLes Misérables (en) 9780451419439\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/functions/transform/xmlescape/","title":"transform.XMLEscape","content":"\rNew in v0.121.0\rThe transform.XMLEscape function removes disallowed characters as defined in the XML specification, then escapes the result by replacing the following characters with HTML entities:\n\" → \u0026#34; ' → \u0026#39; \u0026 → \u0026amp; \u003c → \u0026lt; \u003e → \u0026gt; \\t → \u0026#x9; \\n → \u0026#xA; \\r → \u0026#xD; For example:\n{{ transform.XMLEscape \"\u003cp\u003eabc\u003c/p\u003e\" }} → \u0026lt;p\u0026gt;abc\u0026lt;/p\u0026gt; When using transform.XMLEscape in a template rendered by Go’s html/template package, declare the string to be safe HTML to avoid double escaping. For example, in an RSS template:\nlayouts/_default/rss.xml\r\u003cdescription\u003e{{ .Summary | transform.XMLEscape | safeHTML }}\u003c/description\u003e\r"},{"date":"0001-01-01","uri":"/methods/page/translationkey/","title":"TranslationKey","content":"The translation key creates a relationship between all translations of a given page. The translation key is derived from the file path, or from the translationKey parameter if defined in front matter.\nWith this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: en languages: de: contentDir: content/de languageCode: de-DE languageName: Deutsch weight: 2 en: contentDir: content/en languageCode: en-US languageName: English weight: 1 defaultContentLanguage = 'en' [languages] [languages.de] contentDir = 'content/de' languageCode = 'de-DE' languageName = 'Deutsch' weight = 2 [languages.en] contentDir = 'content/en' languageCode = 'en-US' languageName = 'English' weight = 1 { \"defaultContentLanguage\": \"en\", \"languages\": { \"de\": { \"contentDir\": \"content/de\", \"languageCode\": \"de-DE\", \"languageName\": \"Deutsch\", \"weight\": 2 }, \"en\": { \"contentDir\": \"content/en\", \"languageCode\": \"en-US\", \"languageName\": \"English\", \"weight\": 1 } } } And this content:\ncontent/ ├── de/ │ ├── books/ │ │ ├── buch-1.md │ │ └── book-2.md │ └── _index.md ├── en/ │ ├── books/ │ │ ├── book-1.md │ │ └── book-2.md │ └── _index.md └── _index.md And this front matter:\ncontent/en/books/book-1.md\ryaml\r \rtoml\r \rjson\r \r--- title: Book 1 translationKey: foo ---\r+++ title = 'Book 1' translationKey = 'foo' +++\r{ \"title\": \"Book 1\", \"translationKey\": \"foo\" } content/de/books/buch-1.md\ryaml\r \rtoml\r \rjson\r \r--- title: Buch 1 translationKey: foo ---\r+++ title = 'Buch 1' translationKey = 'foo' +++\r{ \"title\": \"Buch 1\", \"translationKey\": \"foo\" } When rendering either either of the pages above:\n{{ .TranslationKey }} → page/foo If the front matter of Book 2, in both languages, does not include a translation key:\n{{ .TranslationKey }} → page/books/book-2 "},{"date":"0001-01-01","uri":"/methods/page/translations/","title":"Translations","content":"With this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rdefaultContentLanguage: en languages: de: contentDir: content/de languageCode: de-DE languageName: Deutsch weight: 2 en: contentDir: content/en languageCode: en-US languageName: English weight: 1 fr: contentDir: content/fr languageCode: fr-FR languageName: Français weight: 3 defaultContentLanguage = 'en' [languages] [languages.de] contentDir = 'content/de' languageCode = 'de-DE' languageName = 'Deutsch' weight = 2 [languages.en] contentDir = 'content/en' languageCode = 'en-US' languageName = 'English' weight = 1 [languages.fr] contentDir = 'content/fr' languageCode = 'fr-FR' languageName = 'Français' weight = 3 { \"defaultContentLanguage\": \"en\", \"languages\": { \"de\": { \"contentDir\": \"content/de\", \"languageCode\": \"de-DE\", \"languageName\": \"Deutsch\", \"weight\": 2 }, \"en\": { \"contentDir\": \"content/en\", \"languageCode\": \"en-US\", \"languageName\": \"English\", \"weight\": 1 }, \"fr\": { \"contentDir\": \"content/fr\", \"languageCode\": \"fr-FR\", \"languageName\": \"Français\", \"weight\": 3 } } } And this content:\ncontent/ ├── de/ │ ├── books/ │ │ ├── book-1.md │ │ └── book-2.md │ └── _index.md ├── en/ │ ├── books/ │ │ ├── book-1.md │ │ └── book-2.md │ └── _index.md ├── fr/ │ ├── books/ │ │ └── book-1.md │ └── _index.md └── _index.md And this template:\n{{ with .Translations }} \u003cul\u003e {{ range . }} {{ $langName := or .Language.LanguageName .Language.Lang }} {{ $langCode := or .Language.LanguageCode .Language.Lang }} \u003cli\u003e\u003ca href=\"{{ .RelPermalink }}\" hreflang=\"{{ $langCode }}\"\u003e{{ .LinkTitle }} ({{ $langName }})\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e {{ end }} Hugo will render this list on the “Book 1” page of the English site:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/de/books/book-1/\" hreflang=\"de-DE\"\u003eBook 1 (Deutsch)\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/fr/books/book-1/\" hreflang=\"fr-FR\"\u003eBook 1 (Français)\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e Hugo will render this list on the “Book 2” page of the English site:\n\u003cul\u003e \u003cli\u003e\u003ca href=\"/de/books/book-1/\" hreflang=\"de-DE\"\u003eBook 1 (Deutsch)\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/duration/truncate/","title":"Truncate","content":"{{ $d = time.ParseDuration \"3.5h2.5m1.5s\" }} {{ $d.Truncate (time.ParseDuration \"2h\") }} → 2h0m0s {{ $d.Truncate (time.ParseDuration \"3m\") }} → 3h30m0s {{ $d.Truncate (time.ParseDuration \"4s\") }} → 3h32m28s "},{"date":"0001-01-01","uri":"/methods/page/truncated/","title":"Truncated","content":"There are three ways to define the content summary:\nLet Hugo create the summary based on the first 70 words. You can change the number of words by setting the summaryLength in your site configuration. Manually split the content with a \u003c--more--\u003e tag in markdown. Everything before the tag is included in the summary. Create a summary field in front matter. The Truncated method returns false if you define the summary in front matter.\nThe Truncated method returns true if the content length exceeds the summary length. This is useful for rendering a “read more” link:\n{{ range .Pages }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .LinkTitle }}\u003c/a\u003e\u003c/h2\u003e {{ .Summary }} {{ if .Truncated }} \u003ca href=\"{{ .RelPermalink }}\"\u003eRead more...\u003c/a\u003e {{ end }} {{ end }} "},{"date":"0001-01-01","uri":"/methods/page/type/","title":"Type","content":"The Type method on a Page object returns the content type of the given page. The content type is defined by the type field in front matter, or inferred from the top-level directory name if the type field in front matter is not defined.\nWith this content structure:\ncontent/ ├── auction/ │ ├── _index.md │ ├── item-1.md │ └── item-2.md \u003c-- front matter: type = books ├── books/ │ ├── _index.md │ ├── book-1.md │ └── book-2.md ├── films/ │ ├── _index.md │ ├── film-1.md │ └── film-2.md └── _index.md To list the books, regardless of section:\n{{ range where .Site.RegularPages.ByTitle \"Type\" \"books\" }} \u003ch2\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/h2\u003e {{ end }} Hugo renders this to;\n\u003ch2\u003e\u003ca href=\"/books/book-1/\"\u003eBook 1\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/books/book-2/\"\u003eBook 2\u003c/a\u003e\u003c/h2\u003e \u003ch2\u003e\u003ca href=\"/auction/item-2/\"\u003eItem 2\u003c/a\u003e\u003c/h2\u003e The type field in front matter is also useful for targeting a template. See details.\n"},{"date":"0001-01-01","uri":"/methods/time/unix/","title":"Unix","content":"See Unix epoch.\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Unix }} → 1674891898 "},{"date":"0001-01-01","uri":"/methods/time/unixmicro/","title":"UnixMicro","content":"See Unix epoch.\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.UnixMicro }} → 1674891898000000 "},{"date":"0001-01-01","uri":"/methods/time/unixmilli/","title":"UnixMilli","content":"See Unix epoch.\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.UnixMilli }} → 1674891898000 "},{"date":"0001-01-01","uri":"/methods/time/unixnano/","title":"UnixNano","content":"See Unix epoch.\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.UnixNano }} → 1674891898000000000 "},{"date":"0001-01-01","uri":"/methods/menu-entry/url/","title":"URL","content":"For menu entries associated with a page, the URL method returns the page’s RelPermalink, otherwise it returns the entry’s url property.\n\u003cul\u003e {{ range .Site.Menus.main }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/functions/go-template/urlquery/","title":"urlquery","content":"This template code:\n{{ $u := urlquery \"https://\" \"example.com\" | safeURL }} \u003ca href=\"https://example.org?url={{ $u }}\"\u003eLink\u003c/a\u003e Is rendered to:\n\u003ca href=\"https://example.org?url=https%3A%2F%2Fexample.com\"\u003eLink\u003c/a\u003e See Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/functions/urls/abslangurl/","title":"urls.AbsLangURL","content":"Use this function with both monolingual and multilingual configurations. The URL returned by this function depends on:\nWhether the input begins with a slash The baseURL in site configuration The language prefix, if any In examples that follow, the project is multilingual with content in both Español (es) and English (en). The default language is Español. The returned values are from the English site.\nInput does not begin with a slash If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.\nWith baseURL = https://example.org/\n{{ absLangURL \"\" }} → https://example.org/en/ {{ absLangURL \"articles\" }} → https://example.org/en/articles {{ absLangURL \"style.css\" }} → https://example.org/en/style.css With baseURL = https://example.org/docs/\n{{ absLangURL \"\" }} → https://example.org/docs/en/ {{ absLangURL \"articles\" }} → https://example.org/docs/en/articles {{ absLangURL \"style.css\" }} → https://example.org/docs/en/style.css Input begins with a slash If the input begins with a slash, the resulting URL will be incorrect when the baseURL includes a subdirectory. With a leading slash, the function returns a URL relative to the protocol+host section of the baseURL.\nWith baseURL = https://example.org/\n{{ absLangURL \"/\" }} → https://example.org/en/ {{ absLangURL \"/articles\" }} → https://example.org/en/articles {{ absLangURL \"/style.css\" }} → https://example.org/en/style.css With baseURL = https://example.org/docs/\n{{ absLangURL \"/\" }} → https://example.org/en/ {{ absLangURL \"/articles\" }} → https://example.org/en/articles {{ absLangURL \"/style.css\" }} → https://example.org/en/style.css The last three examples are not desirable in most situations. As a best practice, never include a leading slash when using this function.\n"},{"date":"0001-01-01","uri":"/functions/urls/absurl/","title":"urls.AbsURL","content":"With multilingual configurations, use the absLangURL function instead. The URL returned by this function depends on:\nWhether the input begins with a slash The baseURL in site configuration Input does not begin with a slash If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.\nWith baseURL = https://example.org/\n{{ absURL \"\" }} → https://example.org/ {{ absURL \"articles\" }} → https://example.org/articles {{ absURL \"style.css\" }} → https://example.org/style.css With baseURL = https://example.org/docs/\n{{ absURL \"\" }} → https://example.org/docs/ {{ absURL \"articles\" }} → https://example.org/docs/articles {{ absURL \"style.css\" }} → https://example.org/docs/style.css Input begins with a slash If the input begins with a slash, the resulting URL will be incorrect when the baseURL includes a subdirectory. With a leading slash, the function returns a URL relative to the protocol+host section of the baseURL.\nWith baseURL = https://example.org/\n{{ absURL \"/\" }} → https://example.org/ {{ absURL \"/articles\" }} → https://example.org/articles {{ absURL \"/style.css\" }} → https://example.org/style.css With baseURL = https://example.org/docs/\n{{ absURL \"/\" }} → https://example.org/ {{ absURL \"/articles\" }} → https://example.org/articles {{ absURL \"/style.css\" }} → https://example.org/style.css The last three examples are not desirable in most situations. As a best practice, never include a leading slash when using this function.\n"},{"date":"0001-01-01","uri":"/functions/urls/anchorize/","title":"urls.Anchorize","content":"The anchorize and urlize functions are similar:\nUse the anchorize function to generate an HTML id attribute value Use the urlize function to sanitize a string for usage in a URL For example:\n{{ $s := \"A B C\" }} {{ $s | anchorize }} → a-b-c {{ $s | urlize }} → a-b-c {{ $s := \"a b c\" }} {{ $s | anchorize }} → a-b---c {{ $s | urlize }} → a-b-c {{ $s := \"\u003c a, b, \u0026 c \u003e\" }} {{ $s | anchorize }} → -a-b--c- {{ $s | urlize }} → a-b-c {{ $s := \"main.go\" }} {{ $s | anchorize }} → maingo {{ $s | urlize }} → main.go {{ $s := \"Hugö\" }} {{ $s | anchorize }} → hugö {{ $s | urlize }} → hug%C3%B6 Sanitizing logic With the default markdown renderer, Goldmark, the sanitizing logic is controlled by your site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rmarkup: goldmark: parser: autoHeadingIDType: github [markup] [markup.goldmark] [markup.goldmark.parser] autoHeadingIDType = 'github' { \"markup\": { \"goldmark\": { \"parser\": { \"autoHeadingIDType\": \"github\" } } } } This controls the behavior of the anchorize function and the generation of heading IDs when rendering markdown to HTML.\nSet autoHeadingIDType to one of:\ngithub Compatible with GitHub. This is the default, and strongly recommended. github-ascii Similar to the “github” setting, but removes non-ASCII characters. blackfriday Provided for backwards compatibility with Hugo v0.59.1 and earlier. This option will be removed in a future release. "},{"date":"0001-01-01","uri":"/functions/urls/joinpath/","title":"urls.JoinPath","content":"\rNew in v0.112.0\r{{ urls.JoinPath }} → \"\" (empty string) {{ urls.JoinPath \"\" }} → / {{ urls.JoinPath \"a\" }} → a {{ urls.JoinPath \"a\" \"b\" }} → a/b {{ urls.JoinPath \"/a\" \"b\" }} → /a/b {{ urls.JoinPath \"https://example.org\" \"b\" }} → https://example.org/b {{ urls.JoinPath (slice \"a\" \"b\") }} → a/b Unlike the path.Join function, urls.JoinPath retains consecutive leading slashes.\n"},{"date":"0001-01-01","uri":"/functions/urls/parse/","title":"urls.Parse","content":"The urls.Parse function parses a URL into a URL structure. The URL may be relative (a path, without a host) or absolute (starting with a scheme). Hugo throws an error when parsing an invalid URL.\n{{ $url := \"https://example.org:123/foo?a=6\u0026b=7#bar\" }} {{ $u := urls.Parse $url }} {{ $u.IsAbs }} → true {{ $u.Scheme }} → https {{ $u.Host }} → example.org:123 {{ $u.Hostname }} → example.org {{ $u.RequestURI }} → /foo?a=6\u0026b=7 {{ $u.Path }} → /foo {{ $u.Query }} → map[a:[6] b:[7]] {{ $u.Query.a }} → [6] {{ $u.Query.Get \"a\" }} → 6 {{ $u.Query.Has \"b\" }} → true {{ $u.Fragment }} → bar "},{"date":"0001-01-01","uri":"/functions/urls/ref/","title":"urls.Ref","content":"The first argument is the context of the page from which to resolve relative paths, typically the current page.\nThe second argument is a path to a page, with or without a file extension, with or without an anchor. A path without a leading / is first resolved relative to the given context, then to the remainder of the site. Alternatively, provide an options map instead of a path.\n{{ ref . \"about\" }} {{ ref . \"about#anchor\" }} {{ ref . \"about.md\" }} {{ ref . \"about.md#anchor\" }} {{ ref . \"#anchor\" }} {{ ref . \"/blog/my-post\" }} {{ ref . \"/blog/my-post.md\" }} Options Instead of specifying a path, you can also provide an options map:\npath (string) The path to the page, relative to the content directory. Required. lang (string) The language (site) to search for the page. Default is the current language. Optional. outputFormat (string) The output format to search for the page. Default is the current output format. Optional. To return the absolute permalink to another language version of a page:\n{{ ref . (dict \"path\" \"about.md\" \"lang\" \"fr\") }} To return the absolute permalink to another Output Format of a page:\n{{ ref . (dict \"path\" \"about.md\" \"outputFormat\" \"rss\") }} By default, Hugo will throw an error and fail the build if it cannot resolve the path. You can change this to a warning in your site configuration, and specify a URL to return when the path cannot be resolved.\nhugo.\ryaml\r \rtoml\r \rjson\r \rrefLinksErrorLevel: warning refLinksNotFoundURL: /some/other/url refLinksErrorLevel = 'warning' refLinksNotFoundURL = '/some/other/url' { \"refLinksErrorLevel\": \"warning\", \"refLinksNotFoundURL\": \"/some/other/url\" } "},{"date":"0001-01-01","uri":"/functions/urls/rellangurl/","title":"urls.RelLangURL","content":"Use this function with both monolingual and multilingual configurations. The URL returned by this function depends on:\nWhether the input begins with a slash The baseURL in site configuration The language prefix, if any In examples that follow, the project is multilingual with content in both Español (es) and English (en). The default language is Español. The returned values are from the English site.\nInput does not begin with a slash If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.\nWith baseURL = https://example.org/\n{{ relLangURL \"\" }} → /en/ {{ relLangURL \"articles\" }} → /en/articles {{ relLangURL \"style.css\" }} → /en/style.css With baseURL = https://example.org/docs/\n{{ relLangURL \"\" }} → /docs/en/ {{ relLangURL \"articles\" }} → /docs/en/articles {{ relLangURL \"style.css\" }} → /docs/en/style.css Input begins with a slash If the input begins with a slash, the resulting URL will be incorrect when the baseURL includes a subdirectory. With a leading slash, the function returns a URL relative to the protocol+host section of the baseURL.\nWith baseURL = https://example.org/\n{{ relLangURL \"/\" }} → /en/ {{ relLangURL \"/articles\" }} → /en/articles {{ relLangURL \"/style.css\" }} → /en/style.css With baseURL = https://example.org/docs/\n{{ relLangURL \"/\" }} → /en/ {{ relLangURL \"/articles\" }} → /en/articles {{ relLangURL \"/style.css\" }} → /en/style.css The last three examples are not desirable in most situations. As a best practice, never include a leading slash when using this function.\n"},{"date":"0001-01-01","uri":"/functions/urls/relref/","title":"urls.RelRef","content":"The first argument is the context of the page from which to resolve relative paths, typically the current page.\nThe second argument is a path to a page, with or without a file extension, with or without an anchor. A path without a leading / is first resolved relative to the given context, then to the remainder of the site. Alternatively, provide an options map instead of a path. .\n{{ relref . \"about\" }} {{ relref . \"about#anchor\" }} {{ relref . \"about.md\" }} {{ relref . \"about.md#anchor\" }} {{ relref . \"#anchor\" }} {{ relref . \"/blog/my-post\" }} {{ relref . \"/blog/my-post.md\" }} The permalink returned is relative to the protocol+host portion of the baseURL specified in the site configuration. For example:\nCode baseURL Permalink {{ relref . \"/about\" }} https://example.org/ /about/ {{ relref . \"/about\" }} https://example.org/x/ /x/about/ Options Instead of specifying a path, you can also provide an options map:\npath (string) The path to the page, relative to the content directory. Required. lang (string) The language (site) to search for the page. Default is the current language. Optional. outputFormat (string) The output format to search for the page. Default is the current output format. Optional. To return the relative permalink to another language version of a page:\n{{ relref . (dict \"path\" \"about.md\" \"lang\" \"fr\") }} To return the relative permalink to another Output Format of a page:\n{{ relref . (dict \"path\" \"about.md\" \"outputFormat\" \"rss\") }} By default, Hugo will throw an error and fail the build if it cannot resolve the path. You can change this to a warning in your site configuration, and specify a URL to return when the path cannot be resolved.\nhugo.\ryaml\r \rtoml\r \rjson\r \rrefLinksErrorLevel: warning refLinksNotFoundURL: /some/other/url refLinksErrorLevel = 'warning' refLinksNotFoundURL = '/some/other/url' { \"refLinksErrorLevel\": \"warning\", \"refLinksNotFoundURL\": \"/some/other/url\" } "},{"date":"0001-01-01","uri":"/functions/urls/relurl/","title":"urls.RelURL","content":"With multilingual configurations, use the relLangURL function instead. The URL returned by this function depends on:\nWhether the input begins with a slash The baseURL in site configuration Input does not begin with a slash If the input does not begin with a slash, the resulting URL will be correct regardless of the baseURL.\nWith baseURL = https://example.org/\n{{ relURL \"\" }} → / {{ relURL \"articles\" }} → /articles {{ relURL \"style.css\" }} → /style.css With baseURL = https://example.org/docs/\n{{ relURL \"\" }} → /docs/ {{ relURL \"articles\" }} → /docs/articles {{ relURL \"style.css\" }} → /docs/style.css Input begins with a slash If the input begins with a slash, the resulting URL will be incorrect when the baseURL includes a subdirectory. With a leading slash, the function returns a URL relative to the protocol+host section of the baseURL.\nWith baseURL = https://example.org/\n{{ relURL \"/\" }} → / {{ relURL \"/articles\" }} → /articles {{ relURL \"style.css\" }} → /style.css With baseURL = https://example.org/docs/\n{{ relURL \"/\" }} → / {{ relURL \"/articles\" }} → /articles {{ relURL \"/style.css\" }} → /style.css The last three examples are not desirable in most situations. As a best practice, never include a leading slash when using this function.\n"},{"date":"0001-01-01","uri":"/functions/urls/urlize/","title":"urls.URLize","content":"The anchorize and urlize functions are similar:\nUse the anchorize function to generate an HTML id attribute value Use the urlize function to sanitize a string for usage in a URL For example:\n{{ $s := \"A B C\" }} {{ $s | anchorize }} → a-b-c {{ $s | urlize }} → a-b-c {{ $s := \"a b c\" }} {{ $s | anchorize }} → a-b---c {{ $s | urlize }} → a-b-c {{ $s := \"\u003c a, b, \u0026 c \u003e\" }} {{ $s | anchorize }} → -a-b--c- {{ $s | urlize }} → a-b-c {{ $s := \"main.go\" }} {{ $s | anchorize }} → maingo {{ $s | urlize }} → main.go {{ $s := \"Hugö\" }} {{ $s | anchorize }} → hugö {{ $s | urlize }} → hug%C3%B6 Example Use the urlize function to create a link to a term page.\nConsider this site configuration:\nhugo.\ryaml\r \rtoml\r \rjson\r \rtaxonomies: author: authors [taxonomies] author = 'authors' { \"taxonomies\": { \"author\": \"authors\" } } And this front matter:\ncontent/books/les-miserables.md\ryaml\r \rtoml\r \rjson\r \r--- authors: - Victor Hugo title: Les Misérables ---\r+++ authors = ['Victor Hugo'] title = 'Les Misérables' +++\r{ \"authors\": [ \"Victor Hugo\" ], \"title\": \"Les Misérables\" } The published site will have this structure:\npublic/ ├── authors/ │ ├── victor-hugo/ │ │ └── index.html │ └── index.html ├── books/ │ ├── les-miserables/ │ │ └── index.html │ └── index.html └── index.html To create a link to the term page:\n{{ $taxonomy := \"authors\" }} {{ $term := \"Victor Hugo\" }} {{ with index .Site.Taxonomies $taxonomy (urlize $term) }} \u003ca href=\"{{ .Page.RelPermalink }}\"\u003e{{ .Page.LinkTitle }}\u003c/a\u003e {{ end }} To generate a list of term pages associated with a given content page, use the GetTerms method on a Page object.\n"},{"date":"0001-01-01","uri":"/methods/time/utc/","title":"UTC","content":"{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.UTC }} → 2023-01-28 07:44:58 +0000 UTC "},{"date":"0001-01-01","uri":"/methods/time/weekday/","title":"Weekday","content":"To convert the time.Weekday value to a string:\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Weekday.String }} → Friday To convert the time.Weekday value to an integer.\n{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Weekday | int }} → 5 "},{"date":"0001-01-01","uri":"/methods/menu-entry/weight/","title":"Weight","content":"If you define the menu entry automatically, the Weight method returns the page’s Weight.\nIf you define the menu entry in front matter or in site configuration, the Weight method returns the weight property, falling back to the page’s Weight.\nIn this contrived example, we limit the number of menu entries based on weight:\n\u003cul\u003e {{ range .Site.Menus.main }} {{ if le .Weight 42 }} \u003cli\u003e\u003ca href=\"{{ .URL }}\"\u003e{{ .Name }}\u003c/a\u003e\u003c/li\u003e {{ end }} {{ end }} \u003c/ul\u003e "},{"date":"0001-01-01","uri":"/methods/page/weight/","title":"Weight","content":"The Weight method on a Page object returns the weight of the given page as defined in front matter.\ncontent/recipes/sushi.md\ryaml\r \rtoml\r \rjson\r \r--- title: How to make spicy tuna hand rolls weight: 42 ---\r+++ title = 'How to make spicy tuna hand rolls' weight = 42 +++\r{ \"title\": \"How to make spicy tuna hand rolls\", \"weight\": 42 } Page weight controls the position of a page within a collection that is sorted by weight. Assign weights using non-zero integers. Lighter items float to the top, while heavier items sink to the bottom. Unweighted or zero-weighted elements are placed at the end of the collection.\nAlthough rarely used within a template, you can access the value with:\n{{ .Weight }} → 42 "},{"date":"0001-01-01","uri":"/methods/resource/width/","title":"Width","content":"{{ with resources.Get \"images/a.jpg\" }} {{ .Width }} → 600 {{ end }} Use the Width and Height methods together when rendering an img element:\n{{ with resources.Get \"images/a.jpg\" }} \u003cimg src=\"{{ .RelPermalink }}\" width=\"{{ .Width }}\" height=\"{{ .Height }}\"\u003e {{ end }} Use this method with global, page, or remote resources.\n"},{"date":"0001-01-01","uri":"/functions/go-template/with/","title":"with","content":"In Go templates, the falsy values are false, 0, any nil pointer or interface value, and any array, slice, map, or string of length zero. Everything else is truthy.\n{{ $var := \"foo\" }} {{ with $var }} {{ . }} → foo {{ end }} Use with the else statement:\n{{ $var := \"foo\" }} {{ with $var }} {{ . }} → foo {{ else }} {{ print \"var is falsy\" }} {{ end }} Initialize a variable, scoped to the current block:\n{{ with $var := 42 }} {{ . }} → 42 {{ $var }} → 42 {{ end }} {{ $var }} → undefined Understanding context At the top of a page template, the context (the dot) is a Page object. Inside of the with block, the context is bound to the value passed to the with statement.\nWith this contrived example:\n{{ with 42 }} {{ .Title }} {{ end }} Hugo will throw an error:\ncan't evaluate field Title in type int\rThe error occurs because we are trying to use the .Title method on an integer instead of a Page object. Inside of the with block, if we want to render the page title, we need to get the context passed into the template.\nUse the $ to get the context passed into the template.\nThis template will render the page title as desired:\n{{ with 42 }} {{ $.Title }} {{ end }} Gaining a thorough understanding of context is critical for anyone writing template code.\nSee Go’s text/template documentation for more information.\n"},{"date":"0001-01-01","uri":"/methods/page/wordcount/","title":"WordCount","content":"{{ .WordCount }} → 103 To round up to nearest multiple of 100, use the FuzzyWordCount method.\n"},{"date":"0001-01-01","uri":"/methods/time/year/","title":"Year","content":"{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.Year }} → 2023 "},{"date":"0001-01-01","uri":"/methods/time/yearday/","title":"YearDay","content":"{{ $t := time.AsTime \"2023-01-27T23:44:58-08:00\" }} {{ $t.YearDay }} → 27 "}]